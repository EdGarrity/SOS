
C:\Users\edgar\OneDrive\Projects\Source\Repos\EdGarrity\SOS\SOS>SOS.lnk
Create Population Agents
Create Child Agents
Generation 0
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = -27604.8
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = -58501.8
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = -23961.2
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = -44811.1
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = -58501.8
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = -58501.8
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    alternation
  n = 1
    alternation
  n = 2
    alternation
  n = 3
    alternation
  n = 4
    mutation
  n = 5
    mutation
  n = 6
    alternation
  n = 7
    mutation
  n = 8
    alternation
  n = 9
    alternation
  n = 10
    mutation
  n = 11
    alternation
  n = 12
    alternation
  n = 13
    mutation
  n = 14
    alternation
  n = 15
    mutation
  n = 16
    mutation
  n = 17
    mutation
  n = 18
    alternation
  n = 19
    mutation
  n = 20
    alternation
  n = 21
    mutation
  n = 22
    mutation
  n = 23
    mutation
  n = 24
    alternation
Install New Generation
Generation 1
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = 1.79769e+308
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    mutation
  n = 1
    mutation
  n = 2
    mutation
  n = 3
    alternation
  n = 4
    mutation
  n = 5
    alternation
  n = 6
    mutation
  n = 7
    alternation
  n = 8
    alternation
  n = 9
    mutation
  n = 10
    mutation
  n = 11
    alternation
  n = 12
    alternation
  n = 13
    mutation
  n = 14
    alternation
  n = 15
    mutation
  n = 16
    mutation
  n = 17
    mutation
  n = 18
    alternation
  n = 19
    alternation
  n = 20
    mutation
  n = 21
    mutation
  n = 22
    mutation
  n = 23
    mutation
  n = 24
    alternation
Install New Generation
Generation 2
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = 1.79769e+308
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    alternation
  n = 1
    mutation
  n = 2
    mutation
  n = 3
    alternation
  n = 4
    mutation
  n = 5
    mutation
  n = 6
    alternation
  n = 7
    mutation
  n = 8
    mutation
  n = 9
    alternation
  n = 10
    alternation
  n = 11
    mutation
  n = 12
    alternation
  n = 13
    alternation
  n = 14
    mutation
  n = 15
    alternation
  n = 16
    alternation
  n = 17
    alternation
  n = 18
    alternation
  n = 19
    mutation
  n = 20
    mutation
  n = 21
    mutation
  n = 22
    mutation
  n = 23
    mutation
  n = 24
    alternation
Install New Generation
Generation 3
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = 1.79769e+308
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    alternation
  n = 1
    mutation
  n = 2
    mutation
  n = 3
    alternation
  n = 4
    alternation
  n = 5
    alternation
  n = 6
    mutation
  n = 7
    alternation
  n = 8
    alternation
  n = 9
    alternation
  n = 10
    alternation
  n = 11
    mutation
  n = 12
    mutation
  n = 13
    mutation
  n = 14
    mutation
  n = 15
    alternation
  n = 16
    mutation
  n = 17
    mutation
  n = 18
    mutation
  n = 19
    alternation
  n = 20
    mutation
  n = 21
    mutation
  n = 22
    alternation
  n = 23
    mutation
  n = 24
    alternation
Install New Generation
Generation 4
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = 1.79769e+308
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    alternation
  n = 1
    mutation
  n = 2
    mutation
  n = 3
    mutation
  n = 4
    mutation
  n = 5
    alternation
  n = 6
    mutation
  n = 7
    alternation
  n = 8
    mutation
  n = 9
    mutation
  n = 10
    alternation
  n = 11
    mutation
  n = 12
    alternation
  n = 13
    mutation
  n = 14
    mutation
  n = 15
    mutation
  n = 16
    mutation
  n = 17
    mutation
  n = 18
    alternation
  n = 19
    alternation
  n = 20
    mutation
  n = 21
    mutation
  n = 22
    mutation
  n = 23
    alternation
  n = 24
    mutation
Install New Generation
Generation 5
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = 1.79769e+308
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    alternation
  n = 1
    mutation
  n = 2
    mutation
  n = 3
    mutation
  n = 4
    mutation
  n = 5
    alternation
  n = 6
    alternation
  n = 7
    mutation
  n = 8
    alternation
  n = 9
    mutation
  n = 10
    alternation
  n = 11
    mutation
  n = 12
    alternation
  n = 13
    alternation
  n = 14
    alternation
  n = 15
    mutation
  n = 16
    mutation
  n = 17
    mutation
  n = 18
    alternation
  n = 19
    alternation
  n = 20
    alternation
  n = 21
    alternation
  n = 22
    mutation
  n = 23
    alternation
  n = 24
    mutation
Install New Generation
Generation 6
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = 1.79769e+308
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    mutation
  n = 1
    mutation
  n = 2
    alternation
  n = 3
    mutation
  n = 4
    alternation
  n = 5
    mutation
  n = 6
    alternation
  n = 7
    mutation
  n = 8
    alternation
  n = 9
    mutation
  n = 10
    alternation
  n = 11
    mutation
  n = 12
    mutation
  n = 13
    alternation
  n = 14
    alternation
  n = 15
    alternation
  n = 16
    alternation
  n = 17
    alternation
  n = 18
    alternation
  n = 19
    mutation
  n = 20
    mutation
  n = 21
    alternation
  n = 22
    mutation
  n = 23
    mutation
  n = 24
    mutation
Install New Generation
Generation 7
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = 1.79769e+308
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    alternation
  n = 1
    mutation
  n = 2
    mutation
  n = 3
    alternation
  n = 4
    mutation
  n = 5
    mutation
  n = 6
    mutation
  n = 7
    mutation
  n = 8
    alternation
  n = 9
    alternation
  n = 10
    mutation
  n = 11
    alternation
  n = 12
    mutation
  n = 13
    mutation
  n = 14
    alternation
  n = 15
    mutation
  n = 16
    alternation
  n = 17
    mutation
  n = 18
    alternation
  n = 19
    mutation
  n = 20
    mutation
  n = 21
    mutation
  n = 22
    mutation
  n = 23
    alternation
  n = 24
    alternation
Install New Generation
Generation 8
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = 1.79769e+308
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    mutation
  n = 1
    alternation
  n = 2
    mutation
  n = 3
    alternation
  n = 4
    alternation
  n = 5
    alternation
  n = 6
    mutation
  n = 7
    mutation
  n = 8
    mutation
  n = 9
    mutation
  n = 10
    alternation
  n = 11
    mutation
  n = 12
    alternation
  n = 13
    alternation
  n = 14
    mutation
  n = 15
    alternation
  n = 16
    alternation
  n = 17
    alternation
  n = 18
    mutation
  n = 19
    mutation
  n = 20
    mutation
  n = 21
    alternation
  n = 22
    alternation
  n = 23
    mutation
  n = 24
    mutation
Install New Generation
Generation 9
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = -38247.6
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = -38247.6
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    mutation
  n = 1
    alternation
  n = 2
    mutation
  n = 3
    mutation
  n = 4
    mutation
  n = 5
    alternation
  n = 6
    mutation
  n = 7
    alternation
  n = 8
    alternation
  n = 9
    alternation
  n = 10
    mutation
  n = 11
    alternation
  n = 12
    alternation
  n = 13
    alternation
  n = 14
    alternation
  n = 15
    alternation
  n = 16
    mutation
  n = 17
    alternation
  n = 18
    mutation
  n = 19
    alternation
  n = 20
    alternation
  n = 21
    alternation
  n = 22
    alternation
  n = 23
    alternation
  n = 24
    mutation
Install New Generation
Generation 10
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = 1.79769e+308
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    mutation
  n = 1
    mutation
  n = 2
    alternation
  n = 3
    alternation
  n = 4
    mutation
  n = 5
    alternation
  n = 6
    alternation
  n = 7
    alternation
  n = 8
    mutation
  n = 9
    alternation
  n = 10
    mutation
  n = 11
    alternation
  n = 12
    alternation
  n = 13
    mutation
  n = 14
    alternation
  n = 15
    alternation
  n = 16
    alternation
  n = 17
    alternation
  n = 18
    alternation
  n = 19
    mutation
  n = 20
    alternation
  n = 21
    alternation
  n = 22
    alternation
  n = 23
    alternation
  n = 24
    alternation
Install New Generation
Generation 11
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = 1.79769e+308
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    alternation
  n = 1
    alternation
  n = 2
    alternation
  n = 3
    mutation
  n = 4
    mutation
  n = 5
    alternation
  n = 6
    mutation
  n = 7
    alternation
  n = 8
    alternation
  n = 9
    alternation
  n = 10
    mutation
  n = 11
    mutation
  n = 12
    mutation
  n = 13
    mutation
  n = 14
    alternation
  n = 15
    alternation
  n = 16
    mutation
  n = 17
    alternation
  n = 18
    mutation
  n = 19
    alternation
  n = 20
    alternation
  n = 21
    mutation
  n = 22
    alternation
  n = 23
    mutation
  n = 24
    alternation
Install New Generation
Generation 12
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = 1.79769e+308
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    alternation
  n = 1
    mutation
  n = 2
    mutation
  n = 3
    mutation
  n = 4
    mutation
  n = 5
    alternation
  n = 6
    alternation
  n = 7
    alternation
  n = 8
    mutation
  n = 9
    mutation
  n = 10
    alternation
  n = 11
    alternation
  n = 12
    alternation
  n = 13
    mutation
  n = 14
    mutation
  n = 15
    alternation
  n = 16
    mutation
  n = 17
    alternation
  n = 18
    alternation
  n = 19
    alternation
  n = 20
    mutation
  n = 21
    alternation
  n = 22
    mutation
  n = 23
    alternation
  n = 24
    alternation
Install New Generation
Generation 13
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = 1.79769e+308
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    alternation
  n = 1
    alternation
  n = 2
    mutation
  n = 3
    alternation
  n = 4
    mutation
  n = 5
    mutation
  n = 6
    mutation
  n = 7
    mutation
  n = 8
    alternation
  n = 9
    alternation
  n = 10
    mutation
  n = 11
    alternation
  n = 12
    alternation
  n = 13
    alternation
  n = 14
    mutation
  n = 15
    mutation
  n = 16
    mutation
  n = 17
    mutation
  n = 18
    alternation
  n = 19
    mutation
  n = 20
    mutation
  n = 21
    mutation
  n = 22
    mutation
  n = 23
    mutation
  n = 24
    alternation
Install New Generation
Generation 14
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = 1.79769e+308
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    alternation
  n = 1
    alternation
  n = 2
    mutation
  n = 3
    mutation
  n = 4
    alternation
  n = 5
    mutation
  n = 6
    alternation
  n = 7
    alternation
  n = 8
    alternation
  n = 9
    mutation
  n = 10
    alternation
  n = 11
    alternation
  n = 12
    mutation
  n = 13
    alternation
  n = 14
    mutation
  n = 15
    alternation
  n = 16
    alternation
  n = 17
    alternation
  n = 18
    alternation
  n = 19
    mutation
  n = 20
    mutation
  n = 21
    alternation
  n = 22
    alternation
  n = 23
    mutation
  n = 24
    alternation
Install New Generation
Generation 15
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = 1.79769e+308
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    mutation
  n = 1
    mutation
  n = 2
    mutation
  n = 3
    alternation
  n = 4
    alternation
  n = 5
    alternation
  n = 6
    alternation
  n = 7
    mutation
  n = 8
    mutation
  n = 9
    alternation
  n = 10
    alternation
  n = 11
    alternation
  n = 12
    mutation
  n = 13
    mutation
  n = 14
    alternation
  n = 15
    alternation
  n = 16
    mutation
  n = 17
    mutation
  n = 18
    alternation
  n = 19
    alternation
  n = 20
    mutation
  n = 21
    alternation
  n = 22
    alternation
  n = 23
    mutation
  n = 24
    mutation
Install New Generation
Generation 16
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = 1.79769e+308
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    mutation
  n = 1
    alternation
  n = 2
    mutation
  n = 3
    mutation
  n = 4
    alternation
  n = 5
    mutation
  n = 6
    alternation
  n = 7
    mutation
  n = 8
    alternation
  n = 9
    alternation
  n = 10
    alternation
  n = 11
    alternation
  n = 12
    mutation
  n = 13
    mutation
  n = 14
    mutation
  n = 15
    mutation
  n = 16
    alternation
  n = 17
    alternation
  n = 18
    alternation
  n = 19
    alternation
  n = 20
    mutation
  n = 21
    mutation
  n = 22
    alternation
  n = 23
    alternation
  n = 24
    mutation
Install New Generation
Generation 17
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = 1.79769e+308
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    mutation
  n = 1
    mutation
  n = 2
    alternation
  n = 3
    mutation
  n = 4
    mutation
  n = 5
    mutation
  n = 6
    mutation
  n = 7
    mutation
  n = 8
    alternation
  n = 9
    alternation
  n = 10
    alternation
  n = 11
    mutation
  n = 12
    mutation
  n = 13
    alternation
  n = 14
    alternation
  n = 15
    mutation
  n = 16
    alternation
  n = 17
    alternation
  n = 18
    alternation
  n = 19
    mutation
  n = 20
    mutation
  n = 21
    mutation
  n = 22
    mutation
  n = 23
    alternation
  n = 24
    alternation
Install New Generation
Generation 18
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = 1.79769e+308
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    alternation
  n = 1
    mutation
  n = 2
    alternation
  n = 3
    mutation
  n = 4
    alternation
  n = 5
    alternation
  n = 6
    mutation
  n = 7
    alternation
  n = 8
    alternation
  n = 9
    alternation
  n = 10
    alternation
  n = 11
    alternation
  n = 12
    alternation
  n = 13
    alternation
  n = 14
    mutation
  n = 15
    alternation
  n = 16
    mutation
  n = 17
    alternation
  n = 18
    mutation
  n = 19
    mutation
  n = 20
    alternation
  n = 21
    mutation
  n = 22
    mutation
  n = 23
    mutation
  n = 24
    alternation
Install New Generation
Generation 19
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = 1.79769e+308
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    alternation
  n = 1
    alternation
  n = 2
    mutation
  n = 3
    mutation
  n = 4
    alternation
  n = 5
    alternation
  n = 6
    mutation
  n = 7
    alternation
  n = 8
    alternation
  n = 9
    alternation
  n = 10
    alternation
  n = 11
    mutation
  n = 12
    mutation
  n = 13
    alternation
  n = 14
    alternation
  n = 15
    mutation
  n = 16
    mutation
  n = 17
    mutation
  n = 18
    mutation
  n = 19
    mutation
  n = 20
    mutation
  n = 21
    alternation
  n = 22
    alternation
  n = 23
    mutation
  n = 24
    mutation
Install New Generation
Generation 20
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = 1.79769e+308
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    mutation
  n = 1
    alternation
  n = 2
    mutation
  n = 3
    alternation
  n = 4
    mutation
  n = 5
    alternation
  n = 6
    alternation
  n = 7
    alternation
  n = 8
    mutation
  n = 9
    mutation
  n = 10
    alternation
  n = 11
    alternation
  n = 12
    alternation
  n = 13
    mutation
  n = 14
    mutation
  n = 15
    alternation
  n = 16
    alternation
  n = 17
    mutation
  n = 18
    alternation
  n = 19
    mutation
  n = 20
    mutation
  n = 21
    alternation
  n = 22
    mutation
  n = 23
    mutation
  n = 24
    mutation
Install New Generation
Generation 21
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = 1.79769e+308
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    alternation
  n = 1
    mutation
  n = 2
    mutation
  n = 3
    mutation
  n = 4
    alternation
  n = 5
    mutation
  n = 6
    alternation
  n = 7
    mutation
  n = 8
    mutation
  n = 9
    alternation
  n = 10
    mutation
  n = 11
    alternation
  n = 12
    mutation
  n = 13
    mutation
  n = 14
    mutation
  n = 15
    mutation
  n = 16
    alternation
  n = 17
    alternation
  n = 18
    alternation
  n = 19
    alternation
  n = 20
    mutation
  n = 21
    alternation
  n = 22
    mutation
  n = 23
    alternation
  n = 24
    mutation
Install New Generation
Generation 22
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = 1.79769e+308
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    mutation
  n = 1
    mutation
  n = 2
    alternation
  n = 3
    alternation
  n = 4
    mutation
  n = 5
    alternation
  n = 6
    alternation
  n = 7
    alternation
  n = 8
    mutation
  n = 9
    alternation
  n = 10
    mutation
  n = 11
    alternation
  n = 12
    mutation
  n = 13
    mutation
  n = 14
    alternation
  n = 15
    mutation
  n = 16
    mutation
  n = 17
    alternation
  n = 18
    alternation
  n = 19
    mutation
  n = 20
    mutation
  n = 21
    mutation
  n = 22
    alternation
  n = 23
    mutation
  n = 24
    alternation
Install New Generation
Generation 23
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = 1.79769e+308
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    alternation
  n = 1
    alternation
  n = 2
    alternation
  n = 3
    mutation
  n = 4
    alternation
  n = 5
    mutation
  n = 6
    alternation
  n = 7
    alternation
  n = 8
    mutation
  n = 9
    mutation
  n = 10
    mutation
  n = 11
    mutation

C:\Users\edgar\OneDrive\Projects\Source\Repos\EdGarrity\SOS\SOS>
C:\Users\edgar\OneDrive\Projects\Source\Repos\EdGarrity\SOS\SOS>
C:\Users\edgar\OneDrive\Projects\Source\Repos\EdGarrity\SOS\SOS>SOS.lnk
Create Population Agents
Create Child Agents
Generation 0
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = -58501.8
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = -19047.2
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = -58501.8
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = -12934.4
   Min error = -58501.8
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    mutation
      uniform_mutation
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.DO
      new_genome.push_back(atom);
        instruction = FLOAT.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.DUP
      new_genome.push_back(atom);
        instruction = CODE.LENGTH
      new_genome.push_back(atom);
        instruction = FLOAT.*
      new_genome.push_back(atom);
        instruction = FLOAT.ROT
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = EXEC.DO*COUNT
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.%
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = INTEGER.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = EXEC.WHEN
      new_genome.push_back(atom);
        instruction = EXEC.SWAP
      new_genome.push_back(atom);
        instruction = INTEGER.*
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = EXEC.=
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 1
    alternation
  n = 2
    mutation
      uniform_mutation
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.DO
      new_genome.push_back(atom);
        instruction = FLOAT.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.DUP
      new_genome.push_back(atom);
        instruction = CODE.LENGTH
      new_genome.push_back(atom);
        instruction = FLOAT.*
      new_genome.push_back(atom);
        instruction = FLOAT.ROT
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = EXEC.DO*COUNT
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.%
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = INTEGER.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = EXEC.WHEN
      new_genome.push_back(atom);
        instruction = EXEC.SWAP
      new_genome.push_back(atom);
        instruction = INTEGER.*
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = EXEC.=
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 3
    alternation
  n = 4
    mutation
      uniform_mutation
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.DO
      new_genome.push_back(atom);
        instruction = FLOAT.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.DUP
      new_genome.push_back(atom);
        instruction = CODE.LENGTH
      new_genome.push_back(atom);
        instruction = FLOAT.*
      new_genome.push_back(atom);
        instruction = FLOAT.ROT
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = EXEC.DO*COUNT
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.%
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = INTEGER.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = EXEC.WHEN
      new_genome.push_back(atom);
        instruction = EXEC.SWAP
      new_genome.push_back(atom);
        instruction = INTEGER.*
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = EXEC.=
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 5
    alternation
  n = 6
    alternation
  n = 7
    alternation
  n = 8
    mutation
      uniform_mutation
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.DO
      new_genome.push_back(atom);
        instruction = FLOAT.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.DUP
      new_genome.push_back(atom);
        instruction = CODE.LENGTH
      new_genome.push_back(atom);
        instruction = FLOAT.*
      new_genome.push_back(atom);
        instruction = FLOAT.ROT
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = EXEC.DO*COUNT
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.%
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = INTEGER.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = EXEC.WHEN
      new_genome.push_back(atom);
        instruction = EXEC.SWAP
      new_genome.push_back(atom);
        instruction = INTEGER.*
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = EXEC.=
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 9
    mutation
      uniform_mutation
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.DO
      new_genome.push_back(atom);
        instruction = FLOAT.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.DUP
      new_genome.push_back(atom);
        instruction = CODE.LENGTH
      new_genome.push_back(atom);
        instruction = FLOAT.*
      new_genome.push_back(atom);
        instruction = FLOAT.ROT
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = EXEC.DO*COUNT
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.%
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = INTEGER.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = EXEC.WHEN
      new_genome.push_back(atom);
        instruction = EXEC.SWAP
      new_genome.push_back(atom);
        instruction = INTEGER.*
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = EXEC.=
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 10
    alternation
  n = 11
    alternation
  n = 12
    alternation
  n = 13
    alternation
  n = 14
    alternation
  n = 15
    alternation
  n = 16
    mutation
      uniform_mutation
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.DO
      new_genome.push_back(atom);
        instruction = FLOAT.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.DUP
      new_genome.push_back(atom);
        instruction = CODE.LENGTH
      new_genome.push_back(atom);
        instruction = FLOAT.*
      new_genome.push_back(atom);
        instruction = FLOAT.ROT
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = EXEC.DO*COUNT
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.%
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = INTEGER.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = EXEC.WHEN
      new_genome.push_back(atom);
        instruction = EXEC.SWAP
      new_genome.push_back(atom);
        instruction = INTEGER.*
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = EXEC.=
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 17
    mutation
      uniform_mutation
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.DO
      new_genome.push_back(atom);
        instruction = FLOAT.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.DUP
      new_genome.push_back(atom);
        instruction = CODE.LENGTH
      new_genome.push_back(atom);
        instruction = FLOAT.*
      new_genome.push_back(atom);
        instruction = FLOAT.ROT
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = EXEC.DO*COUNT
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.%
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = INTEGER.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = EXEC.WHEN
      new_genome.push_back(atom);
        instruction = EXEC.SWAP
      new_genome.push_back(atom);
        instruction = INTEGER.*
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = EXEC.=
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 18
    mutation
      uniform_mutation
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.DO
      new_genome.push_back(atom);
        instruction = FLOAT.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.DUP
      new_genome.push_back(atom);
        instruction = CODE.LENGTH
      new_genome.push_back(atom);
        instruction = FLOAT.*
      new_genome.push_back(atom);
        instruction = FLOAT.ROT
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = EXEC.DO*COUNT
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      atom.type == atom.floating_point
        instruction = BOOLEAN.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.%
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = INTEGER.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = EXEC.WHEN
      new_genome.push_back(atom);
        instruction = EXEC.SWAP
      new_genome.push_back(atom);
        instruction = INTEGER.*
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = EXEC.=
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 19
    mutation
      uniform_mutation
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.DO
      new_genome.push_back(atom);
        instruction = FLOAT.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.DUP
      new_genome.push_back(atom);
        instruction = CODE.LENGTH
      new_genome.push_back(atom);
        instruction = FLOAT.*
      new_genome.push_back(atom);
        instruction = FLOAT.ROT
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = EXEC.DO*COUNT
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.%
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = INTEGER.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = EXEC.WHEN
      new_genome.push_back(atom);
        instruction = EXEC.SWAP
      new_genome.push_back(atom);
        instruction = INTEGER.*
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = EXEC.=
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 20
    mutation
      uniform_mutation
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.DO
      new_genome.push_back(atom);
        instruction = FLOAT.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.DUP
      new_genome.push_back(atom);
        instruction = CODE.LENGTH
      new_genome.push_back(atom);
        instruction = FLOAT.*
      new_genome.push_back(atom);
        instruction = FLOAT.ROT
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = EXEC.DO*COUNT
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.%
      new_genome.push_back(random_atom());
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = INTEGER.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = EXEC.WHEN
      new_genome.push_back(atom);
        instruction = EXEC.SWAP
      new_genome.push_back(atom);
        instruction = INTEGER.*
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = EXEC.=
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 21
    alternation
  n = 22
    alternation
  n = 23
    mutation
      uniform_mutation
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.DO
      new_genome.push_back(atom);
        instruction = FLOAT.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.DUP
      new_genome.push_back(atom);
        instruction = CODE.LENGTH
      new_genome.push_back(atom);
        instruction = FLOAT.*
      new_genome.push_back(atom);
        instruction = FLOAT.ROT
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = EXEC.DO*COUNT
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.%
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = INTEGER.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = EXEC.WHEN
      new_genome.push_back(random_atom());
        instruction = EXEC.SWAP
      new_genome.push_back(atom);
        instruction = INTEGER.*
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = EXEC.=
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 24
    alternation
Install New Generation
Generation 1
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6^C
C:\Users\edgar\OneDrive\Projects\Source\Repos\EdGarrity\SOS\SOS>
C:\Users\edgar\OneDrive\Projects\Source\Repos\EdGarrity\SOS\SOS>
C:\Users\edgar\OneDrive\Projects\Source\Repos\EdGarrity\SOS\SOS>
C:\Users\edgar\OneDrive\Projects\Source\Repos\EdGarrity\SOS\SOS>SOS.lnk
Create Population Agents
Create Child Agents
Generation 0
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = -58501.8
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = -17013.8
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = -58501.8
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    alternation
  n = 1
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = INTEGER.MIN
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 2
    alternation
  n = 3
    alternation
  n = 4
    alternation
  n = 5
    alternation
  n = 6
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      atom.type == atom.floating_point
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = INTEGER.MIN
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 7
    alternation
  n = 8
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = INTEGER.MIN
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      atom.type == atom.floating_point
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 9
    alternation
  n = 10
    alternation
  n = 11
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = INTEGER.MIN
      new_genome.push_back(random_atom());
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 12
    alternation
  n = 13
    alternation
  n = 14
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = INTEGER.MIN
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 15
    alternation
  n = 16
    alternation
  n = 17
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = INTEGER.MIN
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(random_atom());
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(random_atom());
      return Individual(new_genome);
  n = 18
    alternation
  n = 19
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = INTEGER.MIN
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 20
    alternation
  n = 21
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = INTEGER.MIN
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 22
    alternation
  n = 23
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = INTEGER.MIN
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(random_atom());
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 24
    alternation
Install New Generation
Generation 1
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = 1.79769e+308
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 1
    alternation
  n = 2
    alternation
  n = 3
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(random_atom());
      return Individual(new_genome);
  n = 4
    alternation
  n = 5
    alternation
  n = 6
    alternation
  n = 7
    alternation
  n = 8
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      atom.type == atom.floating_point
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      atom.type == atom.floating_point
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 9
    alternation
  n = 10
    alternation
  n = 11
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 12
    alternation
  n = 13
    alternation
  n = 14
    alternation
  n = 15
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 16
    alternation
  n = 17
    alternation
  n = 18
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 19
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 20
    alternation
  n = 21
    alternation
  n = 22
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 23
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 24
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
Install New Generation
Generation 2
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = 1.79769e+308
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    alternation
  n = 1
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      atom.type == atom.floating_point
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 2
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 3
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 4
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 5
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 6
    alternation
  n = 7
    alternation
  n = 8
    alternation
    Child too big
  n = 9
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 10
    alternation
  n = 11
    alternation
  n = 12
    alternation
  n = 13
    alternation
  n = 14
    alternation
    Child too big
  n = 15
    alternation
  n = 16
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 17
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 18
    alternation
  n = 19
    alternation
  n = 20
    alternation
  n = 21
    alternation
  n = 22
    alternation
  n = 23
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 24
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      atom.type == atom.floating_point
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
Install New Generation
Generation 3
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = 1.79769e+308
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    alternation
  n = 1
    alternation
  n = 2
    alternation
  n = 3
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 4
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 5
    alternation
  n = 6
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 7
    alternation
  n = 8
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      atom.type == atom.floating_point
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 9
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(random_atom());
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 10
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      atom.type == atom.floating_point
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 11
    alternation
  n = 12
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 13
    alternation
  n = 14
    alternation
  n = 15
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      atom.type == atom.floating_point
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 16
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 17
    alternation
  n = 18
    alternation
  n = 19
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 20
    alternation
  n = 21
    alternation
  n = 22
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 23
    alternation
  n = 24
    alternation
Install New Generation
Generation 4
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = 1.79769e+308
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(random_atom());
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 1
    alternation
  n = 2
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 3
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 4
    alternation
  n = 5
    alternation
  n = 6
    alternation
  n = 7
    alternation
  n = 8
    alternation
  n = 9
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 10
    alternation
  n = 11
    alternation
  n = 12
    alternation
  n = 13
    alternation
  n = 14
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 15
    alternation
  n = 16
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(random_atom());
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 17
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 18
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 19
    alternation
  n = 20
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 21
    alternation
  n = 22
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 23
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 24
    alternation
Install New Generation
Generation 5
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = 1.79769e+308
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    alternation
  n = 1
    alternation
  n = 2
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 3
    alternation
  n = 4
    alternation
  n = 5
    alternation
  n = 6
    alternation
  n = 7
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 8
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(random_atom());
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 9
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 10
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(random_atom());
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      atom.type == atom.floating_point
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 11
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 12
    alternation
  n = 13
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 14
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 15
    alternation
  n = 16
    alternation
  n = 17
    alternation
  n = 18
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 19
    alternation
  n = 20
    alternation
  n = 21
    alternation
  n = 22
    alternation
  n = 23
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 24
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
Install New Generation
Generation 6
Compte Errors
  Evaluate Individual 0 Min error = 1.79769e+308
  Evaluate Individual 1 Min error = 1.79769e+308
  Evaluate Individual 2 Min error = 1.79769e+308
  Evaluate Individual 3 Min error = 1.79769e+308
  Evaluate Individual 4 Min error = 1.79769e+308
  Evaluate Individual 5 Min error = 1.79769e+308
  Evaluate Individual 6 Min error = 1.79769e+308
  Evaluate Individual 7 Min error = 1.79769e+308
  Evaluate Individual 8 Min error = 1.79769e+308
  Evaluate Individual 9 Min error = 1.79769e+308
  Evaluate Individual 10 Min error = 1.79769e+308
  Evaluate Individual 11 Min error = 1.79769e+308
  Evaluate Individual 12 Min error = 1.79769e+308
  Evaluate Individual 13 Min error = 1.79769e+308
  Evaluate Individual 14 Min error = 1.79769e+308
  Evaluate Individual 15 Min error = 1.79769e+308
  Evaluate Individual 16 Min error = 1.79769e+308
  Evaluate Individual 17 Min error = 1.79769e+308
  Evaluate Individual 18 Min error = 1.79769e+308
  Evaluate Individual 19 Min error = 1.79769e+308
  Evaluate Individual 20 Min error = 1.79769e+308
  Evaluate Individual 21 Min error = 1.79769e+308
  Evaluate Individual 22 Min error = 1.79769e+308
  Evaluate Individual 23 Min error = 1.79769e+308
  Evaluate Individual 24 Min error = 1.79769e+308
   Min error = 1.79769e+308
Number_Of_Test_Cases = 16
Calculate Epsilons
Produce New Offspring
  n = 0
    alternation
  n = 1
    alternation
  n = 2
    alternation
  n = 3
    alternation
  n = 4
    alternation
  n = 5
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 6
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 7
    alternation
  n = 8
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 9
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(random_atom());
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      atom.type == atom.floating_point
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 10
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = CODE.CONTAINER
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = INTEGER.POP
      new_genome.push_back(atom);
        instruction = CODE.CAR
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(atom);
        instruction = FLOAT.<
      new_genome.push_back(atom);
        instruction = FLOAT.-
      new_genome.push_back(atom);
        instruction = FLOAT.>
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = FLOAT.TAN
      new_genome.push_back(atom);
        instruction = BOOLEAN.FROMFLOAT
      new_genome.push_back(atom);
        instruction = FLOAT.ERC
      new_genome.push_back(atom);
        instruction = FLOAT.FROMDATA
      new_genome.push_back(atom);
        instruction = CODE.APPEND
      new_genome.push_back(atom);
        instruction = CODE.FLUSH
      new_genome.push_back(atom);
        instruction = EXEC.DUP
      new_genome.push_back(atom);
        instruction = CODE.FROMBOOLEAN
      new_genome.push_back(atom);
        instruction = CODE.INSERT
      new_genome.push_back(atom);
        instruction = BOOLEAN.AND
      new_genome.push_back(atom);
        instruction = CODE.STACKDEPTH
      new_genome.push_back(atom);
        instruction = FLOAT.YANKDUP
      new_genome.push_back(atom);
        instruction = BOOLEAN.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.YANK
      new_genome.push_back(atom);
        instruction = FLOAT.FLUSH
      new_genome.push_back(atom);
        instruction = INTEGER.SWAP
      new_genome.push_back(atom);
        instruction = EXEC.IF
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = BOOLEAN.ROT
      new_genome.push_back(atom);
      return Individual(new_genome);
  n = 11
    mutation
      uniform_mutation
        instruction = CODE.ROT
      new_genome.push_back(atom);
        instruction = FLOAT.FROMINTEGER
      new_genome.push_back(atom);
        instruction = INTEGER.YANKDUP
      new_genome.push_back(atom);
        instruction = INTEGER.FLUSH
      new_genome.push_back(atom);
        instruction = CODE.POP
      new_genome.push_back(atom);
        instruction = BOOLEAN.=
      new_genome.push_back(random_atom());

C:\Users\edgar\OneDrive\Projects\Source\Repos\EdGarrity\SOS\SOS>