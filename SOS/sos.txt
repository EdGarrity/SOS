*************************************
  PushGP Test
*************************************

{ "id": 1,
  "genome": "{:instruction BOOLEAN.OR :close  0}{:instruction CODE.APPEND :close  4}{:instruction CODE.ATOM :close  0}{:instruction FLOAT.STACKDEPTH :close  4}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction FLOAT.- :close  4}{:instruction EXEC.S :close  4}{:instruction BOOLEAN.SWAP :close  4}{:instruction INTEGER.YANKDUP :close  0}{:instruction CODE.DUP :close  0}{:instruction INTEGER.- :close  0}{:instruction BOOLEAN.OR :close  4}{:instruction EXEC.WHEN :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction EXEC.WHEN :close  0}{:instruction CODE.EXTRACT :close  4}{:instruction BOOLEAN.YANKDUP :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction EXEC.STACKDEPTH :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction INTEGER./ :close  0}{:instruction INTEGER.MAX :close  0}{:instruction INTEGER.% :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction CODE.CAR :close  4}{:instruction BOOLEAN.SHOVE :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction CODE.ATOM :close  4}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction EXEC.YANK :close  0}{:instruction EXEC.DUP :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction EXEC.= :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction CODE.IF :close  0}{:instruction EXEC.YANKDUP :close  4}{:instruction INTEGER.DUP :close  4}",
  "program": "(BOOLEAN.OR CODE.APPEND CODE.ATOM FLOAT.STACKDEPTH INTEGER.FROMFLOAT FLOAT.- EXEC.S ()()()BOOLEAN.SWAP INTEGER.YANKDUP CODE.DUP INTEGER.- BOOLEAN.OR EXEC.WHEN (CODE.FROMBOOLEAN BOOLEAN.FROMINTEGER EXEC.WHEN (CODE.EXTRACT ))BOOLEAN.YANKDUP CODE.STACKDEPTH EXEC.STACKDEPTH EXEC.SHOVE (INTEGER./ INTEGER.MAX INTEGER.% BOOLEAN.AND CODE.CAR )BOOLEAN.SHOVE EXEC.DO*TIMES (CODE.DO*TIMES CODE.ATOM )FLOAT.STACKDEPTH CODE.DO*TIMES EXEC.YANK EXEC.DUP (BOOLEAN.NOR EXEC.= BOOLEAN.STACKDEPTH CODE.IF EXEC.YANKDUP )INTEGER.DUP )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 2,
  "genome": "{:instruction CODE.YANKDUP :close  0}{:instruction EXEC.STACKDEPTH :close  0}{:instruction CODE.LENGTH :close  0}{:instruction INTEGER.DUP :close  4}{:instruction INTEGER.POP :close  0}{:instruction INTEGER.> :close  0}{:instruction FLOAT.FROMDATA :close  0}{:instruction EXEC.YANK :close  0}",
  "program": "(CODE.YANKDUP EXEC.STACKDEPTH CODE.LENGTH INTEGER.DUP INTEGER.POP INTEGER.> FLOAT.FROMDATA EXEC.YANK )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 3,
  "genome": "{:instruction BOOLEAN.OR :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction INTEGER.FLUSH :close  4}{:instruction INTEGER.= :close  0}{:instruction CODE.DUP :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction INTEGER.MIN :close  4}{:instruction EXEC.SHOVE :close  0}{:instruction FLOAT.YANK :close  4}{:instruction INTEGER.MAX :close  0}{:instruction CODE.YANKDUP :close  0}{:instruction -0.63625226859847372 :close  0}{:instruction CODE.DO*COUNT :close  4}",
  "program": "(BOOLEAN.OR EXEC.DO*TIMES (BOOLEAN.FROMINTEGER FLOAT.SHOVE INTEGER.FLUSH )INTEGER.= CODE.DUP CODE.DO*TIMES INTEGER.MIN EXEC.SHOVE (FLOAT.YANK )INTEGER.MAX CODE.YANKDUP -0.63625226859847372 CODE.DO*COUNT )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 1 "data" : {-0.636252} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 4,
  "genome": "{:instruction FLOAT.TAN :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction CODE.SIZE :close  0}{:instruction 0.41119050639942056 :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction EXEC.FLUSH :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction EXEC.K :close  0}{:instruction -1488 :close  0}{:instruction CODE.POSITION :close  0}{:instruction FLOAT.= :close  0}{:instruction EXEC.DUP :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction CODE.NOOP :close  4}{:instruction BOOLEAN.OR :close  4}{:instruction CODE.DO :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction CODE.CAR :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction INTEGER.DUP :close  0}{:instruction EXEC.ROT :close  4}{:instruction EXEC.DO*TIMES :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction FLOAT.POP :close  4}{:instruction CODE.LENGTH :close  4}{:instruction CODE.ROT :close  0}{:instruction CODE.CAR :close  0}{:instruction FLOAT.SIN :close  0}{:instruction BOOLEAN.SWAP :close  0}{:instruction BOOLEAN.SWAP :close  0}",
  "program": "(FLOAT.TAN FLOAT.SHOVE CODE.SIZE 0.41119050639942056 CODE.STACKDEPTH FLOAT.YANKDUP EXEC.FLUSH BOOLEAN.STACKDEPTH BOOLEAN.OR EXEC.K (-1488 CODE.POSITION FLOAT.= EXEC.DUP (FLOAT.YANKDUP CODE.NOOP ))()BOOLEAN.OR CODE.DO EXEC.DO*RANGE (CODE.CAR INTEGER.SWAP INTEGER.DUP EXEC.ROT ()()())EXEC.DO*TIMES (INTEGER.SHOVE FLOAT.POP )CODE.LENGTH CODE.ROT CODE.CAR FLOAT.SIN BOOLEAN.SWAP BOOLEAN.SWAP )",
  "result-set": { "integer-stack": {"size": 1 "data" : {41} },
                  "float-stack": {"size": 2 "data" : {0.411191 0.411191} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 5,
  "genome": "{:instruction INTEGER.YANKDUP :close  0}{:instruction CODE.MEMBER :close  0}{:instruction BOOLEAN.NOT :close  0}{:instruction FLOAT.- :close  0}{:instruction INTEGER.FROMFLOAT :close  4}{:instruction EXEC.SHOVE :close  0}{:instruction FLOAT.POP :close  4}{:instruction FLOAT.COS :close  0}{:instruction FLOAT.DUP :close  0}{:instruction FLOAT.FROMINTEGER :close  0}{:instruction FLOAT.COS :close  4}{:instruction BOOLEAN.ROT :close  0}{:instruction BOOLEAN.POP :close  4}{:instruction CODE.SIZE :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction CODE.ATOM :close  0}",
  "program": "(INTEGER.YANKDUP CODE.MEMBER BOOLEAN.NOT FLOAT.- INTEGER.FROMFLOAT EXEC.SHOVE (FLOAT.POP )FLOAT.COS FLOAT.DUP FLOAT.FROMINTEGER FLOAT.COS BOOLEAN.ROT BOOLEAN.POP CODE.SIZE INTEGER.FROMFLOAT CODE.ATOM )",
  "result-set": { "integer-stack": {"size": 1 "data" : {18} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 6,
  "genome": "{:instruction INTEGER.YANKDUP :close  0}{:instruction FLOAT.- :close  4}{:instruction FLOAT.YANK :close  4}{:instruction BOOLEAN.SWAP :close  4}{:instruction BOOLEAN.SWAP :close  0}{:instruction BOOLEAN.= :close  0}{:instruction CODE.CONTAINER :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction EXEC.WHILE :close  0}{:instruction FLOAT./ :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction EXEC.WHEN :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction FLOAT.SIN :close  4}{:instruction INTEGER.* :close  0}{:instruction CODE.NOOP :close  4}{:instruction INTEGER.< :close  0}{:instruction EXEC.YANK :close  0}{:instruction INTEGER.* :close  4}{:instruction EXEC.POP :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction CODE.NOOP :close  0}{:instruction INTEGER.% :close  0}{:instruction CODE.SHOVE :close  4}{:instruction FLOAT.DUP :close  0}{:instruction FLOAT.* :close  0}{:instruction INTEGER.MIN :close  0}{:instruction CODE.CONTAINER :close  0}{:instruction FLOAT.DUP :close  4}{:instruction EXEC.SHOVE :close  0}{:instruction INTEGER.= :close  0}{:instruction INTEGER.MIN :close  0}{:instruction BOOLEAN.NOT :close  0}",
  "program": "(INTEGER.YANKDUP FLOAT.- FLOAT.YANK BOOLEAN.SWAP BOOLEAN.SWAP BOOLEAN.= CODE.CONTAINER CODE.DO*COUNT EXEC.WHILE (FLOAT./ INTEGER.YANKDUP EXEC.WHEN (CODE.DO*COUNT FLOAT.SIN ))INTEGER.* CODE.NOOP INTEGER.< EXEC.YANK INTEGER.* EXEC.POP (EXEC.DO*TIMES (INTEGER.YANKDUP CODE.FROMINTEGER EXEC.YANKDUP CODE.NOOP INTEGER.% CODE.SHOVE ))FLOAT.DUP FLOAT.* INTEGER.MIN CODE.CONTAINER FLOAT.DUP EXEC.SHOVE (INTEGER.= INTEGER.MIN BOOLEAN.NOT ))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 7,
  "genome": "{:instruction CODE.INSTRUCTIONS :close  0}{:instruction CODE.IF :close  0}{:instruction FLOAT.% :close  4}{:instruction FLOAT.TAN :close  4}{:instruction BOOLEAN.YANKDUP :close  0}{:instruction INTEGER.FROMBOOLEAN :close  0}",
  "program": "(CODE.INSTRUCTIONS CODE.IF FLOAT.% FLOAT.TAN BOOLEAN.YANKDUP INTEGER.FROMBOOLEAN )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 8,
  "genome": "{:instruction CODE.STACKDEPTH :close  0}{:instruction EXEC.DUP :close  0}{:instruction CODE.EXTRACT :close  4}{:instruction FLOAT./ :close  0}{:instruction EXEC.SWAP :close  0}{:instruction TRUE :close  0}{:instruction CODE.NTH :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction INTEGER.% :close  4}{:instruction CODE.LENGTH :close  0}{:instruction CODE.CDR :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction INTEGER.< :close  0}{:instruction CODE.DO :close  0}{:instruction CODE.POSITION :close  0}{:instruction EXEC.= :close  4}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction FLOAT.COS :close  4}{:instruction FLOAT.- :close  0}{:instruction INTEGER.DUP :close  0}{:instruction CODE.LENGTH :close  0}{:instruction CODE.YANK :close  0}{:instruction EXEC.= :close  0}{:instruction EXEC.ROT :close  0}{:instruction CODE.YANK :close  0}{:instruction FLOAT.ROT :close  4}{:instruction CODE.ATOM :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction CODE.NULL :close  0}{:instruction INTEGER.ROT :close  0}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction EXEC.ROT :close  0}{:instruction FLOAT.DUP :close  4}{:instruction FLOAT.= :close  0}{:instruction EXEC.WHILE :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction FLOAT.FROMDATA :close  0}{:instruction CODE.CDR :close  0}{:instruction CODE.CONTAINER :close  4}{:instruction FLOAT.ROT :close  0}{:instruction INTEGER.FLUSH :close  0}{:instruction FLOAT.+ :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction INTEGER.MIN :close  0}{:instruction EXEC.DO*RANGE :close  0}",
  "program": "(CODE.STACKDEPTH EXEC.DUP (CODE.EXTRACT )FLOAT./ EXEC.SWAP (TRUE CODE.NTH CODE.STACKDEPTH INTEGER.% )()CODE.LENGTH CODE.CDR BOOLEAN.FLUSH INTEGER.< CODE.DO CODE.POSITION EXEC.= FLOAT.FROMBOOLEAN FLOAT.COS FLOAT.- INTEGER.DUP CODE.LENGTH CODE.YANK EXEC.= EXEC.ROT (CODE.YANK FLOAT.ROT )()()CODE.ATOM CODE.NTHCDR CODE.NULL INTEGER.ROT FLOAT.FROMBOOLEAN EXEC.ROT (FLOAT.DUP )()()FLOAT.= EXEC.WHILE (CODE.DO*TIMES FLOAT.FROMDATA CODE.CDR CODE.CONTAINER )FLOAT.ROT INTEGER.FLUSH FLOAT.+ INTEGER.SWAP INTEGER.YANKDUP INTEGER.MIN EXEC.DO*RANGE ())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 9,
  "genome": "{:instruction INTEGER.STACKDEPTH :close  4}{:instruction EXEC.YANKDUP :close  0}{:instruction FLOAT.* :close  0}{:instruction FALSE :close  0}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction FLOAT.POP :close  0}{:instruction CODE.CAR :close  0}",
  "program": "(INTEGER.STACKDEPTH EXEC.YANKDUP FLOAT.* FALSE CODE.INSTRUCTIONS INTEGER.SWAP FLOAT.POP CODE.CAR )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 10,
  "genome": "{:instruction FLOAT.COS :close  4}{:instruction EXEC.ROT :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction CODE.FROMFLOAT :close  0}{:instruction CODE.ROT :close  4}{:instruction CODE.DO* :close  0}{:instruction BOOLEAN.POP :close  0}{:instruction CODE.CAR :close  4}{:instruction EXEC.YANKDUP :close  4}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction CODE.LIST :close  0}{:instruction CODE.LENGTH :close  0}{:instruction FLOAT.% :close  0}{:instruction 0.66748381724289718 :close  0}{:instruction CODE.CONS :close  0}{:instruction FLOAT.DUP :close  4}{:instruction CODE.YANKDUP :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction INTEGER./ :close  0}{:instruction EXEC.DO*TIMES :close  4}{:instruction CODE.CAR :close  0}{:instruction BOOLEAN.POP :close  0}{:instruction CODE.CONS :close  4}{:instruction 0.55399452837975560 :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction CODE.CONTAINER :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction INTEGER.MAX :close  0}",
  "program": "(FLOAT.COS EXEC.ROT (BOOLEAN.YANK CODE.FROMFLOAT CODE.ROT )()()CODE.DO* BOOLEAN.POP CODE.CAR EXEC.YANKDUP FLOAT.FROMBOOLEAN CODE.LIST CODE.LENGTH FLOAT.% 0.66748381724289718 CODE.CONS FLOAT.DUP CODE.YANKDUP CODE.NTHCDR EXEC.DO*RANGE (INTEGER./ EXEC.DO*TIMES ())CODE.CAR BOOLEAN.POP CODE.CONS 0.55399452837975560 INTEGER.STACKDEPTH FLOAT.FROMBOOLEAN BOOLEAN.OR CODE.CONTAINER BOOLEAN.STACKDEPTH INTEGER.MAX )",
  "result-set": { "integer-stack": {"size": 1 "data" : {0} },
                  "float-stack": {"size": 5 "data" : {0.553995 0.667484 0.667484 0.113489 0.667484} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 11,
  "genome": "{:instruction EXEC.YANKDUP :close  4}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction FLOAT.* :close  0}{:instruction INTEGER.< :close  0}{:instruction INTEGER.+ :close  0}{:instruction CODE.DO*RANGE :close  0}{:instruction FLOAT.YANK :close  4}{:instruction EXEC.DO*RANGE :close  0}{:instruction CODE.LIST :close  4}{:instruction CODE.DO* :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction FLOAT.> :close  4}{:instruction INTEGER.< :close  4}{:instruction EXEC.K :close  4}{:instruction CODE.CONTAINER :close  0}{:instruction FLOAT.TAN :close  0}{:instruction CODE.DO*RANGE :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction INTEGER.= :close  0}{:instruction CODE.NULL :close  0}{:instruction FLOAT.+ :close  0}{:instruction CODE.ROT :close  0}{:instruction INTEGER.MAX :close  0}{:instruction BOOLEAN.POP :close  4}{:instruction CODE.POSITION :close  0}{:instruction BOOLEAN.NOR :close  4}{:instruction INTEGER.YANK :close  0}{:instruction CODE.LIST :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction INTEGER.MAX :close  0}{:instruction INTEGER.POP :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction FLOAT.+ :close  0}{:instruction FLOAT.* :close  0}{:instruction FLOAT.TAN :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction EXEC.DO*COUNT :close  4}{:instruction BOOLEAN.SWAP :close  0}",
  "program": "(EXEC.YANKDUP CODE.INSTRUCTIONS INTEGER.STACKDEPTH FLOAT.* INTEGER.< INTEGER.+ CODE.DO*RANGE FLOAT.YANK EXEC.DO*RANGE (CODE.LIST )CODE.DO* BOOLEAN.AND FLOAT.> INTEGER.< EXEC.K ()()CODE.CONTAINER FLOAT.TAN CODE.DO*RANGE CODE.DO*TIMES INTEGER.= CODE.NULL FLOAT.+ CODE.ROT INTEGER.MAX BOOLEAN.POP CODE.POSITION BOOLEAN.NOR INTEGER.YANK CODE.LIST BOOLEAN.NOR INTEGER.MAX INTEGER.POP FLOAT.SHOVE FLOAT.+ FLOAT.* FLOAT.TAN BOOLEAN.FROMINTEGER EXEC.DO*COUNT ()BOOLEAN.SWAP )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
Skipped
{ "id": 12,
  "genome": "",
  "program": "()",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 13,
  "genome": "",
  "program": "()",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 14,
  "genome": "{:instruction FLOAT.SHOVE :close  0}{:instruction FLOAT.+ :close  0}{:instruction CODE.LENGTH :close  0}{:instruction EXEC.K :close  0}{:instruction CODE.QUOTE :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction FLOAT.COS :close  0}{:instruction EXEC.STACKDEPTH :close  0}{:instruction INTEGER.= :close  0}{:instruction CODE.= :close  4}{:instruction FLOAT.FLUSH :close  0}{:instruction CODE.LENGTH :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction INTEGER.% :close  0}{:instruction CODE.CAR :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction INTEGER.DUP :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction FLOAT.> :close  4}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction FLOAT.YANKDUP :close  4}{:instruction BOOLEAN.DUP :close  4}{:instruction INTEGER.YANK :close  0}{:instruction EXEC.S :close  0}{:instruction CODE.NOOP :close  0}{:instruction EXEC.SWAP :close  0}{:instruction BOOLEAN.POP :close  4}{:instruction CODE.NOOP :close  0}{:instruction CODE.IF :close  0}{:instruction BOOLEAN.FROMFLOAT :close  4}",
  "program": "(FLOAT.SHOVE FLOAT.+ CODE.LENGTH EXEC.K (CODE.QUOTE (EXEC.DO*RANGE (FLOAT.COS EXEC.STACKDEPTH INTEGER.= CODE.= )))()FLOAT.FLUSH CODE.LENGTH BOOLEAN.YANK INTEGER.% CODE.CAR BOOLEAN.FLUSH BOOLEAN.FROMINTEGER INTEGER.SWAP INTEGER.DUP BOOLEAN.AND FLOAT.> CODE.FROMBOOLEAN FLOAT.YANKDUP BOOLEAN.DUP INTEGER.YANK EXEC.S (CODE.NOOP EXEC.SWAP (BOOLEAN.POP )())()(CODE.NOOP CODE.IF BOOLEAN.FROMFLOAT ))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 15,
  "genome": "{:instruction CODE.CONS :close  4}{:instruction FLOAT.DUP :close  0}",
  "program": "(CODE.CONS FLOAT.DUP )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 16,
  "genome": "{:instruction EXEC.S :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction INTEGER.* :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction CODE.IF :close  0}{:instruction INTEGER.DUP :close  0}{:instruction TRUE :close  0}{:instruction CODE.SWAP :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction EXEC.WHEN :close  0}{:instruction CODE.ROT :close  4}{:instruction INTEGER.DUP :close  0}{:instruction FLOAT.FROMINTEGER :close  4}{:instruction CODE.DO*COUNT :close  0}{:instruction CODE.LENGTH :close  0}{:instruction CODE.YANKDUP :close  0}{:instruction CODE.LIST :close  0}{:instruction INTEGER.YANKDUP :close  4}{:instruction BOOLEAN.YANKDUP :close  0}{:instruction BOOLEAN.ROT :close  4}{:instruction CODE.DUP :close  4}{:instruction CODE.IF :close  0}{:instruction CODE.CONTAINER :close  0}{:instruction INTEGER.% :close  4}{:instruction FLOAT.YANKDUP :close  0}{:instruction INTEGER.+ :close  0}{:instruction CODE.MEMBER :close  0}{:instruction INTEGER.> :close  0}{:instruction EXEC.SWAP :close  0}{:instruction FLOAT.% :close  0}{:instruction CODE.CDR :close  0}",
  "program": "(EXEC.S (EXEC.DO*WHILE (CODE.NTHCDR INTEGER.* EXEC.YANKDUP CODE.IF INTEGER.DUP TRUE CODE.SWAP CODE.FROMINTEGER EXEC.WHEN (CODE.ROT )))()(INTEGER.DUP FLOAT.FROMINTEGER )CODE.DO*COUNT CODE.LENGTH CODE.YANKDUP CODE.LIST INTEGER.YANKDUP BOOLEAN.YANKDUP BOOLEAN.ROT CODE.DUP CODE.IF CODE.CONTAINER INTEGER.% FLOAT.YANKDUP INTEGER.+ CODE.MEMBER INTEGER.> EXEC.SWAP (FLOAT.% CODE.CDR )())",
  "result-set": { "integer-stack": {"size": 1 "data" : {22} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 17,
  "genome": "{:instruction EXEC.DO*TIMES :close  4}{:instruction 0.24745759257289057 :close  0}{:instruction EXEC.STACKDEPTH :close  0}{:instruction CODE.NULL :close  0}{:instruction INTEGER.DUP :close  0}",
  "program": "(EXEC.DO*TIMES ()0.24745759257289057 EXEC.STACKDEPTH CODE.NULL INTEGER.DUP )",
  "result-set": { "integer-stack": {"size": 2 "data" : {2 2} },
                  "float-stack": {"size": 1 "data" : {0.247458} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 18,
  "genome": "{:instruction FLOAT.< :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction CODE.ROT :close  0}{:instruction INTEGER.< :close  4}{:instruction INTEGER.= :close  0}{:instruction INTEGER.MIN :close  0}{:instruction INTEGER.YANK :close  0}{:instruction FLOAT.> :close  0}{:instruction BOOLEAN.NAND :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction FLOAT.SIN :close  0}{:instruction FLOAT.% :close  0}{:instruction FLOAT.= :close  0}{:instruction CODE.CAR :close  0}{:instruction INTEGER.ROT :close  0}{:instruction EXEC.WHILE :close  0}{:instruction INTEGER.< :close  4}{:instruction INTEGER.> :close  4}{:instruction FLOAT.YANK :close  0}{:instruction INTEGER.POP :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction EXEC.WHEN :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction EXEC.DO*TIMES :close  4}{:instruction CODE.NTHCDR :close  0}{:instruction EXEC.K :close  4}{:instruction CODE.DO*COUNT :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction INTEGER.* :close  0}{:instruction FLOAT.ROT :close  0}{:instruction CODE.DO*COUNT :close  4}{:instruction CODE.FROMBOOLEAN :close  4}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction CODE.LIST :close  0}{:instruction INTEGER.MIN :close  0}{:instruction FLOAT.YANKDUP :close  4}{:instruction FLOAT.DUP :close  0}{:instruction FLOAT.COS :close  0}{:instruction CODE.YANKDUP :close  0}{:instruction INTEGER.+ :close  0}{:instruction BOOLEAN.DUP :close  0}{:instruction BOOLEAN.FROMFLOAT :close  4}{:instruction CODE.DO :close  4}{:instruction INTEGER.YANK :close  0}{:instruction CODE.FROMBOOLEAN :close  0}",
  "program": "(FLOAT.< CODE.STACKDEPTH FLOAT.SWAP CODE.ROT INTEGER.< INTEGER.= INTEGER.MIN INTEGER.YANK FLOAT.> BOOLEAN.NAND BOOLEAN.STACKDEPTH FLOAT.SIN FLOAT.% FLOAT.= CODE.CAR INTEGER.ROT EXEC.WHILE (INTEGER.< )INTEGER.> FLOAT.YANK INTEGER.POP BOOLEAN.AND EXEC.WHEN (INTEGER.SHOVE EXEC.DO*TIMES ())CODE.NTHCDR EXEC.K ()()CODE.DO*COUNT EXEC.DO*WHILE (INTEGER.* FLOAT.ROT CODE.DO*COUNT )CODE.FROMBOOLEAN INTEGER.STACKDEPTH CODE.LIST INTEGER.MIN FLOAT.YANKDUP FLOAT.DUP FLOAT.COS CODE.YANKDUP INTEGER.+ BOOLEAN.DUP BOOLEAN.FROMFLOAT CODE.DO INTEGER.YANK CODE.FROMBOOLEAN )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 19,
  "genome": "{:instruction FLOAT.- :close  0}{:instruction BOOLEAN.AND :close  4}{:instruction CODE.CONS :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction -2465 :close  0}{:instruction EXEC.ROT :close  0}{:instruction CODE.FROMFLOAT :close  0}{:instruction FLOAT.DUP :close  0}{:instruction CODE.FLUSH :close  0}{:instruction -293 :close  0}{:instruction EXEC.IF :close  0}{:instruction CODE.INSTRUCTIONS :close  4}{:instruction FLOAT.- :close  4}{:instruction EXEC.= :close  0}",
  "program": "(FLOAT.- BOOLEAN.AND CODE.CONS INTEGER.SWAP -2465 EXEC.ROT (CODE.FROMFLOAT FLOAT.DUP CODE.FLUSH -293 EXEC.IF (CODE.INSTRUCTIONS )())()(FLOAT.- )EXEC.= )",
  "result-set": { "integer-stack": {"size": 2 "data" : {-293 -2465} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 20,
  "genome": "{:instruction FLOAT.SWAP :close  0}{:instruction CODE.DO* :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction -3270 :close  0}{:instruction FLOAT.* :close  0}{:instruction CODE.NULL :close  4}{:instruction INTEGER.YANKDUP :close  0}{:instruction CODE.POP :close  4}{:instruction CODE.INSERT :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction FLOAT.+ :close  0}{:instruction FLOAT.FROMDATA :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction CODE.ROT :close  0}{:instruction FLOAT.- :close  0}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction FLOAT.> :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction CODE.CAR :close  0}{:instruction CODE.NULL :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction CODE.IF :close  0}{:instruction FLOAT.= :close  0}{:instruction FLOAT.POP :close  0}{:instruction BOOLEAN.NAND :close  0}{:instruction EXEC.YANK :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction CODE.LENGTH :close  0}{:instruction FLOAT.TAN :close  0}{:instruction INTEGER./ :close  0}{:instruction CODE.YANK :close  4}{:instruction INTEGER.< :close  0}{:instruction 2730 :close  0}{:instruction EXEC.= :close  4}{:instruction CODE.EXTRACT :close  4}{:instruction FLOAT.MAX :close  0}{:instruction CODE.CDR :close  0}{:instruction FLOAT.> :close  4}{:instruction CODE.CONTAINER :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction CODE.LENGTH :close  4}{:instruction CODE.APPEND :close  4}",
  "program": "(FLOAT.SWAP CODE.DO* EXEC.DO*WHILE (BOOLEAN.YANK BOOLEAN.FLUSH -3270 FLOAT.* CODE.NULL )INTEGER.YANKDUP CODE.POP CODE.INSERT EXEC.DO*RANGE (FLOAT.+ FLOAT.FROMDATA CODE.STACKDEPTH CODE.ROT FLOAT.- FLOAT.FROMBOOLEAN CODE.STACKDEPTH FLOAT.> EXEC.DO*WHILE (CODE.CAR CODE.NULL EXEC.YANKDUP CODE.IF FLOAT.= FLOAT.POP BOOLEAN.NAND EXEC.YANK FLOAT.SHOVE CODE.LENGTH FLOAT.TAN INTEGER./ CODE.YANK ))INTEGER.< 2730 EXEC.= CODE.EXTRACT FLOAT.MAX CODE.CDR FLOAT.> CODE.CONTAINER CODE.STACKDEPTH CODE.LENGTH CODE.APPEND )",
  "result-set": { "integer-stack": {"size": 2 "data" : {0 2730} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 21,
  "genome": "{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction INTEGER.FLUSH :close  0}{:instruction INTEGER./ :close  0}{:instruction CODE.CONS :close  0}{:instruction INTEGER.- :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction CODE.ATOM :close  0}{:instruction CODE.FLUSH :close  0}{:instruction CODE.EXTRACT :close  0}{:instruction CODE.DO* :close  0}{:instruction INTEGER.% :close  4}{:instruction CODE.YANKDUP :close  0}{:instruction EXEC.YANK :close  0}{:instruction CODE.SHOVE :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction CODE.APPEND :close  0}{:instruction FLOAT.MIN :close  0}{:instruction INTEGER.> :close  4}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction CODE.CONS :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction FLOAT.FROMDATA :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction CODE.YANK :close  4}{:instruction EXEC.WHEN :close  4}{:instruction BOOLEAN.NAND :close  0}{:instruction INTEGER.= :close  0}{:instruction INTEGER.< :close  4}{:instruction FLOAT.> :close  0}{:instruction CODE.DO*TIMES :close  4}{:instruction CODE.DO*COUNT :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction BOOLEAN.NOR :close  4}{:instruction EXEC.SWAP :close  0}{:instruction EXEC.POP :close  4}{:instruction CODE.NOOP :close  4}{:instruction BOOLEAN.NAND :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction INTEGER.ROT :close  0}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction INTEGER.SWAP :close  4}",
  "program": "(BOOLEAN.FROMINTEGER INTEGER.FLUSH INTEGER./ CODE.CONS INTEGER.- EXEC.DO*COUNT (CODE.ATOM CODE.FLUSH CODE.EXTRACT CODE.DO* INTEGER.% )CODE.YANKDUP EXEC.YANK CODE.SHOVE EXEC.DO*WHILE (CODE.APPEND FLOAT.MIN INTEGER.> )FLOAT.STACKDEPTH CODE.CONS BOOLEAN.AND FLOAT.FROMDATA EXEC.YANKDUP CODE.YANK EXEC.WHEN ()BOOLEAN.NAND INTEGER.= INTEGER.< FLOAT.> CODE.DO*TIMES CODE.DO*COUNT FLOAT.SWAP BOOLEAN.NOR EXEC.SWAP (EXEC.POP ())()CODE.NOOP BOOLEAN.NAND BOOLEAN.OR EXEC.SHOVE (INTEGER.ROT FLOAT.FROMBOOLEAN BOOLEAN.NOR INTEGER.SWAP ))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 22,
  "genome": "{:instruction FLOAT.< :close  0}{:instruction CODE.IF :close  0}{:instruction FLOAT.SIN :close  0}{:instruction FLOAT.ROT :close  0}{:instruction BOOLEAN.ROT :close  4}{:instruction FLOAT.POP :close  0}{:instruction EXEC.YANK :close  4}{:instruction CODE.DO*COUNT :close  0}{:instruction INTEGER.+ :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction FLOAT.- :close  0}{:instruction BOOLEAN.SHOVE :close  0}{:instruction BOOLEAN.YANKDUP :close  0}{:instruction INTEGER.> :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction CODE.YANK :close  4}{:instruction CODE.CONTAINER :close  4}{:instruction EXEC.WHEN :close  0}{:instruction BOOLEAN.= :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction INTEGER.< :close  0}{:instruction FLOAT.SIN :close  0}{:instruction FLOAT.% :close  0}{:instruction FLOAT.ROT :close  0}{:instruction FLOAT./ :close  0}{:instruction CODE.NTH :close  4}{:instruction CODE.CAR :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction EXEC.DO*RANGE :close  4}{:instruction BOOLEAN.YANK :close  0}{:instruction EXEC.IF :close  0}{:instruction FLOAT.= :close  0}{:instruction CODE.FROMFLOAT :close  0}{:instruction BOOLEAN.DUP :close  0}{:instruction INTEGER.ROT :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction INTEGER.% :close  0}{:instruction INTEGER.FROMFLOAT :close  4}{:instruction FLOAT.* :close  4}{:instruction BOOLEAN.DUP :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction EXEC.ROT :close  4}{:instruction BOOLEAN.OR :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction BOOLEAN.POP :close  4}{:instruction CODE.NTH :close  0}",
  "program": "(FLOAT.< CODE.IF FLOAT.SIN FLOAT.ROT BOOLEAN.ROT FLOAT.POP EXEC.YANK CODE.DO*COUNT INTEGER.+ BOOLEAN.YANK FLOAT.- BOOLEAN.SHOVE BOOLEAN.YANKDUP INTEGER.> BOOLEAN.FROMINTEGER CODE.YANK CODE.CONTAINER EXEC.WHEN (BOOLEAN.= EXEC.DO*TIMES (INTEGER.< FLOAT.SIN FLOAT.% FLOAT.ROT FLOAT./ CODE.NTH ))CODE.CAR BOOLEAN.YANK CODE.DO*COUNT CODE.FROMBOOLEAN EXEC.DO*RANGE ()BOOLEAN.YANK EXEC.IF (FLOAT.= CODE.FROMFLOAT BOOLEAN.DUP INTEGER.ROT FLOAT.YANKDUP INTEGER.% INTEGER.FROMFLOAT )()FLOAT.* BOOLEAN.DUP INTEGER.FROMFLOAT EXEC.ROT ()()()BOOLEAN.OR CODE.NTHCDR BOOLEAN.POP CODE.NTH )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 23,
  "genome": "{:instruction FLOAT.< :close  0}{:instruction BOOLEAN.= :close  4}{:instruction INTEGER.MAX :close  4}{:instruction EXEC.WHILE :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction CODE.MEMBER :close  4}{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction CODE.DO* :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction FLOAT./ :close  0}{:instruction INTEGER.+ :close  0}{:instruction CODE.POP :close  4}{:instruction BOOLEAN.YANK :close  0}{:instruction FLOAT.< :close  0}{:instruction FLOAT.YANKDUP :close  4}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction FLOAT.* :close  0}{:instruction BOOLEAN.YANKDUP :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction FLOAT.< :close  0}{:instruction INTEGER.YANKDUP :close  4}{:instruction FLOAT.FROMINTEGER :close  4}{:instruction CODE.POSITION :close  4}{:instruction EXEC.DO*COUNT :close  4}{:instruction FLOAT.+ :close  4}{:instruction BOOLEAN.NOR :close  4}{:instruction INTEGER.MIN :close  0}{:instruction 1644 :close  0}{:instruction INTEGER.% :close  0}{:instruction CODE.DO* :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction INTEGER./ :close  0}{:instruction INTEGER.ROT :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction EXEC.K :close  0}{:instruction EXEC.IF :close  0}{:instruction FLOAT.ROT :close  0}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction FLOAT.+ :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction CODE.SHOVE :close  0}{:instruction INTEGER.MIN :close  0}",
  "program": "(FLOAT.< BOOLEAN.= INTEGER.MAX EXEC.WHILE (BOOLEAN.AND EXEC.DO*COUNT (CODE.MEMBER ))INTEGER.FROMBOOLEAN CODE.DO* BOOLEAN.FROMINTEGER FLOAT./ INTEGER.+ CODE.POP BOOLEAN.YANK FLOAT.< FLOAT.YANKDUP FLOAT.FROMBOOLEAN FLOAT.* BOOLEAN.YANKDUP INTEGER.SWAP CODE.STACKDEPTH INTEGER.STACKDEPTH FLOAT.STACKDEPTH CODE.DO*TIMES FLOAT.< INTEGER.YANKDUP FLOAT.FROMINTEGER CODE.POSITION EXEC.DO*COUNT ()FLOAT.+ BOOLEAN.NOR INTEGER.MIN 1644 INTEGER.% CODE.DO* BOOLEAN.ROT INTEGER./ INTEGER.ROT INTEGER.YANKDUP FLOAT.YANKDUP EXEC.K (EXEC.IF (FLOAT.ROT FLOAT.STACKDEPTH FLOAT.STACKDEPTH FLOAT.+ CODE.DO*TIMES CODE.SHOVE INTEGER.MIN )())())",
  "result-set": { "integer-stack": {"size": 1 "data" : {2} },
                  "float-stack": {"size": 1 "data" : {4} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 24,
  "genome": "{:instruction EXEC.S :close  0}{:instruction EXEC.DO*RANGE :close  0}",
  "program": "(EXEC.S (EXEC.DO*RANGE ())()())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 25,
  "genome": "{:instruction EXEC.WHEN :close  4}{:instruction EXEC.YANK :close  0}{:instruction INTEGER.FLUSH :close  4}{:instruction CODE.EXTRACT :close  0}{:instruction CODE.ROT :close  0}{:instruction CODE.SWAP :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction INTEGER.YANK :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction INTEGER.= :close  0}{:instruction FLOAT.STACKDEPTH :close  0}",
  "program": "(EXEC.WHEN ()EXEC.YANK INTEGER.FLUSH CODE.EXTRACT CODE.ROT CODE.SWAP BOOLEAN.FROMFLOAT INTEGER.YANK CODE.FROMINTEGER INTEGER.SHOVE INTEGER.= FLOAT.STACKDEPTH )",
  "result-set": { "integer-stack": {"size": 1 "data" : {0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 26,
  "genome": "{:instruction BOOLEAN.YANKDUP :close  0}{:instruction INTEGER.> :close  0}{:instruction CODE.YANKDUP :close  0}{:instruction INTEGER.FROMFLOAT :close  4}{:instruction FLOAT.+ :close  0}{:instruction CODE.QUOTE :close  0}{:instruction INTEGER.YANK :close  4}{:instruction CODE.YANKDUP :close  0}{:instruction BOOLEAN.AND :close  0}",
  "program": "(BOOLEAN.YANKDUP INTEGER.> CODE.YANKDUP INTEGER.FROMFLOAT FLOAT.+ CODE.QUOTE (INTEGER.YANK )CODE.YANKDUP BOOLEAN.AND )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 27,
  "genome": "{:instruction CODE.NULL :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction CODE.DUP :close  0}{:instruction CODE.CDR :close  4}{:instruction BOOLEAN.ROT :close  0}{:instruction FLOAT.- :close  0}{:instruction BOOLEAN.SHOVE :close  4}{:instruction FLOAT.SIN :close  0}{:instruction INTEGER.YANKDUP :close  4}{:instruction INTEGER.YANKDUP :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction CODE.DO*RANGE :close  4}{:instruction BOOLEAN.OR :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction CODE.SHOVE :close  0}{:instruction FLOAT.< :close  0}{:instruction CODE.SHOVE :close  0}{:instruction CODE.CDR :close  4}{:instruction EXEC.DO*WHILE :close  4}{:instruction CODE.DO* :close  0}{:instruction BOOLEAN.POP :close  4}{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction FLOAT.FLUSH :close  0}{:instruction INTEGER.< :close  4}{:instruction FLOAT.= :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction FLOAT.FROMDATA :close  0}{:instruction EXEC.WHEN :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction EXEC.YANKDUP :close  4}{:instruction BOOLEAN.AND :close  4}{:instruction EXEC.WHILE :close  0}{:instruction TRUE :close  0}{:instruction BOOLEAN.SWAP :close  4}{:instruction CODE.POP :close  0}{:instruction EXEC.DUP :close  0}{:instruction INTEGER.DUP :close  0}{:instruction EXEC.FLUSH :close  0}{:instruction FLOAT.YANK :close  0}",
  "program": "(CODE.NULL CODE.DO*TIMES BOOLEAN.FLUSH CODE.DUP CODE.CDR BOOLEAN.ROT FLOAT.- BOOLEAN.SHOVE FLOAT.SIN INTEGER.YANKDUP INTEGER.YANKDUP EXEC.DO*RANGE (CODE.DO*RANGE )BOOLEAN.OR EXEC.DO*TIMES (CODE.SHOVE FLOAT.< CODE.SHOVE CODE.CDR )EXEC.DO*WHILE ()CODE.DO* BOOLEAN.POP INTEGER.FROMBOOLEAN FLOAT.FLUSH INTEGER.< FLOAT.= INTEGER.SHOVE FLOAT.FROMDATA EXEC.WHEN (CODE.FROMBOOLEAN EXEC.YANKDUP )BOOLEAN.AND EXEC.WHILE (TRUE BOOLEAN.SWAP )CODE.POP EXEC.DUP (INTEGER.DUP EXEC.FLUSH FLOAT.YANK ))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {1} } }
}
{ "id": 28,
  "genome": "{:instruction CODE.MEMBER :close  0}{:instruction INTEGER.< :close  0}{:instruction INTEGER.< :close  0}{:instruction CODE.LENGTH :close  0}{:instruction FLOAT.* :close  0}{:instruction EXEC.IF :close  0}{:instruction BOOLEAN.YANKDUP :close  4}{:instruction CODE.FROMFLOAT :close  4}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction FLOAT.SWAP :close  4}{:instruction FLOAT.> :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction FLOAT.ROT :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction FLOAT./ :close  0}{:instruction CODE.DO :close  0}{:instruction CODE.FROMINTEGER :close  4}{:instruction FLOAT.FROMDATA :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction CODE.DUP :close  4}{:instruction BOOLEAN.STACKDEPTH :close  4}{:instruction CODE.CONTAINER :close  0}{:instruction FLOAT.YANK :close  0}{:instruction EXEC.DO*TIMES :close  4}{:instruction CODE.YANK :close  4}{:instruction FLOAT.% :close  4}{:instruction INTEGER.MAX :close  0}{:instruction BOOLEAN.= :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction EXEC.DUP :close  4}{:instruction BOOLEAN.AND :close  4}{:instruction CODE.DO :close  0}{:instruction CODE.LENGTH :close  0}{:instruction CODE.DO* :close  0}{:instruction INTEGER.< :close  4}{:instruction EXEC.IF :close  0}{:instruction EXEC.POP :close  0}{:instruction CODE.QUOTE :close  0}{:instruction BOOLEAN.DUP :close  0}{:instruction CODE.NTHCDR :close  0}",
  "program": "(CODE.MEMBER INTEGER.< INTEGER.< CODE.LENGTH FLOAT.* EXEC.IF (BOOLEAN.YANKDUP )()CODE.FROMFLOAT INTEGER.FROMFLOAT FLOAT.SWAP FLOAT.> EXEC.DO*WHILE (FLOAT.ROT CODE.FROMINTEGER FLOAT./ CODE.DO CODE.FROMINTEGER )FLOAT.FROMDATA EXEC.DO*WHILE (INTEGER.SWAP CODE.DUP )BOOLEAN.STACKDEPTH CODE.CONTAINER FLOAT.YANK EXEC.DO*TIMES ()CODE.YANK FLOAT.% INTEGER.MAX BOOLEAN.= EXEC.SHOVE (EXEC.DUP ())BOOLEAN.AND CODE.DO CODE.LENGTH CODE.DO* INTEGER.< EXEC.IF (EXEC.POP (CODE.QUOTE (BOOLEAN.DUP CODE.NTHCDR )))())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 29,
  "genome": "{:instruction INTEGER.FROMFLOAT :close  0}{:instruction INTEGER.+ :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction CODE.SIZE :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction EXEC.S :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction CODE.CDR :close  0}{:instruction EXEC.DO*WHILE :close  4}{:instruction CODE.DO*RANGE :close  0}{:instruction INTEGER./ :close  0}{:instruction BOOLEAN.DUP :close  4}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction EXEC.S :close  0}{:instruction EXEC.ROT :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction FLOAT.SWAP :close  4}{:instruction CODE.ROT :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction EXEC.FLUSH :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction FLOAT.DUP :close  0}{:instruction BOOLEAN.DUP :close  4}{:instruction CODE.CONTAINER :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction BOOLEAN.DUP :close  0}{:instruction CODE.MEMBER :close  0}",
  "program": "(INTEGER.FROMFLOAT INTEGER.+ BOOLEAN.STACKDEPTH CODE.SIZE BOOLEAN.ROT EXEC.S (CODE.STACKDEPTH CODE.CDR EXEC.DO*WHILE ())()()CODE.DO*RANGE INTEGER./ BOOLEAN.DUP FLOAT.FROMBOOLEAN BOOLEAN.FLUSH EXEC.S (EXEC.ROT (BOOLEAN.OR CODE.NTHCDR FLOAT.SWAP )()())(CODE.ROT BOOLEAN.ROT EXEC.FLUSH BOOLEAN.FROMINTEGER FLOAT.DUP BOOLEAN.DUP )()CODE.CONTAINER CODE.DO*COUNT INTEGER.SWAP BOOLEAN.DUP CODE.MEMBER )",
  "result-set": { "integer-stack": {"size": 3 "data" : {0 41 0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 30,
  "genome": "{:instruction FLOAT.% :close  0}{:instruction FLOAT.= :close  0}",
  "program": "(FLOAT.% FLOAT.= )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 31,
  "genome": "{:instruction FLOAT.POP :close  4}{:instruction TRUE :close  4}{:instruction FLOAT.% :close  4}{:instruction CODE.DO* :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction EXEC.YANK :close  0}{:instruction INTEGER.% :close  4}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction EXEC.SHOVE :close  4}{:instruction FLOAT.* :close  0}{:instruction FLOAT.MIN :close  0}{:instruction CODE.MEMBER :close  4}{:instruction FLOAT./ :close  0}{:instruction FLOAT.ROT :close  0}{:instruction CODE.CAR :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction FLOAT.STACKDEPTH :close  4}{:instruction INTEGER.SHOVE :close  0}{:instruction BOOLEAN.NAND :close  0}{:instruction INTEGER.- :close  4}{:instruction INTEGER.YANKDUP :close  0}{:instruction FLOAT.- :close  4}{:instruction FLOAT.SHOVE :close  4}{:instruction FLOAT.MIN :close  4}",
  "program": "(FLOAT.POP TRUE FLOAT.% CODE.DO* EXEC.DO*RANGE (EXEC.YANK INTEGER.% )INTEGER.STACKDEPTH EXEC.SHOVE ()FLOAT.* FLOAT.MIN CODE.MEMBER FLOAT./ FLOAT.ROT CODE.CAR EXEC.DO*WHILE (FLOAT.STACKDEPTH )INTEGER.SHOVE BOOLEAN.NAND INTEGER.- INTEGER.YANKDUP FLOAT.- FLOAT.SHOVE FLOAT.MIN )",
  "result-set": { "integer-stack": {"size": 1 "data" : {0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 32,
  "genome": "{:instruction INTEGER.= :close  0}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction EXEC.SWAP :close  0}{:instruction CODE.APPEND :close  0}{:instruction EXEC.WHILE :close  0}{:instruction FLOAT.FROMDATA :close  0}{:instruction BOOLEAN.OR :close  4}{:instruction CODE.QUOTE :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction INTEGER./ :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction BOOLEAN.SWAP :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction INTEGER.YANKDUP :close  4}{:instruction EXEC.DO*COUNT :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction CODE.SWAP :close  4}{:instruction CODE.DO*RANGE :close  0}{:instruction BOOLEAN.= :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction INTEGER.= :close  0}{:instruction CODE.APPEND :close  0}{:instruction FLOAT.MAX :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction CODE.APPEND :close  0}{:instruction BOOLEAN.POP :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction FLOAT.COS :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction EXEC.K :close  0}{:instruction FLOAT.FLUSH :close  4}{:instruction FLOAT.MIN :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction INTEGER.= :close  4}{:instruction CODE.= :close  0}{:instruction BOOLEAN.FROMINTEGER :close  4}{:instruction CODE.NOOP :close  4}{:instruction CODE.NOOP :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction CODE.STACKDEPTH :close  4}{:instruction CODE.ROT :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction EXEC.K :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}",
  "program": "(INTEGER.= CODE.INSTRUCTIONS EXEC.SWAP (CODE.APPEND EXEC.WHILE (FLOAT.FROMDATA BOOLEAN.OR ))()CODE.QUOTE (BOOLEAN.OR INTEGER./ FLOAT.SHOVE BOOLEAN.SWAP INTEGER.FROMFLOAT INTEGER.YANKDUP )EXEC.DO*COUNT (BOOLEAN.YANK CODE.SWAP )CODE.DO*RANGE BOOLEAN.= EXEC.DO*WHILE (INTEGER.= CODE.APPEND FLOAT.MAX BOOLEAN.OR CODE.APPEND BOOLEAN.POP FLOAT.YANKDUP BOOLEAN.OR FLOAT.COS EXEC.SHOVE (EXEC.K (FLOAT.FLUSH )()))FLOAT.MIN INTEGER.SWAP INTEGER.= CODE.= BOOLEAN.FROMINTEGER CODE.NOOP CODE.NOOP BOOLEAN.YANK BOOLEAN.AND CODE.STACKDEPTH CODE.ROT BOOLEAN.YANK EXEC.K (BOOLEAN.STACKDEPTH )())",
  "result-set": { "integer-stack": {"size": 2 "data" : {0 1} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 33,
  "genome": "{:instruction CODE.NTH :close  0}",
  "program": "(CODE.NTH )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 34,
  "genome": "{:instruction INTEGER.> :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction CODE.NTH :close  0}{:instruction FLOAT.= :close  0}{:instruction FLOAT./ :close  0}{:instruction FLOAT.% :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction FLOAT.* :close  4}{:instruction EXEC.WHEN :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction CODE.ATOM :close  4}{:instruction EXEC.WHILE :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction EXEC.S :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction FLOAT.ROT :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction BOOLEAN.= :close  4}{:instruction EXEC.YANK :close  4}{:instruction BOOLEAN.OR :close  4}{:instruction BOOLEAN.YANK :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction BOOLEAN.NAND :close  4}{:instruction BOOLEAN.= :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction BOOLEAN.AND :close  4}{:instruction CODE.INSERT :close  0}{:instruction INTEGER.< :close  4}{:instruction CODE.CONS :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction INTEGER.FLUSH :close  0}",
  "program": "(INTEGER.> INTEGER.SHOVE CODE.NTH FLOAT.= FLOAT./ FLOAT.% INTEGER.STACKDEPTH FLOAT.* EXEC.WHEN (BOOLEAN.STACKDEPTH CODE.ATOM )EXEC.WHILE (BOOLEAN.NOR EXEC.S (FLOAT.SHOVE FLOAT.ROT EXEC.DO*WHILE (FLOAT.YANKDUP BOOLEAN.= ))()()EXEC.YANK )BOOLEAN.OR BOOLEAN.YANK BOOLEAN.FROMINTEGER BOOLEAN.NAND BOOLEAN.= CODE.STACKDEPTH CODE.NTHCDR BOOLEAN.AND CODE.INSERT INTEGER.< CODE.CONS EXEC.DO*TIMES (INTEGER.FLUSH ))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 2 "data" : {0 0} } }
}
{ "id": 35,
  "genome": "{:instruction BOOLEAN.YANK :close  4}{:instruction EXEC.ROT :close  0}{:instruction EXEC.= :close  0}{:instruction EXEC.S :close  0}{:instruction CODE.POSITION :close  0}{:instruction CODE.CONS :close  0}{:instruction CODE.= :close  0}{:instruction FLOAT.= :close  0}{:instruction CODE.= :close  0}{:instruction CODE.FLUSH :close  0}{:instruction EXEC.YANKDUP :close  4}{:instruction CODE.NTH :close  0}{:instruction BOOLEAN.NAND :close  0}{:instruction EXEC.IF :close  0}{:instruction BOOLEAN.SHOVE :close  4}{:instruction CODE.YANKDUP :close  0}{:instruction EXEC.DUP :close  4}{:instruction FLOAT.SWAP :close  0}{:instruction CODE.POP :close  0}{:instruction TRUE :close  0}{:instruction CODE.= :close  4}{:instruction EXEC.IF :close  0}{:instruction INTEGER.> :close  0}{:instruction INTEGER.= :close  4}{:instruction CODE.CAR :close  0}{:instruction BOOLEAN.= :close  4}{:instruction EXEC.POP :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction CODE.SIZE :close  0}{:instruction INTEGER.STACKDEPTH :close  4}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction CODE.= :close  0}{:instruction FLOAT.% :close  0}{:instruction BOOLEAN.NOT :close  0}",
  "program": "(BOOLEAN.YANK EXEC.ROT (EXEC.= EXEC.S (CODE.POSITION CODE.CONS CODE.= FLOAT.= CODE.= CODE.FLUSH EXEC.YANKDUP )()())(CODE.NTH BOOLEAN.NAND EXEC.IF (BOOLEAN.SHOVE )())()CODE.YANKDUP EXEC.DUP ()FLOAT.SWAP CODE.POP TRUE CODE.= EXEC.IF (INTEGER.> INTEGER.= )()CODE.CAR BOOLEAN.= EXEC.POP (INTEGER.FROMFLOAT CODE.SIZE INTEGER.STACKDEPTH )CODE.INSTRUCTIONS BOOLEAN.FROMFLOAT INTEGER.YANKDUP CODE.= FLOAT.% BOOLEAN.NOT )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 36,
  "genome": "{:instruction CODE.POSITION :close  4}{:instruction CODE.NTHCDR :close  4}{:instruction CODE.CONTAINER :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction INTEGER.= :close  0}{:instruction FLOAT.+ :close  0}{:instruction EXEC.DO*RANGE :close  4}{:instruction FLOAT.+ :close  0}{:instruction EXEC.STACKDEPTH :close  4}{:instruction CODE.DO*RANGE :close  0}{:instruction INTEGER.POP :close  0}{:instruction CODE.CDR :close  0}{:instruction INTEGER.FLUSH :close  0}{:instruction EXEC.S :close  0}{:instruction EXEC.WHILE :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction EXEC.S :close  4}{:instruction BOOLEAN.YANKDUP :close  0}{:instruction CODE.SWAP :close  0}",
  "program": "(CODE.POSITION CODE.NTHCDR CODE.CONTAINER BOOLEAN.AND INTEGER.= FLOAT.+ EXEC.DO*RANGE ()FLOAT.+ EXEC.STACKDEPTH CODE.DO*RANGE INTEGER.POP CODE.CDR INTEGER.FLUSH EXEC.S (EXEC.WHILE (FLOAT.SWAP EXEC.S ()()())BOOLEAN.YANKDUP CODE.SWAP )()())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 37,
  "genome": "{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction CODE.YANKDUP :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction INTEGER.< :close  0}{:instruction INTEGER.YANKDUP :close  4}{:instruction CODE.DO*RANGE :close  0}{:instruction INTEGER.SWAP :close  4}{:instruction FLOAT.STACKDEPTH :close  4}{:instruction FLOAT.* :close  0}{:instruction INTEGER.STACKDEPTH :close  4}{:instruction INTEGER.- :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction INTEGER.- :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction TRUE :close  0}{:instruction EXEC.FLUSH :close  0}{:instruction FLOAT./ :close  4}{:instruction FLOAT.COS :close  4}{:instruction EXEC.K :close  0}",
  "program": "(INTEGER.FROMBOOLEAN CODE.YANKDUP BOOLEAN.AND INTEGER.< INTEGER.YANKDUP CODE.DO*RANGE INTEGER.SWAP FLOAT.STACKDEPTH FLOAT.* INTEGER.STACKDEPTH INTEGER.- CODE.STACKDEPTH INTEGER.- EXEC.DO*TIMES (TRUE EXEC.FLUSH FLOAT./ )FLOAT.COS EXEC.K ()())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 38,
  "genome": "",
  "program": "()",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 39,
  "genome": "{:instruction EXEC.DO*COUNT :close  0}{:instruction EXEC.SWAP :close  0}{:instruction BOOLEAN.YANKDUP :close  0}{:instruction EXEC.S :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction FLOAT.> :close  0}{:instruction CODE.APPEND :close  0}{:instruction EXEC.DO*RANGE :close  4}{:instruction CODE.DO :close  0}{:instruction BOOLEAN.POP :close  0}{:instruction CODE.CDR :close  0}{:instruction FLOAT.* :close  0}{:instruction CODE.SHOVE :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction EXEC.DO*WHILE :close  4}{:instruction EXEC.S :close  0}{:instruction EXEC.DO*WHILE :close  4}{:instruction INTEGER.YANK :close  4}{:instruction EXEC.YANK :close  0}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction FLOAT.DUP :close  0}{:instruction CODE.CDR :close  4}{:instruction BOOLEAN.NOR :close  0}{:instruction INTEGER.* :close  4}{:instruction CODE.INSERT :close  0}{:instruction FLOAT.SIN :close  0}{:instruction EXEC.WHEN :close  0}{:instruction FLOAT.MIN :close  0}{:instruction CODE.LENGTH :close  0}{:instruction EXEC.K :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction FLOAT.* :close  0}{:instruction FLOAT.MIN :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction EXEC.Y :close  0}{:instruction CODE.NULL :close  0}{:instruction FLOAT.- :close  0}{:instruction INTEGER.YANKDUP :close  4}",
  "program": "(EXEC.DO*COUNT (EXEC.SWAP (BOOLEAN.YANKDUP EXEC.S (EXEC.SHOVE (CODE.INSTRUCTIONS FLOAT.> CODE.APPEND EXEC.DO*RANGE ()))()(CODE.DO BOOLEAN.POP CODE.CDR FLOAT.* CODE.SHOVE FLOAT.SHOVE BOOLEAN.FROMFLOAT EXEC.DO*WHILE ()))()EXEC.S (EXEC.DO*WHILE ())()()INTEGER.YANK )EXEC.YANK CODE.INSTRUCTIONS FLOAT.DUP CODE.CDR BOOLEAN.NOR INTEGER.* CODE.INSERT FLOAT.SIN EXEC.WHEN (FLOAT.MIN CODE.LENGTH EXEC.K (INTEGER.YANKDUP BOOLEAN.FLUSH FLOAT.* FLOAT.MIN CODE.FROMINTEGER EXEC.Y (CODE.NULL FLOAT.- INTEGER.YANKDUP ))()))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
Skipped
{ "id": 40,
  "genome": "{:instruction INTEGER.FLUSH :close  4}{:instruction -0.15280450860802186 :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction FLOAT.> :close  0}{:instruction CODE.INSERT :close  0}{:instruction TRUE :close  4}{:instruction INTEGER./ :close  4}{:instruction CODE.LENGTH :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction INTEGER./ :close  0}{:instruction EXEC.IF :close  0}{:instruction EXEC.DO*RANGE :close  4}{:instruction EXEC.WHEN :close  0}{:instruction CODE.INSERT :close  0}{:instruction BOOLEAN.DUP :close  4}{:instruction EXEC.= :close  0}{:instruction CODE.ATOM :close  0}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction EXEC.DUP :close  4}{:instruction FLOAT.MAX :close  4}{:instruction FLOAT.COS :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction CODE.POP :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction CODE.IF :close  0}{:instruction EXEC.POP :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction EXEC.= :close  4}{:instruction BOOLEAN.DUP :close  4}{:instruction EXEC.WHILE :close  4}{:instruction EXEC.DO*COUNT :close  0}",
  "program": "(INTEGER.FLUSH -0.15280450860802186 EXEC.YANKDUP FLOAT.> CODE.INSERT TRUE INTEGER./ CODE.LENGTH EXEC.DO*WHILE (INTEGER./ EXEC.IF (EXEC.DO*RANGE ())())EXEC.WHEN (CODE.INSERT BOOLEAN.DUP )EXEC.= CODE.ATOM FLOAT.FROMBOOLEAN BOOLEAN.YANK BOOLEAN.FROMINTEGER EXEC.DUP ()FLOAT.MAX FLOAT.COS INTEGER.SHOVE EXEC.DO*RANGE (CODE.POP BOOLEAN.OR CODE.IF EXEC.POP (BOOLEAN.NOR INTEGER.FROMBOOLEAN EXEC.= ))BOOLEAN.DUP EXEC.WHILE ()EXEC.DO*COUNT ())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 1 "data" : {0.988348} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 41,
  "genome": "{:instruction INTEGER.SHOVE :close  0}{:instruction CODE.DO* :close  4}{:instruction EXEC.YANKDUP :close  4}{:instruction INTEGER.DUP :close  0}{:instruction FLOAT.+ :close  4}{:instruction BOOLEAN.YANK :close  4}{:instruction BOOLEAN.NOT :close  4}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction INTEGER.MAX :close  4}{:instruction CODE.APPEND :close  4}{:instruction CODE.QUOTE :close  0}",
  "program": "(INTEGER.SHOVE CODE.DO* EXEC.YANKDUP INTEGER.DUP FLOAT.+ BOOLEAN.YANK BOOLEAN.NOT CODE.FROMBOOLEAN BOOLEAN.YANK BOOLEAN.NOR INTEGER.MAX CODE.APPEND CODE.QUOTE ())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 42,
  "genome": "{:instruction CODE.= :close  0}{:instruction FLOAT.= :close  0}{:instruction -0.98813306679672863 :close  0}{:instruction FLOAT.= :close  4}{:instruction INTEGER.YANKDUP :close  0}{:instruction CODE.CDR :close  4}{:instruction EXEC.STACKDEPTH :close  0}{:instruction EXEC.= :close  0}{:instruction CODE.CAR :close  0}{:instruction CODE.DO*TIMES :close  4}{:instruction BOOLEAN.DUP :close  0}{:instruction INTEGER.YANK :close  4}{:instruction CODE.POSITION :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction CODE.DO*RANGE :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction INTEGER.MIN :close  0}{:instruction FLOAT.DUP :close  0}{:instruction INTEGER./ :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction INTEGER./ :close  0}{:instruction FLOAT.FLUSH :close  4}{:instruction CODE.STACKDEPTH :close  0}{:instruction FLOAT.MIN :close  0}{:instruction EXEC.K :close  0}{:instruction BOOLEAN.NOR :close  4}{:instruction FLOAT.COS :close  0}{:instruction CODE.NTH :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction EXEC.SHOVE :close  4}{:instruction FLOAT.TAN :close  4}{:instruction FLOAT.STACKDEPTH :close  4}{:instruction EXEC.SHOVE :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction CODE.IF :close  0}{:instruction INTEGER.YANK :close  0}{:instruction BOOLEAN.POP :close  4}{:instruction INTEGER.FROMBOOLEAN :close  4}{:instruction CODE.= :close  0}{:instruction CODE.DO :close  0}{:instruction FALSE :close  0}{:instruction FLOAT.POP :close  0}{:instruction CODE.NULL :close  4}{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction CODE.DO* :close  0}{:instruction -0.53201246623229526 :close  0}",
  "program": "(CODE.= FLOAT.= -0.98813306679672863 FLOAT.= INTEGER.YANKDUP CODE.CDR EXEC.STACKDEPTH EXEC.= CODE.CAR CODE.DO*TIMES BOOLEAN.DUP INTEGER.YANK CODE.POSITION INTEGER.YANKDUP CODE.DO*RANGE FLOAT.SWAP INTEGER.MIN FLOAT.DUP INTEGER./ EXEC.DO*COUNT (INTEGER./ FLOAT.FLUSH )CODE.STACKDEPTH FLOAT.MIN EXEC.K (BOOLEAN.NOR )()FLOAT.COS CODE.NTH EXEC.DO*TIMES (EXEC.SHOVE ())FLOAT.TAN FLOAT.STACKDEPTH EXEC.SHOVE (CODE.FROMINTEGER CODE.IF INTEGER.YANK BOOLEAN.POP )INTEGER.FROMBOOLEAN CODE.= CODE.DO FALSE FLOAT.POP CODE.NULL INTEGER.FROMBOOLEAN CODE.DO* -0.53201246623229526 )",
  "result-set": { "integer-stack": {"size": 1 "data" : {0} },
                  "float-stack": {"size": 1 "data" : {-0.532012} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 43,
  "genome": "{:instruction INTEGER.YANKDUP :close  0}{:instruction CODE.INSERT :close  0}{:instruction EXEC.IF :close  0}{:instruction CODE.IF :close  4}{:instruction EXEC.POP :close  4}{:instruction FLOAT.+ :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction FLOAT.FROMINTEGER :close  0}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction INTEGER.SHOVE :close  4}{:instruction CODE.APPEND :close  0}{:instruction FLOAT.TAN :close  0}{:instruction EXEC.IF :close  0}{:instruction CODE.QUOTE :close  0}{:instruction BOOLEAN.NOT :close  0}{:instruction CODE.FLUSH :close  0}{:instruction FLOAT.FLUSH :close  0}{:instruction FLOAT.MIN :close  0}{:instruction CODE.DO*COUNT :close  4}{:instruction CODE.FLUSH :close  4}{:instruction FLOAT.< :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction CODE.YANK :close  4}{:instruction CODE.MEMBER :close  0}{:instruction INTEGER.> :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction CODE.DO*TIMES :close  4}{:instruction EXEC.DO*WHILE :close  0}{:instruction EXEC.FLUSH :close  0}{:instruction INTEGER.DUP :close  0}{:instruction EXEC.Y :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction CODE.INSTRUCTIONS :close  4}{:instruction CODE.YANK :close  0}{:instruction INTEGER.YANKDUP :close  4}{:instruction CODE.INSERT :close  0}{:instruction BOOLEAN.SWAP :close  0}{:instruction FLOAT.POP :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction EXEC.= :close  0}{:instruction FLOAT.YANK :close  0}{:instruction FLOAT.% :close  0}{:instruction CODE.YANKDUP :close  4}{:instruction BOOLEAN.SHOVE :close  0}{:instruction EXEC.DUP :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction EXEC.Y :close  0}",
  "program": "(INTEGER.YANKDUP CODE.INSERT EXEC.IF (CODE.IF )()EXEC.POP ()FLOAT.+ FLOAT.SHOVE BOOLEAN.FROMINTEGER FLOAT.FROMINTEGER FLOAT.STACKDEPTH INTEGER.SHOVE CODE.APPEND FLOAT.TAN EXEC.IF (CODE.QUOTE (BOOLEAN.NOT CODE.FLUSH FLOAT.FLUSH FLOAT.MIN CODE.DO*COUNT ))()CODE.FLUSH FLOAT.< INTEGER.STACKDEPTH CODE.YANK CODE.MEMBER INTEGER.> BOOLEAN.NOR CODE.DO*TIMES EXEC.DO*WHILE (EXEC.FLUSH INTEGER.DUP EXEC.Y (INTEGER.STACKDEPTH CODE.INSTRUCTIONS ))CODE.YANK INTEGER.YANKDUP CODE.INSERT BOOLEAN.SWAP FLOAT.POP CODE.NTHCDR EXEC.= FLOAT.YANK FLOAT.% CODE.YANKDUP BOOLEAN.SHOVE EXEC.DUP (CODE.DO*TIMES EXEC.Y ()))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 44,
  "genome": "{:instruction FLOAT.FROMBOOLEAN :close  4}{:instruction TRUE :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction CODE.CDR :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction INTEGER.= :close  0}",
  "program": "(FLOAT.FROMBOOLEAN TRUE INTEGER.STACKDEPTH BOOLEAN.FROMFLOAT CODE.CDR INTEGER.STACKDEPTH INTEGER.= )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 2 "data" : {0 1} } }
}
{ "id": 45,
  "genome": "{:instruction FLOAT.MAX :close  4}{:instruction CODE.DO* :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction CODE.SHOVE :close  0}{:instruction CODE.MEMBER :close  0}{:instruction CODE.FLUSH :close  4}{:instruction FLOAT.POP :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction EXEC.SWAP :close  0}{:instruction BOOLEAN.= :close  0}{:instruction EXEC.SHOVE :close  0}",
  "program": "(FLOAT.MAX CODE.DO* EXEC.DO*WHILE (BOOLEAN.YANK CODE.SHOVE CODE.MEMBER CODE.FLUSH )FLOAT.POP INTEGER.FROMFLOAT EXEC.SWAP (BOOLEAN.= EXEC.SHOVE ())())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 46,
  "genome": "{:instruction CODE.ROT :close  0}{:instruction CODE.DO*RANGE :close  0}{:instruction FLOAT.MAX :close  4}{:instruction CODE.FROMINTEGER :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction BOOLEAN.= :close  4}{:instruction CODE.MEMBER :close  0}{:instruction INTEGER.MIN :close  0}{:instruction EXEC.STACKDEPTH :close  0}{:instruction EXEC.= :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction CODE.= :close  0}{:instruction CODE.INSERT :close  4}{:instruction FLOAT.% :close  0}{:instruction CODE.CAR :close  0}{:instruction CODE.FLUSH :close  4}{:instruction FLOAT.YANK :close  0}{:instruction BOOLEAN.STACKDEPTH :close  4}{:instruction INTEGER.+ :close  0}{:instruction CODE.CDR :close  4}{:instruction EXEC.YANK :close  4}{:instruction EXEC.DO*COUNT :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction BOOLEAN.NAND :close  4}{:instruction CODE.MEMBER :close  4}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction CODE.NULL :close  0}{:instruction INTEGER.= :close  0}{:instruction 2776 :close  0}{:instruction CODE.QUOTE :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction BOOLEAN.SHOVE :close  0}{:instruction CODE.YANK :close  4}{:instruction BOOLEAN.NOR :close  0}{:instruction INTEGER.DUP :close  4}{:instruction FLOAT.% :close  0}{:instruction CODE.DUP :close  4}{:instruction CODE.IF :close  0}{:instruction CODE.NULL :close  4}{:instruction CODE.CAR :close  0}{:instruction BOOLEAN.SHOVE :close  0}{:instruction FLOAT.% :close  4}{:instruction FLOAT.COS :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction INTEGER.FLUSH :close  0}{:instruction BOOLEAN.ROT :close  4}{:instruction EXEC.WHILE :close  0}",
  "program": "(CODE.ROT CODE.DO*RANGE FLOAT.MAX CODE.FROMINTEGER INTEGER.FROMFLOAT BOOLEAN.= CODE.MEMBER INTEGER.MIN EXEC.STACKDEPTH EXEC.= FLOAT.YANKDUP CODE.= CODE.INSERT FLOAT.% CODE.CAR CODE.FLUSH FLOAT.YANK BOOLEAN.STACKDEPTH INTEGER.+ CODE.CDR EXEC.YANK EXEC.DO*COUNT (FLOAT.YANKDUP BOOLEAN.NAND )CODE.MEMBER BOOLEAN.FROMINTEGER CODE.NULL INTEGER.= 2776 CODE.QUOTE (EXEC.DO*COUNT (BOOLEAN.SHOVE CODE.YANK ))BOOLEAN.NOR INTEGER.DUP FLOAT.% CODE.DUP CODE.IF CODE.NULL CODE.CAR BOOLEAN.SHOVE FLOAT.% FLOAT.COS INTEGER.SWAP INTEGER.FLUSH BOOLEAN.ROT EXEC.WHILE ())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 47,
  "genome": "{:instruction BOOLEAN.DUP :close  4}{:instruction EXEC.WHILE :close  0}{:instruction CODE.NTH :close  4}{:instruction CODE.DO*RANGE :close  0}{:instruction FLOAT.YANK :close  0}{:instruction CODE.MEMBER :close  0}{:instruction INTEGER.+ :close  0}{:instruction CODE.FLUSH :close  0}{:instruction INTEGER.YANK :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction FLOAT.POP :close  0}{:instruction INTEGER.% :close  0}{:instruction BOOLEAN.DUP :close  4}{:instruction BOOLEAN.POP :close  0}{:instruction CODE.YANKDUP :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction FLOAT.< :close  0}{:instruction EXEC.S :close  0}{:instruction FLOAT.> :close  0}{:instruction TRUE :close  0}{:instruction CODE.= :close  0}{:instruction INTEGER.YANK :close  0}{:instruction FLOAT.FROMDATA :close  0}{:instruction INTEGER.POP :close  0}",
  "program": "(BOOLEAN.DUP EXEC.WHILE (CODE.NTH )CODE.DO*RANGE FLOAT.YANK CODE.MEMBER INTEGER.+ CODE.FLUSH INTEGER.YANK CODE.NTHCDR FLOAT.POP INTEGER.% BOOLEAN.DUP BOOLEAN.POP CODE.YANKDUP EXEC.DO*COUNT (FLOAT.< EXEC.S (FLOAT.> TRUE CODE.= INTEGER.YANK FLOAT.FROMDATA INTEGER.POP )()()))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {1} } }
}
{ "id": 48,
  "genome": "{:instruction FLOAT.DUP :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction EXEC.= :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction FLOAT.DUP :close  0}{:instruction CODE.MEMBER :close  4}{:instruction INTEGER.POP :close  0}{:instruction FLOAT.FROMINTEGER :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction CODE.INSERT :close  0}{:instruction -1962 :close  0}{:instruction -1053 :close  4}{:instruction INTEGER.% :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction CODE.EXTRACT :close  0}{:instruction FLOAT.SIN :close  4}{:instruction EXEC.STACKDEPTH :close  4}{:instruction CODE.POSITION :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction CODE.ATOM :close  0}{:instruction EXEC.DO*COUNT :close  4}{:instruction CODE.MEMBER :close  0}{:instruction FLOAT.* :close  4}{:instruction FLOAT./ :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction FLOAT.MIN :close  0}{:instruction EXEC.DO*WHILE :close  4}{:instruction FLOAT.= :close  0}{:instruction CODE.DUP :close  0}{:instruction TRUE :close  0}{:instruction CODE.SWAP :close  0}{:instruction EXEC.DO*COUNT :close  4}{:instruction BOOLEAN.SWAP :close  0}{:instruction CODE.LENGTH :close  0}{:instruction EXEC.ROT :close  4}{:instruction CODE.POP :close  4}{:instruction FLOAT.* :close  0}",
  "program": "(FLOAT.DUP EXEC.DO*COUNT (EXEC.= BOOLEAN.YANK FLOAT.DUP CODE.MEMBER )INTEGER.POP FLOAT.FROMINTEGER EXEC.SHOVE (CODE.INSERT -1962 -1053 )INTEGER.% INTEGER.STACKDEPTH CODE.EXTRACT FLOAT.SIN EXEC.STACKDEPTH CODE.POSITION BOOLEAN.FLUSH EXEC.DO*COUNT (EXEC.YANKDUP CODE.ATOM EXEC.DO*COUNT ())CODE.MEMBER FLOAT.* FLOAT./ CODE.DO*TIMES FLOAT.MIN EXEC.DO*WHILE ()FLOAT.= CODE.DUP TRUE CODE.SWAP EXEC.DO*COUNT ()BOOLEAN.SWAP CODE.LENGTH EXEC.ROT ()()()CODE.POP FLOAT.* )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {1} } }
}
{ "id": 49,
  "genome": "{:instruction FLOAT.* :close  4}{:instruction INTEGER.* :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction INTEGER.POP :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction FLOAT.= :close  4}{:instruction CODE.CONTAINER :close  0}{:instruction CODE.INSERT :close  0}{:instruction CODE.EXTRACT :close  0}{:instruction INTEGER.MIN :close  4}{:instruction EXEC.ROT :close  0}{:instruction CODE.= :close  0}{:instruction EXEC.DO*WHILE :close  4}{:instruction BOOLEAN.NAND :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction CODE.SWAP :close  0}{:instruction FLOAT.YANK :close  0}{:instruction EXEC.DUP :close  4}{:instruction INTEGER.MIN :close  0}{:instruction CODE.EXTRACT :close  0}{:instruction CODE.DO*RANGE :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction FALSE :close  0}{:instruction FLOAT.MIN :close  4}{:instruction EXEC.IF :close  4}{:instruction CODE.DO* :close  4}{:instruction FLOAT.POP :close  0}{:instruction EXEC.STACKDEPTH :close  0}{:instruction FLOAT.POP :close  4}{:instruction FLOAT.MAX :close  4}{:instruction BOOLEAN.SWAP :close  0}{:instruction INTEGER.SWAP :close  4}{:instruction EXEC.DUP :close  0}{:instruction FLOAT.TAN :close  0}{:instruction CODE.FROMFLOAT :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction CODE.DO* :close  0}{:instruction -280 :close  4}{:instruction FLOAT.% :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction CODE.LENGTH :close  0}{:instruction EXEC.STACKDEPTH :close  0}{:instruction INTEGER.SWAP :close  4}{:instruction CODE.MEMBER :close  0}",
  "program": "(FLOAT.* INTEGER.* EXEC.DO*TIMES (INTEGER.POP FLOAT.SWAP FLOAT.= )CODE.CONTAINER CODE.INSERT CODE.EXTRACT INTEGER.MIN EXEC.ROT (CODE.= EXEC.DO*WHILE ())()()BOOLEAN.NAND INTEGER.SHOVE CODE.SWAP FLOAT.YANK EXEC.DUP ()INTEGER.MIN CODE.EXTRACT CODE.DO*RANGE INTEGER.SHOVE FALSE FLOAT.MIN EXEC.IF ()()CODE.DO* FLOAT.POP EXEC.STACKDEPTH FLOAT.POP FLOAT.MAX BOOLEAN.SWAP INTEGER.SWAP EXEC.DUP (FLOAT.TAN CODE.FROMFLOAT BOOLEAN.FLUSH CODE.DO* -280 )FLOAT.% BOOLEAN.YANK INTEGER.YANKDUP BOOLEAN.FROMFLOAT CODE.STACKDEPTH BOOLEAN.AND CODE.LENGTH EXEC.STACKDEPTH INTEGER.SWAP CODE.MEMBER )",
  "result-set": { "integer-stack": {"size": 10 "data" : {0 2 -280 -280 0 16 20 -280 -280 34} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 50,
  "genome": "{:instruction FLOAT.FROMINTEGER :close  0}{:instruction FLOAT.+ :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction EXEC.STACKDEPTH :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction CODE.CDR :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction EXEC.DO*WHILE :close  4}{:instruction CODE.CDR :close  0}{:instruction CODE.FROMFLOAT :close  4}{:instruction CODE.EXTRACT :close  0}{:instruction BOOLEAN.NOT :close  4}{:instruction BOOLEAN.NOR :close  0}{:instruction BOOLEAN.SWAP :close  0}{:instruction FLOAT.< :close  0}{:instruction CODE.CAR :close  0}{:instruction BOOLEAN.= :close  0}{:instruction INTEGER./ :close  4}{:instruction CODE.ATOM :close  0}{:instruction CODE.IF :close  0}{:instruction CODE.ROT :close  0}{:instruction INTEGER.% :close  4}{:instruction INTEGER.POP :close  0}{:instruction CODE.LENGTH :close  0}{:instruction CODE.DO :close  0}{:instruction EXEC.S :close  4}{:instruction FLOAT.FROMINTEGER :close  0}{:instruction CODE.FLUSH :close  4}{:instruction CODE.QUOTE :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction BOOLEAN.ROT :close  4}{:instruction CODE.NULL :close  0}{:instruction INTEGER.% :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction 2571 :close  0}{:instruction CODE.INSERT :close  4}{:instruction INTEGER.POP :close  0}",
  "program": "(FLOAT.FROMINTEGER FLOAT.+ INTEGER.SHOVE EXEC.STACKDEPTH EXEC.DO*WHILE (CODE.FROMINTEGER CODE.FROMINTEGER CODE.CDR FLOAT.SWAP EXEC.DO*WHILE ())CODE.CDR CODE.FROMFLOAT CODE.EXTRACT BOOLEAN.NOT BOOLEAN.NOR BOOLEAN.SWAP FLOAT.< CODE.CAR BOOLEAN.= INTEGER./ CODE.ATOM CODE.IF CODE.ROT INTEGER.% INTEGER.POP CODE.LENGTH CODE.DO EXEC.S ()()()FLOAT.FROMINTEGER CODE.FLUSH CODE.QUOTE (FLOAT.SHOVE EXEC.DO*COUNT (BOOLEAN.ROT ))CODE.NULL INTEGER.% BOOLEAN.OR 2571 CODE.INSERT INTEGER.POP )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 1 "data" : {37} },
                  "bool-stack": {"size": 1 "data" : {1} } }
}
{ "id": 51,
  "genome": "{:instruction BOOLEAN.YANK :close  0}{:instruction CODE.APPEND :close  0}{:instruction EXEC.ROT :close  4}{:instruction FLOAT.POP :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction EXEC.ROT :close  4}{:instruction BOOLEAN.YANK :close  4}{:instruction BOOLEAN.SWAP :close  0}{:instruction CODE.APPEND :close  0}{:instruction FLOAT.FROMINTEGER :close  0}{:instruction FLOAT.DUP :close  0}{:instruction INTEGER.> :close  4}{:instruction FLOAT.= :close  4}{:instruction CODE.POP :close  0}{:instruction EXEC.DO*COUNT :close  4}{:instruction INTEGER.% :close  0}{:instruction FLOAT.- :close  0}{:instruction INTEGER.YANK :close  0}{:instruction FLOAT./ :close  0}{:instruction FLOAT.> :close  0}{:instruction EXEC.IF :close  4}{:instruction CODE.NTHCDR :close  0}{:instruction FLOAT.FROMINTEGER :close  0}{:instruction EXEC.= :close  0}{:instruction EXEC.DO*TIMES :close  4}{:instruction INTEGER.DUP :close  0}{:instruction CODE.INSERT :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction CODE.FROMINTEGER :close  4}{:instruction FALSE :close  0}{:instruction FLOAT.FLUSH :close  4}{:instruction CODE.DO*RANGE :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction FLOAT.> :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction INTEGER.+ :close  0}{:instruction EXEC.K :close  4}{:instruction FLOAT.FROMDATA :close  0}{:instruction EXEC.STACKDEPTH :close  0}{:instruction CODE.MEMBER :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction INTEGER.> :close  4}{:instruction EXEC.= :close  4}{:instruction INTEGER.POP :close  0}{:instruction CODE.CONTAINER :close  0}{:instruction CODE.IF :close  0}",
  "program": "(BOOLEAN.YANK CODE.APPEND EXEC.ROT ()()()FLOAT.POP BOOLEAN.FROMFLOAT EXEC.ROT ()()()BOOLEAN.YANK BOOLEAN.SWAP CODE.APPEND FLOAT.FROMINTEGER FLOAT.DUP INTEGER.> FLOAT.= CODE.POP EXEC.DO*COUNT ()INTEGER.% FLOAT.- INTEGER.YANK FLOAT./ FLOAT.> EXEC.IF ()()CODE.NTHCDR FLOAT.FROMINTEGER EXEC.= EXEC.DO*TIMES ()INTEGER.DUP CODE.INSERT INTEGER.YANKDUP CODE.FROMINTEGER FALSE FLOAT.FLUSH CODE.DO*RANGE BOOLEAN.STACKDEPTH FLOAT.> INTEGER.SWAP INTEGER.+ EXEC.K ()()FLOAT.FROMDATA EXEC.STACKDEPTH CODE.MEMBER CODE.FROMINTEGER CODE.DO*COUNT INTEGER.> EXEC.= INTEGER.POP CODE.CONTAINER CODE.IF )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 1 "data" : {4} },
                  "bool-stack": {"size": 3 "data" : {0 0 0} } }
}
{ "id": 52,
  "genome": "{:instruction CODE.FLUSH :close  4}{:instruction EXEC.SWAP :close  4}{:instruction CODE.IF :close  0}{:instruction FLOAT./ :close  0}{:instruction CODE.CDR :close  0}{:instruction EXEC.ROT :close  4}{:instruction INTEGER.SWAP :close  0}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction CODE.QUOTE :close  0}{:instruction CODE.DO*COUNT :close  4}{:instruction EXEC.WHILE :close  4}{:instruction BOOLEAN.NAND :close  0}{:instruction BOOLEAN.= :close  0}{:instruction FLOAT.DUP :close  4}{:instruction CODE.FROMBOOLEAN :close  4}{:instruction BOOLEAN.NOR :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction INTEGER.= :close  0}{:instruction FLOAT.YANKDUP :close  4}{:instruction CODE.DO* :close  0}{:instruction CODE.NULL :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction INTEGER.= :close  0}{:instruction INTEGER.POP :close  0}{:instruction EXEC.SWAP :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction CODE.DO*RANGE :close  0}",
  "program": "(CODE.FLUSH EXEC.SWAP ()()CODE.IF FLOAT./ CODE.CDR EXEC.ROT ()()()INTEGER.SWAP FLOAT.FROMBOOLEAN CODE.QUOTE (CODE.DO*COUNT )EXEC.WHILE ()BOOLEAN.NAND BOOLEAN.= FLOAT.DUP CODE.FROMBOOLEAN BOOLEAN.NOR BOOLEAN.AND INTEGER.= FLOAT.YANKDUP CODE.DO* CODE.NULL BOOLEAN.FROMFLOAT INTEGER.= INTEGER.POP EXEC.SWAP (BOOLEAN.FROMFLOAT CODE.DO*RANGE )())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 53,
  "genome": "{:instruction CODE.DO*COUNT :close  0}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction EXEC.STACKDEPTH :close  4}{:instruction EXEC.WHILE :close  0}{:instruction CODE.DO :close  0}{:instruction BOOLEAN.= :close  4}{:instruction CODE.CAR :close  0}",
  "program": "(CODE.DO*COUNT FLOAT.FROMBOOLEAN EXEC.STACKDEPTH EXEC.WHILE (CODE.DO BOOLEAN.= )CODE.CAR )",
  "result-set": { "integer-stack": {"size": 10 "data" : {6 7 8 9 10 11 12 13 2 0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}

Test case number: 53
Effort = 33
test_case
{ "id": 53,
  "genome": "{:instruction CODE.DO*COUNT :close  0}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction EXEC.STACKDEPTH :close  4}{:instruction EXEC.WHILE :close  0}{:instruction CODE.DO :close  0}{:instruction BOOLEAN.= :close  4}{:instruction CODE.CAR :close  0}",
  "program": "(CODE.DO*COUNT FLOAT.FROMBOOLEAN EXEC.STACKDEPTH EXEC.WHILE (CODE.DO BOOLEAN.= )CODE.CAR )",
  "result-set": { "integer-stack": {"size": 10 "data" : {6 7 8 9 10 11 12 13 2 0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}

recreated_test_case
{ "id": 53,
  "genome": "{:instruction CODE.DO*COUNT :close  0}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction EXEC.STACKDEPTH :close  4}{:instruction EXEC.WHILE :close  0}{:instruction CODE.DO :close  0}{:instruction BOOLEAN.= :close  4}{:instruction CODE.CAR :close  0}",
  "program": "(CODE.DO*COUNT FLOAT.FROMBOOLEAN EXEC.STACKDEPTH EXEC.WHILE (CODE.DO BOOLEAN.= )CODE.CAR )",
  "result-set": { "integer-stack": {"size": 4 "data" : {6 13 2 0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}


env


INTEGER	()
CODE	()
BOOLEAN	()
DOUBLE	()
