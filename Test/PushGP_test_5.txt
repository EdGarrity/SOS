{ "id": 1,
  "genome": "{:instruction BOOLEAN.OR :close  0}{:instruction CODE.APPEND :close  4}{:instruction CODE.ATOM :close  0}{:instruction FLOAT.STACKDEPTH :close  4}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction FLOAT.- :close  4}{:instruction EXEC.S :close  4}{:instruction BOOLEAN.SWAP :close  4}{:instruction INTEGER.YANKDUP :close  0}{:instruction CODE.DUP :close  0}{:instruction INTEGER.- :close  0}{:instruction BOOLEAN.OR :close  4}{:instruction EXEC.WHEN :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction EXEC.WHEN :close  0}{:instruction CODE.EXTRACT :close  4}{:instruction BOOLEAN.YANKDUP :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction EXEC.STACKDEPTH :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction INTEGER./ :close  0}{:instruction INTEGER.MAX :close  0}{:instruction INTEGER.% :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction CODE.CAR :close  4}{:instruction BOOLEAN.SHOVE :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction CODE.ATOM :close  4}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction EXEC.YANK :close  0}{:instruction EXEC.DUP :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction EXEC.= :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction CODE.IF :close  0}{:instruction EXEC.YANKDUP :close  4}{:instruction INTEGER.DUP :close  4}",
  "program": "(BOOLEAN.OR CODE.APPEND CODE.ATOM FLOAT.STACKDEPTH INTEGER.FROMFLOAT FLOAT.- EXEC.S ()()()BOOLEAN.SWAP INTEGER.YANKDUP CODE.DUP INTEGER.- BOOLEAN.OR EXEC.WHEN (CODE.FROMBOOLEAN BOOLEAN.FROMINTEGER EXEC.WHEN (CODE.EXTRACT ))BOOLEAN.YANKDUP CODE.STACKDEPTH EXEC.STACKDEPTH EXEC.SHOVE (INTEGER./ INTEGER.MAX INTEGER.% BOOLEAN.AND CODE.CAR )BOOLEAN.SHOVE EXEC.DO*TIMES (CODE.DO*TIMES CODE.ATOM )FLOAT.STACKDEPTH CODE.DO*TIMES EXEC.YANK EXEC.DUP (BOOLEAN.NOR EXEC.= BOOLEAN.STACKDEPTH CODE.IF EXEC.YANKDUP )INTEGER.DUP )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 2,
  "genome": "{:instruction CODE.YANKDUP :close  0}{:instruction EXEC.STACKDEPTH :close  0}{:instruction CODE.LENGTH :close  0}{:instruction INTEGER.DUP :close  4}{:instruction INTEGER.POP :close  0}{:instruction INTEGER.> :close  0}{:instruction FLOAT.FROMDATA :close  0}{:instruction EXEC.YANK :close  0}",
  "program": "(CODE.YANKDUP EXEC.STACKDEPTH CODE.LENGTH INTEGER.DUP INTEGER.POP INTEGER.> FLOAT.FROMDATA EXEC.YANK )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 4,
  "genome": "{:instruction FLOAT.TAN :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction CODE.SIZE :close  0}{:instruction 0.41119050639942056 :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction EXEC.FLUSH :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction EXEC.K :close  0}{:instruction -1488 :close  0}{:instruction CODE.POSITION :close  0}{:instruction FLOAT.= :close  0}{:instruction EXEC.DUP :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction CODE.NOOP :close  4}{:instruction BOOLEAN.OR :close  4}{:instruction CODE.DO :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction CODE.CAR :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction INTEGER.DUP :close  0}{:instruction EXEC.ROT :close  4}{:instruction EXEC.DO*TIMES :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction FLOAT.POP :close  4}{:instruction CODE.LENGTH :close  4}{:instruction CODE.ROT :close  0}{:instruction CODE.CAR :close  0}{:instruction FLOAT.SIN :close  0}{:instruction BOOLEAN.SWAP :close  0}{:instruction BOOLEAN.SWAP :close  0}",
  "program": "(FLOAT.TAN FLOAT.SHOVE CODE.SIZE 0.41119050639942056 CODE.STACKDEPTH FLOAT.YANKDUP EXEC.FLUSH BOOLEAN.STACKDEPTH BOOLEAN.OR EXEC.K (-1488 CODE.POSITION FLOAT.= EXEC.DUP (FLOAT.YANKDUP CODE.NOOP ))()BOOLEAN.OR CODE.DO EXEC.DO*RANGE (CODE.CAR INTEGER.SWAP INTEGER.DUP EXEC.ROT ()()())EXEC.DO*TIMES (INTEGER.SHOVE FLOAT.POP )CODE.LENGTH CODE.ROT CODE.CAR FLOAT.SIN BOOLEAN.SWAP BOOLEAN.SWAP )",
  "result-set": { "integer-stack": {"size": 1 "data" : {41} },
                  "float-stack": {"size": 2 "data" : {0.411191 0.411191} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 5,
  "genome": "{:instruction INTEGER.YANKDUP :close  0}{:instruction CODE.MEMBER :close  0}{:instruction BOOLEAN.NOT :close  0}{:instruction FLOAT.- :close  0}{:instruction INTEGER.FROMFLOAT :close  4}{:instruction EXEC.SHOVE :close  0}{:instruction FLOAT.POP :close  4}{:instruction FLOAT.COS :close  0}{:instruction FLOAT.DUP :close  0}{:instruction FLOAT.FROMINTEGER :close  0}{:instruction FLOAT.COS :close  4}{:instruction BOOLEAN.ROT :close  0}{:instruction BOOLEAN.POP :close  4}{:instruction CODE.SIZE :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction CODE.ATOM :close  0}",
  "program": "(INTEGER.YANKDUP CODE.MEMBER BOOLEAN.NOT FLOAT.- INTEGER.FROMFLOAT EXEC.SHOVE (FLOAT.POP )FLOAT.COS FLOAT.DUP FLOAT.FROMINTEGER FLOAT.COS BOOLEAN.ROT BOOLEAN.POP CODE.SIZE INTEGER.FROMFLOAT CODE.ATOM )",
  "result-set": { "integer-stack": {"size": 1 "data" : {18} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 6,
  "genome": "{:instruction INTEGER.YANKDUP :close  0}{:instruction FLOAT.- :close  4}{:instruction FLOAT.YANK :close  4}{:instruction BOOLEAN.SWAP :close  4}{:instruction BOOLEAN.SWAP :close  0}{:instruction BOOLEAN.= :close  0}{:instruction CODE.CONTAINER :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction EXEC.WHILE :close  0}{:instruction FLOAT./ :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction EXEC.WHEN :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction FLOAT.SIN :close  4}{:instruction INTEGER.* :close  0}{:instruction CODE.NOOP :close  4}{:instruction INTEGER.< :close  0}{:instruction EXEC.YANK :close  0}{:instruction INTEGER.* :close  4}{:instruction EXEC.POP :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction CODE.NOOP :close  0}{:instruction INTEGER.% :close  0}{:instruction CODE.SHOVE :close  4}{:instruction FLOAT.DUP :close  0}{:instruction FLOAT.* :close  0}{:instruction INTEGER.MIN :close  0}{:instruction CODE.CONTAINER :close  0}{:instruction FLOAT.DUP :close  4}{:instruction EXEC.SHOVE :close  0}{:instruction INTEGER.= :close  0}{:instruction INTEGER.MIN :close  0}{:instruction BOOLEAN.NOT :close  0}",
  "program": "(INTEGER.YANKDUP FLOAT.- FLOAT.YANK BOOLEAN.SWAP BOOLEAN.SWAP BOOLEAN.= CODE.CONTAINER CODE.DO*COUNT EXEC.WHILE (FLOAT./ INTEGER.YANKDUP EXEC.WHEN (CODE.DO*COUNT FLOAT.SIN ))INTEGER.* CODE.NOOP INTEGER.< EXEC.YANK INTEGER.* EXEC.POP (EXEC.DO*TIMES (INTEGER.YANKDUP CODE.FROMINTEGER EXEC.YANKDUP CODE.NOOP INTEGER.% CODE.SHOVE ))FLOAT.DUP FLOAT.* INTEGER.MIN CODE.CONTAINER FLOAT.DUP EXEC.SHOVE (INTEGER.= INTEGER.MIN BOOLEAN.NOT ))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 7,
  "genome": "{:instruction CODE.INSTRUCTIONS :close  0}{:instruction CODE.IF :close  0}{:instruction FLOAT.% :close  4}{:instruction FLOAT.TAN :close  4}{:instruction BOOLEAN.YANKDUP :close  0}{:instruction INTEGER.FROMBOOLEAN :close  0}",
  "program": "(CODE.INSTRUCTIONS CODE.IF FLOAT.% FLOAT.TAN BOOLEAN.YANKDUP INTEGER.FROMBOOLEAN )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 8,
  "genome": "{:instruction CODE.STACKDEPTH :close  0}{:instruction EXEC.DUP :close  0}{:instruction CODE.EXTRACT :close  4}{:instruction FLOAT./ :close  0}{:instruction EXEC.SWAP :close  0}{:instruction TRUE :close  0}{:instruction CODE.NTH :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction INTEGER.% :close  4}{:instruction CODE.LENGTH :close  0}{:instruction CODE.CDR :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction INTEGER.< :close  0}{:instruction CODE.DO :close  0}{:instruction CODE.POSITION :close  0}{:instruction EXEC.= :close  4}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction FLOAT.COS :close  4}{:instruction FLOAT.- :close  0}{:instruction INTEGER.DUP :close  0}{:instruction CODE.LENGTH :close  0}{:instruction CODE.YANK :close  0}{:instruction EXEC.= :close  0}{:instruction EXEC.ROT :close  0}{:instruction CODE.YANK :close  0}{:instruction FLOAT.ROT :close  4}{:instruction CODE.ATOM :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction CODE.NULL :close  0}{:instruction INTEGER.ROT :close  0}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction EXEC.ROT :close  0}{:instruction FLOAT.DUP :close  4}{:instruction FLOAT.= :close  0}{:instruction EXEC.WHILE :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction FLOAT.FROMDATA :close  0}{:instruction CODE.CDR :close  0}{:instruction CODE.CONTAINER :close  4}{:instruction FLOAT.ROT :close  0}{:instruction INTEGER.FLUSH :close  0}{:instruction FLOAT.+ :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction INTEGER.MIN :close  0}{:instruction EXEC.DO*RANGE :close  0}",
  "program": "(CODE.STACKDEPTH EXEC.DUP (CODE.EXTRACT )FLOAT./ EXEC.SWAP (TRUE CODE.NTH CODE.STACKDEPTH INTEGER.% )()CODE.LENGTH CODE.CDR BOOLEAN.FLUSH INTEGER.< CODE.DO CODE.POSITION EXEC.= FLOAT.FROMBOOLEAN FLOAT.COS FLOAT.- INTEGER.DUP CODE.LENGTH CODE.YANK EXEC.= EXEC.ROT (CODE.YANK FLOAT.ROT )()()CODE.ATOM CODE.NTHCDR CODE.NULL INTEGER.ROT FLOAT.FROMBOOLEAN EXEC.ROT (FLOAT.DUP )()()FLOAT.= EXEC.WHILE (CODE.DO*TIMES FLOAT.FROMDATA CODE.CDR CODE.CONTAINER )FLOAT.ROT INTEGER.FLUSH FLOAT.+ INTEGER.SWAP INTEGER.YANKDUP INTEGER.MIN EXEC.DO*RANGE ())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 9,
  "genome": "{:instruction INTEGER.STACKDEPTH :close  4}{:instruction EXEC.YANKDUP :close  0}{:instruction FLOAT.* :close  0}{:instruction FALSE :close  0}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction FLOAT.POP :close  0}{:instruction CODE.CAR :close  0}",
  "program": "(INTEGER.STACKDEPTH EXEC.YANKDUP FLOAT.* FALSE CODE.INSTRUCTIONS INTEGER.SWAP FLOAT.POP CODE.CAR )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 10,
  "genome": "{:instruction FLOAT.COS :close  4}{:instruction EXEC.ROT :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction CODE.FROMFLOAT :close  0}{:instruction CODE.ROT :close  4}{:instruction CODE.DO* :close  0}{:instruction BOOLEAN.POP :close  0}{:instruction CODE.CAR :close  4}{:instruction EXEC.YANKDUP :close  4}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction CODE.LIST :close  0}{:instruction CODE.LENGTH :close  0}{:instruction FLOAT.% :close  0}{:instruction 0.66748381724289718 :close  0}{:instruction CODE.CONS :close  0}{:instruction FLOAT.DUP :close  4}{:instruction CODE.YANKDUP :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction INTEGER./ :close  0}{:instruction EXEC.DO*TIMES :close  4}{:instruction CODE.CAR :close  0}{:instruction BOOLEAN.POP :close  0}{:instruction CODE.CONS :close  4}{:instruction 0.55399452837975560 :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction CODE.CONTAINER :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction INTEGER.MAX :close  0}",
  "program": "(FLOAT.COS EXEC.ROT (BOOLEAN.YANK CODE.FROMFLOAT CODE.ROT )()()CODE.DO* BOOLEAN.POP CODE.CAR EXEC.YANKDUP FLOAT.FROMBOOLEAN CODE.LIST CODE.LENGTH FLOAT.% 0.66748381724289718 CODE.CONS FLOAT.DUP CODE.YANKDUP CODE.NTHCDR EXEC.DO*RANGE (INTEGER./ EXEC.DO*TIMES ())CODE.CAR BOOLEAN.POP CODE.CONS 0.55399452837975560 INTEGER.STACKDEPTH FLOAT.FROMBOOLEAN BOOLEAN.OR CODE.CONTAINER BOOLEAN.STACKDEPTH INTEGER.MAX )",
  "result-set": { "integer-stack": {"size": 1 "data" : {0} },
                  "float-stack": {"size": 5 "data" : {0.553995 0.667484 0.667484 0.113489 0.667484} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 11,
  "genome": "{:instruction EXEC.YANKDUP :close  4}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction FLOAT.* :close  0}{:instruction INTEGER.< :close  0}{:instruction INTEGER.+ :close  0}{:instruction CODE.DO*RANGE :close  0}{:instruction FLOAT.YANK :close  4}{:instruction EXEC.DO*RANGE :close  0}{:instruction CODE.LIST :close  4}{:instruction CODE.DO* :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction FLOAT.> :close  4}{:instruction INTEGER.< :close  4}{:instruction EXEC.K :close  4}{:instruction CODE.CONTAINER :close  0}{:instruction FLOAT.TAN :close  0}{:instruction CODE.DO*RANGE :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction INTEGER.= :close  0}{:instruction CODE.NULL :close  0}{:instruction FLOAT.+ :close  0}{:instruction CODE.ROT :close  0}{:instruction INTEGER.MAX :close  0}{:instruction BOOLEAN.POP :close  4}{:instruction CODE.POSITION :close  0}{:instruction BOOLEAN.NOR :close  4}{:instruction INTEGER.YANK :close  0}{:instruction CODE.LIST :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction INTEGER.MAX :close  0}{:instruction INTEGER.POP :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction FLOAT.+ :close  0}{:instruction FLOAT.* :close  0}{:instruction FLOAT.TAN :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction EXEC.DO*COUNT :close  4}{:instruction BOOLEAN.SWAP :close  0}",
  "program": "(EXEC.YANKDUP CODE.INSTRUCTIONS INTEGER.STACKDEPTH FLOAT.* INTEGER.< INTEGER.+ CODE.DO*RANGE FLOAT.YANK EXEC.DO*RANGE (CODE.LIST )CODE.DO* BOOLEAN.AND FLOAT.> INTEGER.< EXEC.K ()()CODE.CONTAINER FLOAT.TAN CODE.DO*RANGE CODE.DO*TIMES INTEGER.= CODE.NULL FLOAT.+ CODE.ROT INTEGER.MAX BOOLEAN.POP CODE.POSITION BOOLEAN.NOR INTEGER.YANK CODE.LIST BOOLEAN.NOR INTEGER.MAX INTEGER.POP FLOAT.SHOVE FLOAT.+ FLOAT.* FLOAT.TAN BOOLEAN.FROMINTEGER EXEC.DO*COUNT ()BOOLEAN.SWAP )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 12,
  "genome": "",
  "program": "()",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 13,
  "genome": "",
  "program": "()",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 14,
  "genome": "{:instruction FLOAT.SHOVE :close  0}{:instruction FLOAT.+ :close  0}{:instruction CODE.LENGTH :close  0}{:instruction EXEC.K :close  0}{:instruction CODE.QUOTE :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction FLOAT.COS :close  0}{:instruction EXEC.STACKDEPTH :close  0}{:instruction INTEGER.= :close  0}{:instruction CODE.= :close  4}{:instruction FLOAT.FLUSH :close  0}{:instruction CODE.LENGTH :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction INTEGER.% :close  0}{:instruction CODE.CAR :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction INTEGER.DUP :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction FLOAT.> :close  4}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction FLOAT.YANKDUP :close  4}{:instruction BOOLEAN.DUP :close  4}{:instruction INTEGER.YANK :close  0}{:instruction EXEC.S :close  0}{:instruction CODE.NOOP :close  0}{:instruction EXEC.SWAP :close  0}{:instruction BOOLEAN.POP :close  4}{:instruction CODE.NOOP :close  0}{:instruction CODE.IF :close  0}{:instruction BOOLEAN.FROMFLOAT :close  4}",
  "program": "(FLOAT.SHOVE FLOAT.+ CODE.LENGTH EXEC.K (CODE.QUOTE (EXEC.DO*RANGE (FLOAT.COS EXEC.STACKDEPTH INTEGER.= CODE.= )))()FLOAT.FLUSH CODE.LENGTH BOOLEAN.YANK INTEGER.% CODE.CAR BOOLEAN.FLUSH BOOLEAN.FROMINTEGER INTEGER.SWAP INTEGER.DUP BOOLEAN.AND FLOAT.> CODE.FROMBOOLEAN FLOAT.YANKDUP BOOLEAN.DUP INTEGER.YANK EXEC.S (CODE.NOOP EXEC.SWAP (BOOLEAN.POP )())()(CODE.NOOP CODE.IF BOOLEAN.FROMFLOAT ))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 15,
  "genome": "{:instruction CODE.CONS :close  4}{:instruction FLOAT.DUP :close  0}",
  "program": "(CODE.CONS FLOAT.DUP )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 16,
  "genome": "{:instruction EXEC.S :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction INTEGER.* :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction CODE.IF :close  0}{:instruction INTEGER.DUP :close  0}{:instruction TRUE :close  0}{:instruction CODE.SWAP :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction EXEC.WHEN :close  0}{:instruction CODE.ROT :close  4}{:instruction INTEGER.DUP :close  0}{:instruction FLOAT.FROMINTEGER :close  4}{:instruction CODE.DO*COUNT :close  0}{:instruction CODE.LENGTH :close  0}{:instruction CODE.YANKDUP :close  0}{:instruction CODE.LIST :close  0}{:instruction INTEGER.YANKDUP :close  4}{:instruction BOOLEAN.YANKDUP :close  0}{:instruction BOOLEAN.ROT :close  4}{:instruction CODE.DUP :close  4}{:instruction CODE.IF :close  0}{:instruction CODE.CONTAINER :close  0}{:instruction INTEGER.% :close  4}{:instruction FLOAT.YANKDUP :close  0}{:instruction INTEGER.+ :close  0}{:instruction CODE.MEMBER :close  0}{:instruction INTEGER.> :close  0}{:instruction EXEC.SWAP :close  0}{:instruction FLOAT.% :close  0}{:instruction CODE.CDR :close  0}",
  "program": "(EXEC.S (EXEC.DO*WHILE (CODE.NTHCDR INTEGER.* EXEC.YANKDUP CODE.IF INTEGER.DUP TRUE CODE.SWAP CODE.FROMINTEGER EXEC.WHEN (CODE.ROT )))()(INTEGER.DUP FLOAT.FROMINTEGER )CODE.DO*COUNT CODE.LENGTH CODE.YANKDUP CODE.LIST INTEGER.YANKDUP BOOLEAN.YANKDUP BOOLEAN.ROT CODE.DUP CODE.IF CODE.CONTAINER INTEGER.% FLOAT.YANKDUP INTEGER.+ CODE.MEMBER INTEGER.> EXEC.SWAP (FLOAT.% CODE.CDR )())",
  "result-set": { "integer-stack": {"size": 1 "data" : {22} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 17,
  "genome": "{:instruction EXEC.DO*TIMES :close  4}{:instruction 0.24745759257289057 :close  0}{:instruction EXEC.STACKDEPTH :close  0}{:instruction CODE.NULL :close  0}{:instruction INTEGER.DUP :close  0}",
  "program": "(EXEC.DO*TIMES ()0.24745759257289057 EXEC.STACKDEPTH CODE.NULL INTEGER.DUP )",
  "result-set": { "integer-stack": {"size": 2 "data" : {2 2} },
                  "float-stack": {"size": 1 "data" : {0.247458} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 18,
  "genome": "{:instruction FLOAT.< :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction CODE.ROT :close  0}{:instruction INTEGER.< :close  4}{:instruction INTEGER.= :close  0}{:instruction INTEGER.MIN :close  0}{:instruction INTEGER.YANK :close  0}{:instruction FLOAT.> :close  0}{:instruction BOOLEAN.NAND :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction FLOAT.SIN :close  0}{:instruction FLOAT.% :close  0}{:instruction FLOAT.= :close  0}{:instruction CODE.CAR :close  0}{:instruction INTEGER.ROT :close  0}{:instruction EXEC.WHILE :close  0}{:instruction INTEGER.< :close  4}{:instruction INTEGER.> :close  4}{:instruction FLOAT.YANK :close  0}{:instruction INTEGER.POP :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction EXEC.WHEN :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction EXEC.DO*TIMES :close  4}{:instruction CODE.NTHCDR :close  0}{:instruction EXEC.K :close  4}{:instruction CODE.DO*COUNT :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction INTEGER.* :close  0}{:instruction FLOAT.ROT :close  0}{:instruction CODE.DO*COUNT :close  4}{:instruction CODE.FROMBOOLEAN :close  4}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction CODE.LIST :close  0}{:instruction INTEGER.MIN :close  0}{:instruction FLOAT.YANKDUP :close  4}{:instruction FLOAT.DUP :close  0}{:instruction FLOAT.COS :close  0}{:instruction CODE.YANKDUP :close  0}{:instruction INTEGER.+ :close  0}{:instruction BOOLEAN.DUP :close  0}{:instruction BOOLEAN.FROMFLOAT :close  4}{:instruction CODE.DO :close  4}{:instruction INTEGER.YANK :close  0}{:instruction CODE.FROMBOOLEAN :close  0}",
  "program": "(FLOAT.< CODE.STACKDEPTH FLOAT.SWAP CODE.ROT INTEGER.< INTEGER.= INTEGER.MIN INTEGER.YANK FLOAT.> BOOLEAN.NAND BOOLEAN.STACKDEPTH FLOAT.SIN FLOAT.% FLOAT.= CODE.CAR INTEGER.ROT EXEC.WHILE (INTEGER.< )INTEGER.> FLOAT.YANK INTEGER.POP BOOLEAN.AND EXEC.WHEN (INTEGER.SHOVE EXEC.DO*TIMES ())CODE.NTHCDR EXEC.K ()()CODE.DO*COUNT EXEC.DO*WHILE (INTEGER.* FLOAT.ROT CODE.DO*COUNT )CODE.FROMBOOLEAN INTEGER.STACKDEPTH CODE.LIST INTEGER.MIN FLOAT.YANKDUP FLOAT.DUP FLOAT.COS CODE.YANKDUP INTEGER.+ BOOLEAN.DUP BOOLEAN.FROMFLOAT CODE.DO INTEGER.YANK CODE.FROMBOOLEAN )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 20,
  "genome": "{:instruction FLOAT.SWAP :close  0}{:instruction CODE.DO* :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction -3270 :close  0}{:instruction FLOAT.* :close  0}{:instruction CODE.NULL :close  4}{:instruction INTEGER.YANKDUP :close  0}{:instruction CODE.POP :close  4}{:instruction CODE.INSERT :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction FLOAT.+ :close  0}{:instruction FLOAT.FROMDATA :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction CODE.ROT :close  0}{:instruction FLOAT.- :close  0}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction FLOAT.> :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction CODE.CAR :close  0}{:instruction CODE.NULL :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction CODE.IF :close  0}{:instruction FLOAT.= :close  0}{:instruction FLOAT.POP :close  0}{:instruction BOOLEAN.NAND :close  0}{:instruction EXEC.YANK :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction CODE.LENGTH :close  0}{:instruction FLOAT.TAN :close  0}{:instruction INTEGER./ :close  0}{:instruction CODE.YANK :close  4}{:instruction INTEGER.< :close  0}{:instruction 2730 :close  0}{:instruction EXEC.= :close  4}{:instruction CODE.EXTRACT :close  4}{:instruction FLOAT.MAX :close  0}{:instruction CODE.CDR :close  0}{:instruction FLOAT.> :close  4}{:instruction CODE.CONTAINER :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction CODE.LENGTH :close  4}{:instruction CODE.APPEND :close  4}",
  "program": "(FLOAT.SWAP CODE.DO* EXEC.DO*WHILE (BOOLEAN.YANK BOOLEAN.FLUSH -3270 FLOAT.* CODE.NULL )INTEGER.YANKDUP CODE.POP CODE.INSERT EXEC.DO*RANGE (FLOAT.+ FLOAT.FROMDATA CODE.STACKDEPTH CODE.ROT FLOAT.- FLOAT.FROMBOOLEAN CODE.STACKDEPTH FLOAT.> EXEC.DO*WHILE (CODE.CAR CODE.NULL EXEC.YANKDUP CODE.IF FLOAT.= FLOAT.POP BOOLEAN.NAND EXEC.YANK FLOAT.SHOVE CODE.LENGTH FLOAT.TAN INTEGER./ CODE.YANK ))INTEGER.< 2730 EXEC.= CODE.EXTRACT FLOAT.MAX CODE.CDR FLOAT.> CODE.CONTAINER CODE.STACKDEPTH CODE.LENGTH CODE.APPEND )",
  "result-set": { "integer-stack": {"size": 2 "data" : {0 2730} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 21,
  "genome": "{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction INTEGER.FLUSH :close  0}{:instruction INTEGER./ :close  0}{:instruction CODE.CONS :close  0}{:instruction INTEGER.- :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction CODE.ATOM :close  0}{:instruction CODE.FLUSH :close  0}{:instruction CODE.EXTRACT :close  0}{:instruction CODE.DO* :close  0}{:instruction INTEGER.% :close  4}{:instruction CODE.YANKDUP :close  0}{:instruction EXEC.YANK :close  0}{:instruction CODE.SHOVE :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction CODE.APPEND :close  0}{:instruction FLOAT.MIN :close  0}{:instruction INTEGER.> :close  4}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction CODE.CONS :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction FLOAT.FROMDATA :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction CODE.YANK :close  4}{:instruction EXEC.WHEN :close  4}{:instruction BOOLEAN.NAND :close  0}{:instruction INTEGER.= :close  0}{:instruction INTEGER.< :close  4}{:instruction FLOAT.> :close  0}{:instruction CODE.DO*TIMES :close  4}{:instruction CODE.DO*COUNT :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction BOOLEAN.NOR :close  4}{:instruction EXEC.SWAP :close  0}{:instruction EXEC.POP :close  4}{:instruction CODE.NOOP :close  4}{:instruction BOOLEAN.NAND :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction INTEGER.ROT :close  0}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction INTEGER.SWAP :close  4}",
  "program": "(BOOLEAN.FROMINTEGER INTEGER.FLUSH INTEGER./ CODE.CONS INTEGER.- EXEC.DO*COUNT (CODE.ATOM CODE.FLUSH CODE.EXTRACT CODE.DO* INTEGER.% )CODE.YANKDUP EXEC.YANK CODE.SHOVE EXEC.DO*WHILE (CODE.APPEND FLOAT.MIN INTEGER.> )FLOAT.STACKDEPTH CODE.CONS BOOLEAN.AND FLOAT.FROMDATA EXEC.YANKDUP CODE.YANK EXEC.WHEN ()BOOLEAN.NAND INTEGER.= INTEGER.< FLOAT.> CODE.DO*TIMES CODE.DO*COUNT FLOAT.SWAP BOOLEAN.NOR EXEC.SWAP (EXEC.POP ())()CODE.NOOP BOOLEAN.NAND BOOLEAN.OR EXEC.SHOVE (INTEGER.ROT FLOAT.FROMBOOLEAN BOOLEAN.NOR INTEGER.SWAP ))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 22,
  "genome": "{:instruction FLOAT.< :close  0}{:instruction CODE.IF :close  0}{:instruction FLOAT.SIN :close  0}{:instruction FLOAT.ROT :close  0}{:instruction BOOLEAN.ROT :close  4}{:instruction FLOAT.POP :close  0}{:instruction EXEC.YANK :close  4}{:instruction CODE.DO*COUNT :close  0}{:instruction INTEGER.+ :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction FLOAT.- :close  0}{:instruction BOOLEAN.SHOVE :close  0}{:instruction BOOLEAN.YANKDUP :close  0}{:instruction INTEGER.> :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction CODE.YANK :close  4}{:instruction CODE.CONTAINER :close  4}{:instruction EXEC.WHEN :close  0}{:instruction BOOLEAN.= :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction INTEGER.< :close  0}{:instruction FLOAT.SIN :close  0}{:instruction FLOAT.% :close  0}{:instruction FLOAT.ROT :close  0}{:instruction FLOAT./ :close  0}{:instruction CODE.NTH :close  4}{:instruction CODE.CAR :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction EXEC.DO*RANGE :close  4}{:instruction BOOLEAN.YANK :close  0}{:instruction EXEC.IF :close  0}{:instruction FLOAT.= :close  0}{:instruction CODE.FROMFLOAT :close  0}{:instruction BOOLEAN.DUP :close  0}{:instruction INTEGER.ROT :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction INTEGER.% :close  0}{:instruction INTEGER.FROMFLOAT :close  4}{:instruction FLOAT.* :close  4}{:instruction BOOLEAN.DUP :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction EXEC.ROT :close  4}{:instruction BOOLEAN.OR :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction BOOLEAN.POP :close  4}{:instruction CODE.NTH :close  0}",
  "program": "(FLOAT.< CODE.IF FLOAT.SIN FLOAT.ROT BOOLEAN.ROT FLOAT.POP EXEC.YANK CODE.DO*COUNT INTEGER.+ BOOLEAN.YANK FLOAT.- BOOLEAN.SHOVE BOOLEAN.YANKDUP INTEGER.> BOOLEAN.FROMINTEGER CODE.YANK CODE.CONTAINER EXEC.WHEN (BOOLEAN.= EXEC.DO*TIMES (INTEGER.< FLOAT.SIN FLOAT.% FLOAT.ROT FLOAT./ CODE.NTH ))CODE.CAR BOOLEAN.YANK CODE.DO*COUNT CODE.FROMBOOLEAN EXEC.DO*RANGE ()BOOLEAN.YANK EXEC.IF (FLOAT.= CODE.FROMFLOAT BOOLEAN.DUP INTEGER.ROT FLOAT.YANKDUP INTEGER.% INTEGER.FROMFLOAT )()FLOAT.* BOOLEAN.DUP INTEGER.FROMFLOAT EXEC.ROT ()()()BOOLEAN.OR CODE.NTHCDR BOOLEAN.POP CODE.NTH )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 23,
  "genome": "{:instruction FLOAT.< :close  0}{:instruction BOOLEAN.= :close  4}{:instruction INTEGER.MAX :close  4}{:instruction EXEC.WHILE :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction CODE.MEMBER :close  4}{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction CODE.DO* :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction FLOAT./ :close  0}{:instruction INTEGER.+ :close  0}{:instruction CODE.POP :close  4}{:instruction BOOLEAN.YANK :close  0}{:instruction FLOAT.< :close  0}{:instruction FLOAT.YANKDUP :close  4}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction FLOAT.* :close  0}{:instruction BOOLEAN.YANKDUP :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction FLOAT.< :close  0}{:instruction INTEGER.YANKDUP :close  4}{:instruction FLOAT.FROMINTEGER :close  4}{:instruction CODE.POSITION :close  4}{:instruction EXEC.DO*COUNT :close  4}{:instruction FLOAT.+ :close  4}{:instruction BOOLEAN.NOR :close  4}{:instruction INTEGER.MIN :close  0}{:instruction 1644 :close  0}{:instruction INTEGER.% :close  0}{:instruction CODE.DO* :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction INTEGER./ :close  0}{:instruction INTEGER.ROT :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction EXEC.K :close  0}{:instruction EXEC.IF :close  0}{:instruction FLOAT.ROT :close  0}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction FLOAT.+ :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction CODE.SHOVE :close  0}{:instruction INTEGER.MIN :close  0}",
  "program": "(FLOAT.< BOOLEAN.= INTEGER.MAX EXEC.WHILE (BOOLEAN.AND EXEC.DO*COUNT (CODE.MEMBER ))INTEGER.FROMBOOLEAN CODE.DO* BOOLEAN.FROMINTEGER FLOAT./ INTEGER.+ CODE.POP BOOLEAN.YANK FLOAT.< FLOAT.YANKDUP FLOAT.FROMBOOLEAN FLOAT.* BOOLEAN.YANKDUP INTEGER.SWAP CODE.STACKDEPTH INTEGER.STACKDEPTH FLOAT.STACKDEPTH CODE.DO*TIMES FLOAT.< INTEGER.YANKDUP FLOAT.FROMINTEGER CODE.POSITION EXEC.DO*COUNT ()FLOAT.+ BOOLEAN.NOR INTEGER.MIN 1644 INTEGER.% CODE.DO* BOOLEAN.ROT INTEGER./ INTEGER.ROT INTEGER.YANKDUP FLOAT.YANKDUP EXEC.K (EXEC.IF (FLOAT.ROT FLOAT.STACKDEPTH FLOAT.STACKDEPTH FLOAT.+ CODE.DO*TIMES CODE.SHOVE INTEGER.MIN )())())",
  "result-set": { "integer-stack": {"size": 1 "data" : {2} },
                  "float-stack": {"size": 1 "data" : {4} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 24,
  "genome": "{:instruction EXEC.S :close  0}{:instruction EXEC.DO*RANGE :close  0}",
  "program": "(EXEC.S (EXEC.DO*RANGE ())()())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 26,
  "genome": "{:instruction BOOLEAN.YANKDUP :close  0}{:instruction INTEGER.> :close  0}{:instruction CODE.YANKDUP :close  0}{:instruction INTEGER.FROMFLOAT :close  4}{:instruction FLOAT.+ :close  0}{:instruction CODE.QUOTE :close  0}{:instruction INTEGER.YANK :close  4}{:instruction CODE.YANKDUP :close  0}{:instruction BOOLEAN.AND :close  0}",
  "program": "(BOOLEAN.YANKDUP INTEGER.> CODE.YANKDUP INTEGER.FROMFLOAT FLOAT.+ CODE.QUOTE (INTEGER.YANK )CODE.YANKDUP BOOLEAN.AND )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 27,
  "genome": "{:instruction CODE.NULL :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction CODE.DUP :close  0}{:instruction CODE.CDR :close  4}{:instruction BOOLEAN.ROT :close  0}{:instruction FLOAT.- :close  0}{:instruction BOOLEAN.SHOVE :close  4}{:instruction FLOAT.SIN :close  0}{:instruction INTEGER.YANKDUP :close  4}{:instruction INTEGER.YANKDUP :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction CODE.DO*RANGE :close  4}{:instruction BOOLEAN.OR :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction CODE.SHOVE :close  0}{:instruction FLOAT.< :close  0}{:instruction CODE.SHOVE :close  0}{:instruction CODE.CDR :close  4}{:instruction EXEC.DO*WHILE :close  4}{:instruction CODE.DO* :close  0}{:instruction BOOLEAN.POP :close  4}{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction FLOAT.FLUSH :close  0}{:instruction INTEGER.< :close  4}{:instruction FLOAT.= :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction FLOAT.FROMDATA :close  0}{:instruction EXEC.WHEN :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction EXEC.YANKDUP :close  4}{:instruction BOOLEAN.AND :close  4}{:instruction EXEC.WHILE :close  0}{:instruction TRUE :close  0}{:instruction BOOLEAN.SWAP :close  4}{:instruction CODE.POP :close  0}{:instruction EXEC.DUP :close  0}{:instruction INTEGER.DUP :close  0}{:instruction EXEC.FLUSH :close  0}{:instruction FLOAT.YANK :close  0}",
  "program": "(CODE.NULL CODE.DO*TIMES BOOLEAN.FLUSH CODE.DUP CODE.CDR BOOLEAN.ROT FLOAT.- BOOLEAN.SHOVE FLOAT.SIN INTEGER.YANKDUP INTEGER.YANKDUP EXEC.DO*RANGE (CODE.DO*RANGE )BOOLEAN.OR EXEC.DO*TIMES (CODE.SHOVE FLOAT.< CODE.SHOVE CODE.CDR )EXEC.DO*WHILE ()CODE.DO* BOOLEAN.POP INTEGER.FROMBOOLEAN FLOAT.FLUSH INTEGER.< FLOAT.= INTEGER.SHOVE FLOAT.FROMDATA EXEC.WHEN (CODE.FROMBOOLEAN EXEC.YANKDUP )BOOLEAN.AND EXEC.WHILE (TRUE BOOLEAN.SWAP )CODE.POP EXEC.DUP (INTEGER.DUP EXEC.FLUSH FLOAT.YANK ))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {1} } }
}
{ "id": 28,
  "genome": "{:instruction CODE.MEMBER :close  0}{:instruction INTEGER.< :close  0}{:instruction INTEGER.< :close  0}{:instruction CODE.LENGTH :close  0}{:instruction FLOAT.* :close  0}{:instruction EXEC.IF :close  0}{:instruction BOOLEAN.YANKDUP :close  4}{:instruction CODE.FROMFLOAT :close  4}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction FLOAT.SWAP :close  4}{:instruction FLOAT.> :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction FLOAT.ROT :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction FLOAT./ :close  0}{:instruction CODE.DO :close  0}{:instruction CODE.FROMINTEGER :close  4}{:instruction FLOAT.FROMDATA :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction CODE.DUP :close  4}{:instruction BOOLEAN.STACKDEPTH :close  4}{:instruction CODE.CONTAINER :close  0}{:instruction FLOAT.YANK :close  0}{:instruction EXEC.DO*TIMES :close  4}{:instruction CODE.YANK :close  4}{:instruction FLOAT.% :close  4}{:instruction INTEGER.MAX :close  0}{:instruction BOOLEAN.= :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction EXEC.DUP :close  4}{:instruction BOOLEAN.AND :close  4}{:instruction CODE.DO :close  0}{:instruction CODE.LENGTH :close  0}{:instruction CODE.DO* :close  0}{:instruction INTEGER.< :close  4}{:instruction EXEC.IF :close  0}{:instruction EXEC.POP :close  0}{:instruction CODE.QUOTE :close  0}{:instruction BOOLEAN.DUP :close  0}{:instruction CODE.NTHCDR :close  0}",
  "program": "(CODE.MEMBER INTEGER.< INTEGER.< CODE.LENGTH FLOAT.* EXEC.IF (BOOLEAN.YANKDUP )()CODE.FROMFLOAT INTEGER.FROMFLOAT FLOAT.SWAP FLOAT.> EXEC.DO*WHILE (FLOAT.ROT CODE.FROMINTEGER FLOAT./ CODE.DO CODE.FROMINTEGER )FLOAT.FROMDATA EXEC.DO*WHILE (INTEGER.SWAP CODE.DUP )BOOLEAN.STACKDEPTH CODE.CONTAINER FLOAT.YANK EXEC.DO*TIMES ()CODE.YANK FLOAT.% INTEGER.MAX BOOLEAN.= EXEC.SHOVE (EXEC.DUP ())BOOLEAN.AND CODE.DO CODE.LENGTH CODE.DO* INTEGER.< EXEC.IF (EXEC.POP (CODE.QUOTE (BOOLEAN.DUP CODE.NTHCDR )))())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 29,
  "genome": "{:instruction INTEGER.FROMFLOAT :close  0}{:instruction INTEGER.+ :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction CODE.SIZE :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction EXEC.S :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction CODE.CDR :close  0}{:instruction EXEC.DO*WHILE :close  4}{:instruction CODE.DO*RANGE :close  0}{:instruction INTEGER./ :close  0}{:instruction BOOLEAN.DUP :close  4}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction EXEC.S :close  0}{:instruction EXEC.ROT :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction FLOAT.SWAP :close  4}{:instruction CODE.ROT :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction EXEC.FLUSH :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction FLOAT.DUP :close  0}{:instruction BOOLEAN.DUP :close  4}{:instruction CODE.CONTAINER :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction BOOLEAN.DUP :close  0}{:instruction CODE.MEMBER :close  0}",
  "program": "(INTEGER.FROMFLOAT INTEGER.+ BOOLEAN.STACKDEPTH CODE.SIZE BOOLEAN.ROT EXEC.S (CODE.STACKDEPTH CODE.CDR EXEC.DO*WHILE ())()()CODE.DO*RANGE INTEGER./ BOOLEAN.DUP FLOAT.FROMBOOLEAN BOOLEAN.FLUSH EXEC.S (EXEC.ROT (BOOLEAN.OR CODE.NTHCDR FLOAT.SWAP )()())(CODE.ROT BOOLEAN.ROT EXEC.FLUSH BOOLEAN.FROMINTEGER FLOAT.DUP BOOLEAN.DUP )()CODE.CONTAINER CODE.DO*COUNT INTEGER.SWAP BOOLEAN.DUP CODE.MEMBER )",
  "result-set": { "integer-stack": {"size": 3 "data" : {0 41 0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 31,
  "genome": "{:instruction FLOAT.POP :close  4}{:instruction TRUE :close  4}{:instruction FLOAT.% :close  4}{:instruction CODE.DO* :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction EXEC.YANK :close  0}{:instruction INTEGER.% :close  4}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction EXEC.SHOVE :close  4}{:instruction FLOAT.* :close  0}{:instruction FLOAT.MIN :close  0}{:instruction CODE.MEMBER :close  4}{:instruction FLOAT./ :close  0}{:instruction FLOAT.ROT :close  0}{:instruction CODE.CAR :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction FLOAT.STACKDEPTH :close  4}{:instruction INTEGER.SHOVE :close  0}{:instruction BOOLEAN.NAND :close  0}{:instruction INTEGER.- :close  4}{:instruction INTEGER.YANKDUP :close  0}{:instruction FLOAT.- :close  4}{:instruction FLOAT.SHOVE :close  4}{:instruction FLOAT.MIN :close  4}",
  "program": "(FLOAT.POP TRUE FLOAT.% CODE.DO* EXEC.DO*RANGE (EXEC.YANK INTEGER.% )INTEGER.STACKDEPTH EXEC.SHOVE ()FLOAT.* FLOAT.MIN CODE.MEMBER FLOAT./ FLOAT.ROT CODE.CAR EXEC.DO*WHILE (FLOAT.STACKDEPTH )INTEGER.SHOVE BOOLEAN.NAND INTEGER.- INTEGER.YANKDUP FLOAT.- FLOAT.SHOVE FLOAT.MIN )",
  "result-set": { "integer-stack": {"size": 1 "data" : {0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 32,
  "genome": "{:instruction INTEGER.= :close  0}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction EXEC.SWAP :close  0}{:instruction CODE.APPEND :close  0}{:instruction EXEC.WHILE :close  0}{:instruction FLOAT.FROMDATA :close  0}{:instruction BOOLEAN.OR :close  4}{:instruction CODE.QUOTE :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction INTEGER./ :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction BOOLEAN.SWAP :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction INTEGER.YANKDUP :close  4}{:instruction EXEC.DO*COUNT :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction CODE.SWAP :close  4}{:instruction CODE.DO*RANGE :close  0}{:instruction BOOLEAN.= :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction INTEGER.= :close  0}{:instruction CODE.APPEND :close  0}{:instruction FLOAT.MAX :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction CODE.APPEND :close  0}{:instruction BOOLEAN.POP :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction FLOAT.COS :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction EXEC.K :close  0}{:instruction FLOAT.FLUSH :close  4}{:instruction FLOAT.MIN :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction INTEGER.= :close  4}{:instruction CODE.= :close  0}{:instruction BOOLEAN.FROMINTEGER :close  4}{:instruction CODE.NOOP :close  4}{:instruction CODE.NOOP :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction CODE.STACKDEPTH :close  4}{:instruction CODE.ROT :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction EXEC.K :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}",
  "program": "(INTEGER.= CODE.INSTRUCTIONS EXEC.SWAP (CODE.APPEND EXEC.WHILE (FLOAT.FROMDATA BOOLEAN.OR ))()CODE.QUOTE (BOOLEAN.OR INTEGER./ FLOAT.SHOVE BOOLEAN.SWAP INTEGER.FROMFLOAT INTEGER.YANKDUP )EXEC.DO*COUNT (BOOLEAN.YANK CODE.SWAP )CODE.DO*RANGE BOOLEAN.= EXEC.DO*WHILE (INTEGER.= CODE.APPEND FLOAT.MAX BOOLEAN.OR CODE.APPEND BOOLEAN.POP FLOAT.YANKDUP BOOLEAN.OR FLOAT.COS EXEC.SHOVE (EXEC.K (FLOAT.FLUSH )()))FLOAT.MIN INTEGER.SWAP INTEGER.= CODE.= BOOLEAN.FROMINTEGER CODE.NOOP CODE.NOOP BOOLEAN.YANK BOOLEAN.AND CODE.STACKDEPTH CODE.ROT BOOLEAN.YANK EXEC.K (BOOLEAN.STACKDEPTH )())",
  "result-set": { "integer-stack": {"size": 2 "data" : {0 1} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 33,
  "genome": "{:instruction CODE.NTH :close  0}",
  "program": "(CODE.NTH )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 34,
  "genome": "{:instruction INTEGER.> :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction CODE.NTH :close  0}{:instruction FLOAT.= :close  0}{:instruction FLOAT./ :close  0}{:instruction FLOAT.% :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction FLOAT.* :close  4}{:instruction EXEC.WHEN :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction CODE.ATOM :close  4}{:instruction EXEC.WHILE :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction EXEC.S :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction FLOAT.ROT :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction BOOLEAN.= :close  4}{:instruction EXEC.YANK :close  4}{:instruction BOOLEAN.OR :close  4}{:instruction BOOLEAN.YANK :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction BOOLEAN.NAND :close  4}{:instruction BOOLEAN.= :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction BOOLEAN.AND :close  4}{:instruction CODE.INSERT :close  0}{:instruction INTEGER.< :close  4}{:instruction CODE.CONS :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction INTEGER.FLUSH :close  0}",
  "program": "(INTEGER.> INTEGER.SHOVE CODE.NTH FLOAT.= FLOAT./ FLOAT.% INTEGER.STACKDEPTH FLOAT.* EXEC.WHEN (BOOLEAN.STACKDEPTH CODE.ATOM )EXEC.WHILE (BOOLEAN.NOR EXEC.S (FLOAT.SHOVE FLOAT.ROT EXEC.DO*WHILE (FLOAT.YANKDUP BOOLEAN.= ))()()EXEC.YANK )BOOLEAN.OR BOOLEAN.YANK BOOLEAN.FROMINTEGER BOOLEAN.NAND BOOLEAN.= CODE.STACKDEPTH CODE.NTHCDR BOOLEAN.AND CODE.INSERT INTEGER.< CODE.CONS EXEC.DO*TIMES (INTEGER.FLUSH ))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 2 "data" : {0 0} } }
}
{ "id": 35,
  "genome": "{:instruction BOOLEAN.YANK :close  4}{:instruction EXEC.ROT :close  0}{:instruction EXEC.= :close  0}{:instruction EXEC.S :close  0}{:instruction CODE.POSITION :close  0}{:instruction CODE.CONS :close  0}{:instruction CODE.= :close  0}{:instruction FLOAT.= :close  0}{:instruction CODE.= :close  0}{:instruction CODE.FLUSH :close  0}{:instruction EXEC.YANKDUP :close  4}{:instruction CODE.NTH :close  0}{:instruction BOOLEAN.NAND :close  0}{:instruction EXEC.IF :close  0}{:instruction BOOLEAN.SHOVE :close  4}{:instruction CODE.YANKDUP :close  0}{:instruction EXEC.DUP :close  4}{:instruction FLOAT.SWAP :close  0}{:instruction CODE.POP :close  0}{:instruction TRUE :close  0}{:instruction CODE.= :close  4}{:instruction EXEC.IF :close  0}{:instruction INTEGER.> :close  0}{:instruction INTEGER.= :close  4}{:instruction CODE.CAR :close  0}{:instruction BOOLEAN.= :close  4}{:instruction EXEC.POP :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction CODE.SIZE :close  0}{:instruction INTEGER.STACKDEPTH :close  4}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction CODE.= :close  0}{:instruction FLOAT.% :close  0}{:instruction BOOLEAN.NOT :close  0}",
  "program": "(BOOLEAN.YANK EXEC.ROT (EXEC.= EXEC.S (CODE.POSITION CODE.CONS CODE.= FLOAT.= CODE.= CODE.FLUSH EXEC.YANKDUP )()())(CODE.NTH BOOLEAN.NAND EXEC.IF (BOOLEAN.SHOVE )())()CODE.YANKDUP EXEC.DUP ()FLOAT.SWAP CODE.POP TRUE CODE.= EXEC.IF (INTEGER.> INTEGER.= )()CODE.CAR BOOLEAN.= EXEC.POP (INTEGER.FROMFLOAT CODE.SIZE INTEGER.STACKDEPTH )CODE.INSTRUCTIONS BOOLEAN.FROMFLOAT INTEGER.YANKDUP CODE.= FLOAT.% BOOLEAN.NOT )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 36,
  "genome": "{:instruction CODE.POSITION :close  4}{:instruction CODE.NTHCDR :close  4}{:instruction CODE.CONTAINER :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction INTEGER.= :close  0}{:instruction FLOAT.+ :close  0}{:instruction EXEC.DO*RANGE :close  4}{:instruction FLOAT.+ :close  0}{:instruction EXEC.STACKDEPTH :close  4}{:instruction CODE.DO*RANGE :close  0}{:instruction INTEGER.POP :close  0}{:instruction CODE.CDR :close  0}{:instruction INTEGER.FLUSH :close  0}{:instruction EXEC.S :close  0}{:instruction EXEC.WHILE :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction EXEC.S :close  4}{:instruction BOOLEAN.YANKDUP :close  0}{:instruction CODE.SWAP :close  0}",
  "program": "(CODE.POSITION CODE.NTHCDR CODE.CONTAINER BOOLEAN.AND INTEGER.= FLOAT.+ EXEC.DO*RANGE ()FLOAT.+ EXEC.STACKDEPTH CODE.DO*RANGE INTEGER.POP CODE.CDR INTEGER.FLUSH EXEC.S (EXEC.WHILE (FLOAT.SWAP EXEC.S ()()())BOOLEAN.YANKDUP CODE.SWAP )()())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 38,
  "genome": "",
  "program": "()",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 39,
  "genome": "{:instruction EXEC.DO*COUNT :close  0}{:instruction EXEC.SWAP :close  0}{:instruction BOOLEAN.YANKDUP :close  0}{:instruction EXEC.S :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction FLOAT.> :close  0}{:instruction CODE.APPEND :close  0}{:instruction EXEC.DO*RANGE :close  4}{:instruction CODE.DO :close  0}{:instruction BOOLEAN.POP :close  0}{:instruction CODE.CDR :close  0}{:instruction FLOAT.* :close  0}{:instruction CODE.SHOVE :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction EXEC.DO*WHILE :close  4}{:instruction EXEC.S :close  0}{:instruction EXEC.DO*WHILE :close  4}{:instruction INTEGER.YANK :close  4}{:instruction EXEC.YANK :close  0}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction FLOAT.DUP :close  0}{:instruction CODE.CDR :close  4}{:instruction BOOLEAN.NOR :close  0}{:instruction INTEGER.* :close  4}{:instruction CODE.INSERT :close  0}{:instruction FLOAT.SIN :close  0}{:instruction EXEC.WHEN :close  0}{:instruction FLOAT.MIN :close  0}{:instruction CODE.LENGTH :close  0}{:instruction EXEC.K :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction FLOAT.* :close  0}{:instruction FLOAT.MIN :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction EXEC.Y :close  0}{:instruction CODE.NULL :close  0}{:instruction FLOAT.- :close  0}{:instruction INTEGER.YANKDUP :close  4}",
  "program": "(EXEC.DO*COUNT (EXEC.SWAP (BOOLEAN.YANKDUP EXEC.S (EXEC.SHOVE (CODE.INSTRUCTIONS FLOAT.> CODE.APPEND EXEC.DO*RANGE ()))()(CODE.DO BOOLEAN.POP CODE.CDR FLOAT.* CODE.SHOVE FLOAT.SHOVE BOOLEAN.FROMFLOAT EXEC.DO*WHILE ()))()EXEC.S (EXEC.DO*WHILE ())()()INTEGER.YANK )EXEC.YANK CODE.INSTRUCTIONS FLOAT.DUP CODE.CDR BOOLEAN.NOR INTEGER.* CODE.INSERT FLOAT.SIN EXEC.WHEN (FLOAT.MIN CODE.LENGTH EXEC.K (INTEGER.YANKDUP BOOLEAN.FLUSH FLOAT.* FLOAT.MIN CODE.FROMINTEGER EXEC.Y (CODE.NULL FLOAT.- INTEGER.YANKDUP ))()))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 40,
  "genome": "{:instruction INTEGER.FLUSH :close  4}{:instruction -0.15280450860802186 :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction FLOAT.> :close  0}{:instruction CODE.INSERT :close  0}{:instruction TRUE :close  4}{:instruction INTEGER./ :close  4}{:instruction CODE.LENGTH :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction INTEGER./ :close  0}{:instruction EXEC.IF :close  0}{:instruction EXEC.DO*RANGE :close  4}{:instruction EXEC.WHEN :close  0}{:instruction CODE.INSERT :close  0}{:instruction BOOLEAN.DUP :close  4}{:instruction EXEC.= :close  0}{:instruction CODE.ATOM :close  0}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction EXEC.DUP :close  4}{:instruction FLOAT.MAX :close  4}{:instruction FLOAT.COS :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction CODE.POP :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction CODE.IF :close  0}{:instruction EXEC.POP :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction EXEC.= :close  4}{:instruction BOOLEAN.DUP :close  4}{:instruction EXEC.WHILE :close  4}{:instruction EXEC.DO*COUNT :close  0}",
  "program": "(INTEGER.FLUSH -0.15280450860802186 EXEC.YANKDUP FLOAT.> CODE.INSERT TRUE INTEGER./ CODE.LENGTH EXEC.DO*WHILE (INTEGER./ EXEC.IF (EXEC.DO*RANGE ())())EXEC.WHEN (CODE.INSERT BOOLEAN.DUP )EXEC.= CODE.ATOM FLOAT.FROMBOOLEAN BOOLEAN.YANK BOOLEAN.FROMINTEGER EXEC.DUP ()FLOAT.MAX FLOAT.COS INTEGER.SHOVE EXEC.DO*RANGE (CODE.POP BOOLEAN.OR CODE.IF EXEC.POP (BOOLEAN.NOR INTEGER.FROMBOOLEAN EXEC.= ))BOOLEAN.DUP EXEC.WHILE ()EXEC.DO*COUNT ())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 1 "data" : {0.988348} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 41,
  "genome": "{:instruction INTEGER.SHOVE :close  0}{:instruction CODE.DO* :close  4}{:instruction EXEC.YANKDUP :close  4}{:instruction INTEGER.DUP :close  0}{:instruction FLOAT.+ :close  4}{:instruction BOOLEAN.YANK :close  4}{:instruction BOOLEAN.NOT :close  4}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction INTEGER.MAX :close  4}{:instruction CODE.APPEND :close  4}{:instruction CODE.QUOTE :close  0}",
  "program": "(INTEGER.SHOVE CODE.DO* EXEC.YANKDUP INTEGER.DUP FLOAT.+ BOOLEAN.YANK BOOLEAN.NOT CODE.FROMBOOLEAN BOOLEAN.YANK BOOLEAN.NOR INTEGER.MAX CODE.APPEND CODE.QUOTE ())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 42,
  "genome": "{:instruction CODE.= :close  0}{:instruction FLOAT.= :close  0}{:instruction -0.98813306679672863 :close  0}{:instruction FLOAT.= :close  4}{:instruction INTEGER.YANKDUP :close  0}{:instruction CODE.CDR :close  4}{:instruction EXEC.STACKDEPTH :close  0}{:instruction EXEC.= :close  0}{:instruction CODE.CAR :close  0}{:instruction CODE.DO*TIMES :close  4}{:instruction BOOLEAN.DUP :close  0}{:instruction INTEGER.YANK :close  4}{:instruction CODE.POSITION :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction CODE.DO*RANGE :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction INTEGER.MIN :close  0}{:instruction FLOAT.DUP :close  0}{:instruction INTEGER./ :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction INTEGER./ :close  0}{:instruction FLOAT.FLUSH :close  4}{:instruction CODE.STACKDEPTH :close  0}{:instruction FLOAT.MIN :close  0}{:instruction EXEC.K :close  0}{:instruction BOOLEAN.NOR :close  4}{:instruction FLOAT.COS :close  0}{:instruction CODE.NTH :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction EXEC.SHOVE :close  4}{:instruction FLOAT.TAN :close  4}{:instruction FLOAT.STACKDEPTH :close  4}{:instruction EXEC.SHOVE :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction CODE.IF :close  0}{:instruction INTEGER.YANK :close  0}{:instruction BOOLEAN.POP :close  4}{:instruction INTEGER.FROMBOOLEAN :close  4}{:instruction CODE.= :close  0}{:instruction CODE.DO :close  0}{:instruction FALSE :close  0}{:instruction FLOAT.POP :close  0}{:instruction CODE.NULL :close  4}{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction CODE.DO* :close  0}{:instruction -0.53201246623229526 :close  0}",
  "program": "(CODE.= FLOAT.= -0.98813306679672863 FLOAT.= INTEGER.YANKDUP CODE.CDR EXEC.STACKDEPTH EXEC.= CODE.CAR CODE.DO*TIMES BOOLEAN.DUP INTEGER.YANK CODE.POSITION INTEGER.YANKDUP CODE.DO*RANGE FLOAT.SWAP INTEGER.MIN FLOAT.DUP INTEGER./ EXEC.DO*COUNT (INTEGER./ FLOAT.FLUSH )CODE.STACKDEPTH FLOAT.MIN EXEC.K (BOOLEAN.NOR )()FLOAT.COS CODE.NTH EXEC.DO*TIMES (EXEC.SHOVE ())FLOAT.TAN FLOAT.STACKDEPTH EXEC.SHOVE (CODE.FROMINTEGER CODE.IF INTEGER.YANK BOOLEAN.POP )INTEGER.FROMBOOLEAN CODE.= CODE.DO FALSE FLOAT.POP CODE.NULL INTEGER.FROMBOOLEAN CODE.DO* -0.53201246623229526 )",
  "result-set": { "integer-stack": {"size": 1 "data" : {0} },
                  "float-stack": {"size": 1 "data" : {-0.532012} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 43,
  "genome": "{:instruction INTEGER.YANKDUP :close  0}{:instruction CODE.INSERT :close  0}{:instruction EXEC.IF :close  0}{:instruction CODE.IF :close  4}{:instruction EXEC.POP :close  4}{:instruction FLOAT.+ :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction FLOAT.FROMINTEGER :close  0}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction INTEGER.SHOVE :close  4}{:instruction CODE.APPEND :close  0}{:instruction FLOAT.TAN :close  0}{:instruction EXEC.IF :close  0}{:instruction CODE.QUOTE :close  0}{:instruction BOOLEAN.NOT :close  0}{:instruction CODE.FLUSH :close  0}{:instruction FLOAT.FLUSH :close  0}{:instruction FLOAT.MIN :close  0}{:instruction CODE.DO*COUNT :close  4}{:instruction CODE.FLUSH :close  4}{:instruction FLOAT.< :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction CODE.YANK :close  4}{:instruction CODE.MEMBER :close  0}{:instruction INTEGER.> :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction CODE.DO*TIMES :close  4}{:instruction EXEC.DO*WHILE :close  0}{:instruction EXEC.FLUSH :close  0}{:instruction INTEGER.DUP :close  0}{:instruction EXEC.Y :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction CODE.INSTRUCTIONS :close  4}{:instruction CODE.YANK :close  0}{:instruction INTEGER.YANKDUP :close  4}{:instruction CODE.INSERT :close  0}{:instruction BOOLEAN.SWAP :close  0}{:instruction FLOAT.POP :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction EXEC.= :close  0}{:instruction FLOAT.YANK :close  0}{:instruction FLOAT.% :close  0}{:instruction CODE.YANKDUP :close  4}{:instruction BOOLEAN.SHOVE :close  0}{:instruction EXEC.DUP :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction EXEC.Y :close  0}",
  "program": "(INTEGER.YANKDUP CODE.INSERT EXEC.IF (CODE.IF )()EXEC.POP ()FLOAT.+ FLOAT.SHOVE BOOLEAN.FROMINTEGER FLOAT.FROMINTEGER FLOAT.STACKDEPTH INTEGER.SHOVE CODE.APPEND FLOAT.TAN EXEC.IF (CODE.QUOTE (BOOLEAN.NOT CODE.FLUSH FLOAT.FLUSH FLOAT.MIN CODE.DO*COUNT ))()CODE.FLUSH FLOAT.< INTEGER.STACKDEPTH CODE.YANK CODE.MEMBER INTEGER.> BOOLEAN.NOR CODE.DO*TIMES EXEC.DO*WHILE (EXEC.FLUSH INTEGER.DUP EXEC.Y (INTEGER.STACKDEPTH CODE.INSTRUCTIONS ))CODE.YANK INTEGER.YANKDUP CODE.INSERT BOOLEAN.SWAP FLOAT.POP CODE.NTHCDR EXEC.= FLOAT.YANK FLOAT.% CODE.YANKDUP BOOLEAN.SHOVE EXEC.DUP (CODE.DO*TIMES EXEC.Y ()))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 44,
  "genome": "{:instruction FLOAT.FROMBOOLEAN :close  4}{:instruction TRUE :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction CODE.CDR :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction INTEGER.= :close  0}",
  "program": "(FLOAT.FROMBOOLEAN TRUE INTEGER.STACKDEPTH BOOLEAN.FROMFLOAT CODE.CDR INTEGER.STACKDEPTH INTEGER.= )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 2 "data" : {0 1} } }
}
{ "id": 45,
  "genome": "{:instruction FLOAT.MAX :close  4}{:instruction CODE.DO* :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction CODE.SHOVE :close  0}{:instruction CODE.MEMBER :close  0}{:instruction CODE.FLUSH :close  4}{:instruction FLOAT.POP :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction EXEC.SWAP :close  0}{:instruction BOOLEAN.= :close  0}{:instruction EXEC.SHOVE :close  0}",
  "program": "(FLOAT.MAX CODE.DO* EXEC.DO*WHILE (BOOLEAN.YANK CODE.SHOVE CODE.MEMBER CODE.FLUSH )FLOAT.POP INTEGER.FROMFLOAT EXEC.SWAP (BOOLEAN.= EXEC.SHOVE ())())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 46,
  "genome": "{:instruction CODE.ROT :close  0}{:instruction CODE.DO*RANGE :close  0}{:instruction FLOAT.MAX :close  4}{:instruction CODE.FROMINTEGER :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction BOOLEAN.= :close  4}{:instruction CODE.MEMBER :close  0}{:instruction INTEGER.MIN :close  0}{:instruction EXEC.STACKDEPTH :close  0}{:instruction EXEC.= :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction CODE.= :close  0}{:instruction CODE.INSERT :close  4}{:instruction FLOAT.% :close  0}{:instruction CODE.CAR :close  0}{:instruction CODE.FLUSH :close  4}{:instruction FLOAT.YANK :close  0}{:instruction BOOLEAN.STACKDEPTH :close  4}{:instruction INTEGER.+ :close  0}{:instruction CODE.CDR :close  4}{:instruction EXEC.YANK :close  4}{:instruction EXEC.DO*COUNT :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction BOOLEAN.NAND :close  4}{:instruction CODE.MEMBER :close  4}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction CODE.NULL :close  0}{:instruction INTEGER.= :close  0}{:instruction 2776 :close  0}{:instruction CODE.QUOTE :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction BOOLEAN.SHOVE :close  0}{:instruction CODE.YANK :close  4}{:instruction BOOLEAN.NOR :close  0}{:instruction INTEGER.DUP :close  4}{:instruction FLOAT.% :close  0}{:instruction CODE.DUP :close  4}{:instruction CODE.IF :close  0}{:instruction CODE.NULL :close  4}{:instruction CODE.CAR :close  0}{:instruction BOOLEAN.SHOVE :close  0}{:instruction FLOAT.% :close  4}{:instruction FLOAT.COS :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction INTEGER.FLUSH :close  0}{:instruction BOOLEAN.ROT :close  4}{:instruction EXEC.WHILE :close  0}",
  "program": "(CODE.ROT CODE.DO*RANGE FLOAT.MAX CODE.FROMINTEGER INTEGER.FROMFLOAT BOOLEAN.= CODE.MEMBER INTEGER.MIN EXEC.STACKDEPTH EXEC.= FLOAT.YANKDUP CODE.= CODE.INSERT FLOAT.% CODE.CAR CODE.FLUSH FLOAT.YANK BOOLEAN.STACKDEPTH INTEGER.+ CODE.CDR EXEC.YANK EXEC.DO*COUNT (FLOAT.YANKDUP BOOLEAN.NAND )CODE.MEMBER BOOLEAN.FROMINTEGER CODE.NULL INTEGER.= 2776 CODE.QUOTE (EXEC.DO*COUNT (BOOLEAN.SHOVE CODE.YANK ))BOOLEAN.NOR INTEGER.DUP FLOAT.% CODE.DUP CODE.IF CODE.NULL CODE.CAR BOOLEAN.SHOVE FLOAT.% FLOAT.COS INTEGER.SWAP INTEGER.FLUSH BOOLEAN.ROT EXEC.WHILE ())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 47,
  "genome": "{:instruction BOOLEAN.DUP :close  4}{:instruction EXEC.WHILE :close  0}{:instruction CODE.NTH :close  4}{:instruction CODE.DO*RANGE :close  0}{:instruction FLOAT.YANK :close  0}{:instruction CODE.MEMBER :close  0}{:instruction INTEGER.+ :close  0}{:instruction CODE.FLUSH :close  0}{:instruction INTEGER.YANK :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction FLOAT.POP :close  0}{:instruction INTEGER.% :close  0}{:instruction BOOLEAN.DUP :close  4}{:instruction BOOLEAN.POP :close  0}{:instruction CODE.YANKDUP :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction FLOAT.< :close  0}{:instruction EXEC.S :close  0}{:instruction FLOAT.> :close  0}{:instruction TRUE :close  0}{:instruction CODE.= :close  0}{:instruction INTEGER.YANK :close  0}{:instruction FLOAT.FROMDATA :close  0}{:instruction INTEGER.POP :close  0}",
  "program": "(BOOLEAN.DUP EXEC.WHILE (CODE.NTH )CODE.DO*RANGE FLOAT.YANK CODE.MEMBER INTEGER.+ CODE.FLUSH INTEGER.YANK CODE.NTHCDR FLOAT.POP INTEGER.% BOOLEAN.DUP BOOLEAN.POP CODE.YANKDUP EXEC.DO*COUNT (FLOAT.< EXEC.S (FLOAT.> TRUE CODE.= INTEGER.YANK FLOAT.FROMDATA INTEGER.POP )()()))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {1} } }
}
{ "id": 48,
  "genome": "{:instruction FLOAT.DUP :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction EXEC.= :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction FLOAT.DUP :close  0}{:instruction CODE.MEMBER :close  4}{:instruction INTEGER.POP :close  0}{:instruction FLOAT.FROMINTEGER :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction CODE.INSERT :close  0}{:instruction -1962 :close  0}{:instruction -1053 :close  4}{:instruction INTEGER.% :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction CODE.EXTRACT :close  0}{:instruction FLOAT.SIN :close  4}{:instruction EXEC.STACKDEPTH :close  4}{:instruction CODE.POSITION :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction CODE.ATOM :close  0}{:instruction EXEC.DO*COUNT :close  4}{:instruction CODE.MEMBER :close  0}{:instruction FLOAT.* :close  4}{:instruction FLOAT./ :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction FLOAT.MIN :close  0}{:instruction EXEC.DO*WHILE :close  4}{:instruction FLOAT.= :close  0}{:instruction CODE.DUP :close  0}{:instruction TRUE :close  0}{:instruction CODE.SWAP :close  0}{:instruction EXEC.DO*COUNT :close  4}{:instruction BOOLEAN.SWAP :close  0}{:instruction CODE.LENGTH :close  0}{:instruction EXEC.ROT :close  4}{:instruction CODE.POP :close  4}{:instruction FLOAT.* :close  0}",
  "program": "(FLOAT.DUP EXEC.DO*COUNT (EXEC.= BOOLEAN.YANK FLOAT.DUP CODE.MEMBER )INTEGER.POP FLOAT.FROMINTEGER EXEC.SHOVE (CODE.INSERT -1962 -1053 )INTEGER.% INTEGER.STACKDEPTH CODE.EXTRACT FLOAT.SIN EXEC.STACKDEPTH CODE.POSITION BOOLEAN.FLUSH EXEC.DO*COUNT (EXEC.YANKDUP CODE.ATOM EXEC.DO*COUNT ())CODE.MEMBER FLOAT.* FLOAT./ CODE.DO*TIMES FLOAT.MIN EXEC.DO*WHILE ()FLOAT.= CODE.DUP TRUE CODE.SWAP EXEC.DO*COUNT ()BOOLEAN.SWAP CODE.LENGTH EXEC.ROT ()()()CODE.POP FLOAT.* )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {1} } }
}
{ "id": 50,
  "genome": "{:instruction FLOAT.FROMINTEGER :close  0}{:instruction FLOAT.+ :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction EXEC.STACKDEPTH :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction CODE.CDR :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction EXEC.DO*WHILE :close  4}{:instruction CODE.CDR :close  0}{:instruction CODE.FROMFLOAT :close  4}{:instruction CODE.EXTRACT :close  0}{:instruction BOOLEAN.NOT :close  4}{:instruction BOOLEAN.NOR :close  0}{:instruction BOOLEAN.SWAP :close  0}{:instruction FLOAT.< :close  0}{:instruction CODE.CAR :close  0}{:instruction BOOLEAN.= :close  0}{:instruction INTEGER./ :close  4}{:instruction CODE.ATOM :close  0}{:instruction CODE.IF :close  0}{:instruction CODE.ROT :close  0}{:instruction INTEGER.% :close  4}{:instruction INTEGER.POP :close  0}{:instruction CODE.LENGTH :close  0}{:instruction CODE.DO :close  0}{:instruction EXEC.S :close  4}{:instruction FLOAT.FROMINTEGER :close  0}{:instruction CODE.FLUSH :close  4}{:instruction CODE.QUOTE :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction BOOLEAN.ROT :close  4}{:instruction CODE.NULL :close  0}{:instruction INTEGER.% :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction 2571 :close  0}{:instruction CODE.INSERT :close  4}{:instruction INTEGER.POP :close  0}",
  "program": "(FLOAT.FROMINTEGER FLOAT.+ INTEGER.SHOVE EXEC.STACKDEPTH EXEC.DO*WHILE (CODE.FROMINTEGER CODE.FROMINTEGER CODE.CDR FLOAT.SWAP EXEC.DO*WHILE ())CODE.CDR CODE.FROMFLOAT CODE.EXTRACT BOOLEAN.NOT BOOLEAN.NOR BOOLEAN.SWAP FLOAT.< CODE.CAR BOOLEAN.= INTEGER./ CODE.ATOM CODE.IF CODE.ROT INTEGER.% INTEGER.POP CODE.LENGTH CODE.DO EXEC.S ()()()FLOAT.FROMINTEGER CODE.FLUSH CODE.QUOTE (FLOAT.SHOVE EXEC.DO*COUNT (BOOLEAN.ROT ))CODE.NULL INTEGER.% BOOLEAN.OR 2571 CODE.INSERT INTEGER.POP )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 1 "data" : {37} },
                  "bool-stack": {"size": 1 "data" : {1} } }
}
{ "id": 51,
  "genome": "{:instruction BOOLEAN.YANK :close  0}{:instruction CODE.APPEND :close  0}{:instruction EXEC.ROT :close  4}{:instruction FLOAT.POP :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction EXEC.ROT :close  4}{:instruction BOOLEAN.YANK :close  4}{:instruction BOOLEAN.SWAP :close  0}{:instruction CODE.APPEND :close  0}{:instruction FLOAT.FROMINTEGER :close  0}{:instruction FLOAT.DUP :close  0}{:instruction INTEGER.> :close  4}{:instruction FLOAT.= :close  4}{:instruction CODE.POP :close  0}{:instruction EXEC.DO*COUNT :close  4}{:instruction INTEGER.% :close  0}{:instruction FLOAT.- :close  0}{:instruction INTEGER.YANK :close  0}{:instruction FLOAT./ :close  0}{:instruction FLOAT.> :close  0}{:instruction EXEC.IF :close  4}{:instruction CODE.NTHCDR :close  0}{:instruction FLOAT.FROMINTEGER :close  0}{:instruction EXEC.= :close  0}{:instruction EXEC.DO*TIMES :close  4}{:instruction INTEGER.DUP :close  0}{:instruction CODE.INSERT :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction CODE.FROMINTEGER :close  4}{:instruction FALSE :close  0}{:instruction FLOAT.FLUSH :close  4}{:instruction CODE.DO*RANGE :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction FLOAT.> :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction INTEGER.+ :close  0}{:instruction EXEC.K :close  4}{:instruction FLOAT.FROMDATA :close  0}{:instruction EXEC.STACKDEPTH :close  0}{:instruction CODE.MEMBER :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction INTEGER.> :close  4}{:instruction EXEC.= :close  4}{:instruction INTEGER.POP :close  0}{:instruction CODE.CONTAINER :close  0}{:instruction CODE.IF :close  0}",
  "program": "(BOOLEAN.YANK CODE.APPEND EXEC.ROT ()()()FLOAT.POP BOOLEAN.FROMFLOAT EXEC.ROT ()()()BOOLEAN.YANK BOOLEAN.SWAP CODE.APPEND FLOAT.FROMINTEGER FLOAT.DUP INTEGER.> FLOAT.= CODE.POP EXEC.DO*COUNT ()INTEGER.% FLOAT.- INTEGER.YANK FLOAT./ FLOAT.> EXEC.IF ()()CODE.NTHCDR FLOAT.FROMINTEGER EXEC.= EXEC.DO*TIMES ()INTEGER.DUP CODE.INSERT INTEGER.YANKDUP CODE.FROMINTEGER FALSE FLOAT.FLUSH CODE.DO*RANGE BOOLEAN.STACKDEPTH FLOAT.> INTEGER.SWAP INTEGER.+ EXEC.K ()()FLOAT.FROMDATA EXEC.STACKDEPTH CODE.MEMBER CODE.FROMINTEGER CODE.DO*COUNT INTEGER.> EXEC.= INTEGER.POP CODE.CONTAINER CODE.IF )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 1 "data" : {4} },
                  "bool-stack": {"size": 3 "data" : {0 0 0} } }
}
{ "id": 52,
  "genome": "{:instruction CODE.FLUSH :close  4}{:instruction EXEC.SWAP :close  4}{:instruction CODE.IF :close  0}{:instruction FLOAT./ :close  0}{:instruction CODE.CDR :close  0}{:instruction EXEC.ROT :close  4}{:instruction INTEGER.SWAP :close  0}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction CODE.QUOTE :close  0}{:instruction CODE.DO*COUNT :close  4}{:instruction EXEC.WHILE :close  4}{:instruction BOOLEAN.NAND :close  0}{:instruction BOOLEAN.= :close  0}{:instruction FLOAT.DUP :close  4}{:instruction CODE.FROMBOOLEAN :close  4}{:instruction BOOLEAN.NOR :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction INTEGER.= :close  0}{:instruction FLOAT.YANKDUP :close  4}{:instruction CODE.DO* :close  0}{:instruction CODE.NULL :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction INTEGER.= :close  0}{:instruction INTEGER.POP :close  0}{:instruction EXEC.SWAP :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction CODE.DO*RANGE :close  0}",
  "program": "(CODE.FLUSH EXEC.SWAP ()()CODE.IF FLOAT./ CODE.CDR EXEC.ROT ()()()INTEGER.SWAP FLOAT.FROMBOOLEAN CODE.QUOTE (CODE.DO*COUNT )EXEC.WHILE ()BOOLEAN.NAND BOOLEAN.= FLOAT.DUP CODE.FROMBOOLEAN BOOLEAN.NOR BOOLEAN.AND INTEGER.= FLOAT.YANKDUP CODE.DO* CODE.NULL BOOLEAN.FROMFLOAT INTEGER.= INTEGER.POP EXEC.SWAP (BOOLEAN.FROMFLOAT CODE.DO*RANGE )())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 53,
  "genome": "{:instruction CODE.DO*COUNT :close  0}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction EXEC.STACKDEPTH :close  4}{:instruction EXEC.WHILE :close  0}{:instruction CODE.DO :close  0}{:instruction BOOLEAN.= :close  4}{:instruction CODE.CAR :close  0}",
  "program": "(CODE.DO*COUNT FLOAT.FROMBOOLEAN EXEC.STACKDEPTH EXEC.WHILE (CODE.DO BOOLEAN.= )CODE.CAR )",
  "result-set": { "integer-stack": {"size": 10 "data" : {6 7 8 9 10 11 12 13 2 0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 54,
  "genome": "{:instruction INTEGER.MAX :close  0}{:instruction FLOAT.MAX :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction CODE.SHOVE :close  4}{:instruction EXEC.SHOVE :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction CODE.CAR :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction CODE.FROMBOOLEAN :close  4}{:instruction BOOLEAN.= :close  0}{:instruction CODE.QUOTE :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction EXEC.DO*WHILE :close  4}{:instruction EXEC.FLUSH :close  4}{:instruction FLOAT.YANKDUP :close  0}{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction CODE.DO*RANGE :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction CODE.MEMBER :close  0}{:instruction CODE.MEMBER :close  0}{:instruction INTEGER.POP :close  4}{:instruction BOOLEAN.SHOVE :close  0}{:instruction CODE.INSERT :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction EXEC.YANKDUP :close  4}{:instruction CODE.CDR :close  4}{:instruction CODE.YANKDUP :close  0}{:instruction FLOAT.SIN :close  0}{:instruction CODE.NTHCDR :close  4}{:instruction BOOLEAN.AND :close  0}{:instruction INTEGER.% :close  0}{:instruction CODE.DO :close  4}",
  "program": "(INTEGER.MAX FLOAT.MAX BOOLEAN.AND CODE.SHOVE EXEC.SHOVE (FLOAT.YANKDUP EXEC.YANKDUP CODE.CAR BOOLEAN.ROT CODE.FROMBOOLEAN )BOOLEAN.= CODE.QUOTE (INTEGER.SWAP EXEC.YANKDUP FLOAT.SWAP EXEC.DO*WHILE ())EXEC.FLUSH FLOAT.YANKDUP INTEGER.FROMBOOLEAN CODE.DO*RANGE INTEGER.SHOVE EXEC.DO*RANGE (CODE.MEMBER CODE.MEMBER INTEGER.POP )BOOLEAN.SHOVE CODE.INSERT BOOLEAN.NOR EXEC.YANKDUP CODE.CDR CODE.YANKDUP FLOAT.SIN CODE.NTHCDR BOOLEAN.AND INTEGER.% CODE.DO )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 55,
  "genome": "{:instruction CODE.SWAP :close  0}{:instruction CODE.EXTRACT :close  0}{:instruction INTEGER.MAX :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction FLOAT./ :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction CODE.SWAP :close  0}{:instruction CODE.CONTAINER :close  0}{:instruction FLOAT.% :close  0}",
  "program": "(CODE.SWAP CODE.EXTRACT INTEGER.MAX FLOAT.YANKDUP FLOAT./ EXEC.YANKDUP CODE.SWAP CODE.CONTAINER FLOAT.% )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 57,
  "genome": "{:instruction CODE.ROT :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction BOOLEAN.POP :close  4}{:instruction CODE.ATOM :close  0}{:instruction BOOLEAN.DUP :close  0}{:instruction INTEGER.= :close  4}{:instruction FLOAT.* :close  0}{:instruction CODE.ATOM :close  4}{:instruction EXEC.YANK :close  0}",
  "program": "(CODE.ROT CODE.STACKDEPTH BOOLEAN.POP CODE.ATOM BOOLEAN.DUP INTEGER.= FLOAT.* CODE.ATOM EXEC.YANK )",
  "result-set": { "integer-stack": {"size": 1 "data" : {1} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 2 "data" : {0 0} } }
}
{ "id": 59,
  "genome": "{:instruction BOOLEAN.YANK :close  0}{:instruction EXEC.FLUSH :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction FLOAT.= :close  4}{:instruction BOOLEAN.NOT :close  0}{:instruction BOOLEAN.NAND :close  0}{:instruction CODE.SIZE :close  0}{:instruction INTEGER.< :close  0}{:instruction EXEC.DO*WHILE :close  0}",
  "program": "(BOOLEAN.YANK EXEC.FLUSH BOOLEAN.AND FLOAT.= BOOLEAN.NOT BOOLEAN.NAND CODE.SIZE INTEGER.< EXEC.DO*WHILE ())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 60,
  "genome": "{:instruction EXEC.WHEN :close  0}{:instruction EXEC.YANK :close  0}{:instruction CODE.DO*TIMES :close  4}{:instruction EXEC.SWAP :close  0}{:instruction FLOAT./ :close  0}{:instruction CODE.= :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction FLOAT.+ :close  0}{:instruction CODE.INSERT :close  4}{:instruction EXEC.STACKDEPTH :close  4}{:instruction INTEGER.POP :close  0}{:instruction EXEC.DO*WHILE :close  4}{:instruction EXEC.DO*COUNT :close  0}{:instruction INTEGER.FLUSH :close  0}{:instruction FLOAT.% :close  0}{:instruction CODE.YANKDUP :close  0}{:instruction EXEC.S :close  4}{:instruction INTEGER.SWAP :close  0}{:instruction EXEC.YANKDUP :close  4}{:instruction BOOLEAN.FLUSH :close  0}{:instruction BOOLEAN.DUP :close  4}{:instruction EXEC.ROT :close  0}{:instruction -0.73287070070693061 :close  0}{:instruction FLOAT.YANKDUP :close  4}{:instruction EXEC.WHEN :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction CODE.EXTRACT :close  4}{:instruction CODE.CAR :close  0}{:instruction CODE.POSITION :close  4}{:instruction EXEC.YANK :close  4}{:instruction INTEGER.+ :close  0}{:instruction FLOAT.SIN :close  0}{:instruction INTEGER.% :close  4}",
  "program": "(EXEC.WHEN (EXEC.YANK CODE.DO*TIMES )EXEC.SWAP (FLOAT./ CODE.= EXEC.DO*WHILE (FLOAT.+ CODE.INSERT ))()EXEC.STACKDEPTH INTEGER.POP EXEC.DO*WHILE ()EXEC.DO*COUNT (INTEGER.FLUSH FLOAT.% CODE.YANKDUP EXEC.S ()()())INTEGER.SWAP EXEC.YANKDUP BOOLEAN.FLUSH BOOLEAN.DUP EXEC.ROT (-0.73287070070693061 FLOAT.YANKDUP )()()EXEC.WHEN (BOOLEAN.NOR CODE.EXTRACT )CODE.CAR CODE.POSITION EXEC.YANK INTEGER.+ FLOAT.SIN INTEGER.% )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 1 "data" : {-0.669006} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 62,
  "genome": "{:instruction FLOAT.ROT :close  0}{:instruction BOOLEAN.NAND :close  0}{:instruction BOOLEAN.YANK :close  4}{:instruction CODE.DO* :close  4}{:instruction EXEC.= :close  0}{:instruction FLOAT.FROMDATA :close  0}{:instruction CODE.CONS :close  0}{:instruction CODE.SIZE :close  0}{:instruction TRUE :close  4}{:instruction FLOAT.= :close  0}{:instruction CODE.NOOP :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction CODE.FROMFLOAT :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction CODE.DO :close  0}{:instruction BOOLEAN.SWAP :close  0}{:instruction CODE.QUOTE :close  0}{:instruction CODE.APPEND :close  0}{:instruction CODE.EXTRACT :close  0}{:instruction CODE.FLUSH :close  4}{:instruction CODE.DO* :close  0}{:instruction FLOAT.< :close  4}{:instruction FLOAT.POP :close  4}{:instruction FLOAT.COS :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction BOOLEAN.POP :close  4}{:instruction CODE.DO :close  4}{:instruction BOOLEAN.NAND :close  0}{:instruction EXEC.YANK :close  0}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction INTEGER.- :close  4}{:instruction FLOAT.FROMDATA :close  0}{:instruction FLOAT.MAX :close  0}{:instruction EXEC.K :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction EXEC.DO*WHILE :close  4}",
  "program": "(FLOAT.ROT BOOLEAN.NAND BOOLEAN.YANK CODE.DO* EXEC.= FLOAT.FROMDATA CODE.CONS CODE.SIZE TRUE FLOAT.= CODE.NOOP EXEC.DO*RANGE (INTEGER.STACKDEPTH CODE.FROMFLOAT BOOLEAN.FROMFLOAT BOOLEAN.FLUSH CODE.DO BOOLEAN.SWAP CODE.QUOTE (CODE.APPEND CODE.EXTRACT CODE.FLUSH ))CODE.DO* FLOAT.< FLOAT.POP FLOAT.COS BOOLEAN.FROMFLOAT BOOLEAN.POP CODE.DO BOOLEAN.NAND EXEC.YANK FLOAT.FROMBOOLEAN INTEGER.- FLOAT.FROMDATA FLOAT.MAX EXEC.K (BOOLEAN.AND EXEC.DO*WHILE ())())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 63,
  "genome": "{:instruction FLOAT.POP :close  0}{:instruction EXEC.K :close  0}{:instruction BOOLEAN.NOT :close  0}",
  "program": "(FLOAT.POP EXEC.K (BOOLEAN.NOT )())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 65,
  "genome": "{:instruction EXEC.WHILE :close  0}{:instruction CODE.DO* :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction BOOLEAN.FROMFLOAT :close  4}{:instruction INTEGER.SHOVE :close  0}{:instruction CODE.MEMBER :close  4}{:instruction CODE.DO*RANGE :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction INTEGER.ROT :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction CODE.CAR :close  0}{:instruction CODE.DO*RANGE :close  0}{:instruction CODE.SWAP :close  4}{:instruction BOOLEAN.SWAP :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction CODE.NOOP :close  0}{:instruction INTEGER.SWAP :close  4}{:instruction FLOAT.SHOVE :close  0}{:instruction EXEC.DO*COUNT :close  4}{:instruction INTEGER.< :close  4}{:instruction BOOLEAN.NOT :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction BOOLEAN.NAND :close  0}{:instruction FLOAT./ :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction EXEC.DUP :close  4}{:instruction FLOAT.* :close  0}{:instruction FLOAT.POP :close  0}{:instruction CODE.DO*RANGE :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction INTEGER.MAX :close  0}{:instruction FLOAT.* :close  0}{:instruction CODE.CAR :close  0}{:instruction FLOAT.* :close  0}{:instruction INTEGER./ :close  4}{:instruction INTEGER.+ :close  0}{:instruction CODE.CONS :close  0}{:instruction CODE.POSITION :close  0}{:instruction INTEGER.POP :close  0}{:instruction INTEGER.MAX :close  0}{:instruction CODE.DO* :close  4}{:instruction CODE.LENGTH :close  0}{:instruction CODE.ROT :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction CODE.DO* :close  0}{:instruction CODE.DO*RANGE :close  0}",
  "program": "(EXEC.WHILE (CODE.DO* BOOLEAN.STACKDEPTH BOOLEAN.FROMFLOAT )INTEGER.SHOVE CODE.MEMBER CODE.DO*RANGE EXEC.SHOVE (INTEGER.ROT CODE.DO*TIMES CODE.CAR CODE.DO*RANGE CODE.SWAP )BOOLEAN.SWAP EXEC.DO*COUNT (CODE.NOOP INTEGER.SWAP )FLOAT.SHOVE EXEC.DO*COUNT ()INTEGER.< BOOLEAN.NOT BOOLEAN.AND BOOLEAN.NAND FLOAT./ CODE.FROMBOOLEAN EXEC.DUP ()FLOAT.* FLOAT.POP CODE.DO*RANGE EXEC.SHOVE (INTEGER.MAX FLOAT.* CODE.CAR FLOAT.* INTEGER./ )INTEGER.+ CODE.CONS CODE.POSITION INTEGER.POP INTEGER.MAX CODE.DO* CODE.LENGTH CODE.ROT BOOLEAN.ROT CODE.DO* CODE.DO*RANGE )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 66,
  "genome": "{:instruction CODE.NULL :close  0}{:instruction CODE.NOOP :close  0}{:instruction EXEC.K :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction CODE.CONS :close  4}{:instruction INTEGER.MAX :close  0}{:instruction CODE.NOOP :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction CODE.SWAP :close  0}{:instruction FLOAT.FROMINTEGER :close  0}{:instruction FLOAT.MAX :close  0}{:instruction CODE.DUP :close  0}{:instruction EXEC.DUP :close  0}{:instruction INTEGER.YANKDUP :close  4}{:instruction EXEC.WHILE :close  0}{:instruction INTEGER.* :close  4}{:instruction FLOAT.SWAP :close  0}{:instruction 0.80713106081987052 :close  4}{:instruction FLOAT.FROMDATA :close  0}{:instruction BOOLEAN.= :close  0}{:instruction CODE.SHOVE :close  0}{:instruction FLOAT.FROMINTEGER :close  0}{:instruction CODE.YANK :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction BOOLEAN.NOT :close  0}{:instruction CODE.ATOM :close  0}{:instruction CODE.SHOVE :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction CODE.QUOTE :close  4}{:instruction EXEC.FLUSH :close  0}{:instruction CODE.NTH :close  0}{:instruction EXEC.YANKDUP :close  4}{:instruction CODE.MEMBER :close  4}{:instruction CODE.NOOP :close  0}{:instruction BOOLEAN.= :close  0}{:instruction CODE.CDR :close  4}{:instruction CODE.CONS :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction EXEC.POP :close  4}{:instruction 2541 :close  0}{:instruction EXEC.K :close  0}{:instruction CODE.CONS :close  0}",
  "program": "(CODE.NULL CODE.NOOP EXEC.K (EXEC.DO*COUNT (FLOAT.FROMBOOLEAN BOOLEAN.YANK CODE.CONS ))()INTEGER.MAX CODE.NOOP BOOLEAN.FROMFLOAT CODE.SWAP FLOAT.FROMINTEGER FLOAT.MAX CODE.DUP EXEC.DUP (INTEGER.YANKDUP )EXEC.WHILE (INTEGER.* )FLOAT.SWAP 0.80713106081987052 FLOAT.FROMDATA BOOLEAN.= CODE.SHOVE FLOAT.FROMINTEGER CODE.YANK CODE.NTHCDR BOOLEAN.NOT CODE.ATOM CODE.SHOVE FLOAT.SHOVE FLOAT.STACKDEPTH CODE.QUOTE ()EXEC.FLUSH CODE.NTH EXEC.YANKDUP CODE.MEMBER CODE.NOOP BOOLEAN.= CODE.CDR CODE.CONS CODE.FROMINTEGER EXEC.POP ()2541 EXEC.K (CODE.CONS )())",
  "result-set": { "integer-stack": {"size": 1 "data" : {1} },
                  "float-stack": {"size": 1 "data" : {0.807131} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 67,
  "genome": "{:instruction FLOAT.FROMINTEGER :close  0}{:instruction CODE.NULL :close  0}{:instruction FLOAT.MAX :close  0}{:instruction CODE.IF :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction 0.048507104406251278 :close  0}{:instruction INTEGER.SWAP :close  4}{:instruction FLOAT.* :close  4}{:instruction CODE.FROMINTEGER :close  4}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction FLOAT.POP :close  0}{:instruction EXEC.STACKDEPTH :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction CODE.FROMFLOAT :close  0}{:instruction BOOLEAN.NAND :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction FLOAT.FROMDATA :close  0}{:instruction BOOLEAN.= :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction CODE.STACKDEPTH :close  4}{:instruction CODE.DO :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction CODE.ROT :close  0}{:instruction EXEC.WHILE :close  4}{:instruction CODE.ATOM :close  0}{:instruction CODE.CDR :close  4}{:instruction CODE.YANK :close  0}{:instruction BOOLEAN.NOT :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction EXEC.POP :close  4}{:instruction BOOLEAN.SWAP :close  0}",
  "program": "(FLOAT.FROMINTEGER CODE.NULL FLOAT.MAX CODE.IF INTEGER.SHOVE FLOAT.SHOVE FLOAT.SHOVE 0.048507104406251278 INTEGER.SWAP FLOAT.* CODE.FROMINTEGER INTEGER.FROMFLOAT FLOAT.POP EXEC.STACKDEPTH EXEC.YANKDUP CODE.FROMFLOAT BOOLEAN.NAND FLOAT.YANKDUP BOOLEAN.YANK FLOAT.FROMDATA BOOLEAN.= INTEGER.SHOVE CODE.STACKDEPTH CODE.DO EXEC.YANKDUP CODE.ROT EXEC.WHILE ()CODE.ATOM CODE.CDR CODE.YANK BOOLEAN.NOT BOOLEAN.FROMINTEGER EXEC.POP ()BOOLEAN.SWAP )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 68,
  "genome": "{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction 0.50829227164115109 :close  0}{:instruction BOOLEAN.NOR :close  4}{:instruction EXEC.YANKDUP :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction INTEGER.= :close  0}",
  "program": "(INTEGER.FROMBOOLEAN 0.50829227164115109 BOOLEAN.NOR EXEC.YANKDUP CODE.STACKDEPTH INTEGER.= )",
  "result-set": { "integer-stack": {"size": 1 "data" : {1} },
                  "float-stack": {"size": 1 "data" : {0.508292} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 69,
  "genome": "{:instruction FLOAT.COS :close  4}{:instruction EXEC.DUP :close  4}{:instruction CODE.= :close  0}{:instruction CODE.SIZE :close  4}{:instruction CODE.CONS :close  0}{:instruction CODE.NULL :close  0}{:instruction CODE.ROT :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction FLOAT.SIN :close  0}{:instruction BOOLEAN.SWAP :close  4}{:instruction CODE.NTH :close  0}{:instruction CODE.FLUSH :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction CODE.SHOVE :close  4}{:instruction CODE.DO*RANGE :close  4}{:instruction EXEC.K :close  4}{:instruction CODE.= :close  4}{:instruction FLOAT.FLUSH :close  0}{:instruction FLOAT.< :close  0}{:instruction EXEC.SWAP :close  0}{:instruction CODE.POP :close  0}{:instruction BOOLEAN.FROMINTEGER :close  4}{:instruction 3419 :close  0}{:instruction CODE.NULL :close  4}{:instruction FLOAT.MAX :close  4}{:instruction INTEGER.YANKDUP :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction INTEGER.DUP :close  0}{:instruction CODE.DO :close  4}{:instruction BOOLEAN.YANK :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction FLOAT./ :close  0}",
  "program": "(FLOAT.COS EXEC.DUP ()CODE.= CODE.SIZE CODE.CONS CODE.NULL CODE.ROT EXEC.SHOVE (FLOAT.SIN BOOLEAN.SWAP )CODE.NTH CODE.FLUSH INTEGER.SHOVE CODE.SHOVE CODE.DO*RANGE EXEC.K ()()CODE.= FLOAT.FLUSH FLOAT.< EXEC.SWAP (CODE.POP BOOLEAN.FROMINTEGER )()3419 CODE.NULL FLOAT.MAX INTEGER.YANKDUP BOOLEAN.STACKDEPTH INTEGER.DUP CODE.DO BOOLEAN.YANK CODE.DO*TIMES FLOAT./ )",
  "result-set": { "integer-stack": {"size": 3 "data" : {0 0 3419} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 70,
  "genome": "{:instruction CODE.NTH :close  0}{:instruction BOOLEAN.NAND :close  4}{:instruction FLOAT.MAX :close  0}{:instruction FLOAT.> :close  0}{:instruction BOOLEAN.NOT :close  0}{:instruction INTEGER.POP :close  4}{:instruction FLOAT.FLUSH :close  0}{:instruction INTEGER.DUP :close  4}{:instruction INTEGER.* :close  0}{:instruction CODE.LIST :close  0}{:instruction INTEGER.DUP :close  4}{:instruction CODE.INSERT :close  4}{:instruction INTEGER.FLUSH :close  0}{:instruction FLOAT.< :close  0}{:instruction BOOLEAN.= :close  0}{:instruction EXEC.FLUSH :close  0}",
  "program": "(CODE.NTH BOOLEAN.NAND FLOAT.MAX FLOAT.> BOOLEAN.NOT INTEGER.POP FLOAT.FLUSH INTEGER.DUP INTEGER.* CODE.LIST INTEGER.DUP CODE.INSERT INTEGER.FLUSH FLOAT.< BOOLEAN.= EXEC.FLUSH )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 71,
  "genome": "{:instruction INTEGER.- :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction EXEC.SWAP :close  0}{:instruction CODE.FROMFLOAT :close  0}{:instruction EXEC.WHEN :close  0}{:instruction FLOAT.YANK :close  0}{:instruction INTEGER.POP :close  0}{:instruction FALSE :close  0}{:instruction FLOAT.FROMDATA :close  0}{:instruction CODE.INSERT :close  0}{:instruction CODE.INSERT :close  4}{:instruction INTEGER.= :close  0}{:instruction CODE.CONS :close  0}{:instruction FLOAT.+ :close  4}{:instruction EXEC.S :close  0}{:instruction FLOAT.FROMBOOLEAN :close  4}{:instruction CODE.IF :close  4}{:instruction CODE.CONS :close  0}{:instruction CODE.EXTRACT :close  0}{:instruction BOOLEAN.YANK :close  4}{:instruction EXEC.DO*RANGE :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction CODE.DO :close  0}{:instruction EXEC.DO*WHILE :close  4}{:instruction FLOAT.> :close  4}{:instruction BOOLEAN.OR :close  0}{:instruction BOOLEAN.SWAP :close  0}{:instruction INTEGER.DUP :close  4}{:instruction EXEC.DUP :close  0}{:instruction EXEC.WHILE :close  0}{:instruction FLOAT.ROT :close  0}{:instruction EXEC.DUP :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction BOOLEAN.YANKDUP :close  0}{:instruction CODE.NULL :close  4}{:instruction INTEGER.% :close  0}{:instruction EXEC.POP :close  0}{:instruction FLOAT.> :close  0}{:instruction CODE.NOOP :close  0}{:instruction FLOAT.COS :close  0}",
  "program": "(INTEGER.- INTEGER.YANKDUP EXEC.SWAP (CODE.FROMFLOAT EXEC.WHEN (FLOAT.YANK INTEGER.POP FALSE FLOAT.FROMDATA CODE.INSERT CODE.INSERT ))()INTEGER.= CODE.CONS FLOAT.+ EXEC.S (FLOAT.FROMBOOLEAN )()()CODE.IF CODE.CONS CODE.EXTRACT BOOLEAN.YANK EXEC.DO*RANGE (FLOAT.YANKDUP BOOLEAN.YANK CODE.DO EXEC.DO*WHILE ())FLOAT.> BOOLEAN.OR BOOLEAN.SWAP INTEGER.DUP EXEC.DUP (EXEC.WHILE (FLOAT.ROT EXEC.DUP (FLOAT.SHOVE BOOLEAN.YANKDUP CODE.NULL )))INTEGER.% EXEC.POP (FLOAT.> CODE.NOOP FLOAT.COS ))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 2555 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 72,
  "genome": "{:instruction CODE.IF :close  4}{:instruction CODE.NULL :close  0}{:instruction EXEC.SWAP :close  0}{:instruction BOOLEAN.DUP :close  0}{:instruction INTEGER.ROT :close  0}{:instruction CODE.FROMINTEGER :close  4}{:instruction EXEC.= :close  4}{:instruction CODE.LENGTH :close  4}{:instruction FLOAT.< :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction INTEGER.< :close  4}{:instruction INTEGER.FLUSH :close  0}{:instruction INTEGER.YANK :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction FLOAT.TAN :close  4}{:instruction FALSE :close  0}{:instruction BOOLEAN.= :close  0}{:instruction BOOLEAN.POP :close  0}{:instruction CODE.= :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction CODE.EXTRACT :close  0}{:instruction BOOLEAN.YANKDUP :close  4}{:instruction FLOAT./ :close  0}{:instruction EXEC.YANK :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction EXEC.WHEN :close  0}{:instruction INTEGER./ :close  4}{:instruction INTEGER.ROT :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction EXEC.FLUSH :close  0}{:instruction EXEC.S :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction CODE.DO*TIMES :close  0}",
  "program": "(CODE.IF CODE.NULL EXEC.SWAP (BOOLEAN.DUP INTEGER.ROT CODE.FROMINTEGER )()EXEC.= CODE.LENGTH FLOAT.< BOOLEAN.OR BOOLEAN.FLUSH INTEGER.< INTEGER.FLUSH INTEGER.YANK BOOLEAN.YANK FLOAT.TAN FALSE BOOLEAN.= BOOLEAN.POP CODE.= EXEC.DO*TIMES (EXEC.SHOVE (CODE.EXTRACT BOOLEAN.YANKDUP ))FLOAT./ EXEC.YANK CODE.DO*COUNT BOOLEAN.FLUSH EXEC.WHEN (INTEGER./ )INTEGER.ROT CODE.FROMINTEGER EXEC.FLUSH EXEC.S (INTEGER.SWAP CODE.DO*COUNT CODE.INSTRUCTIONS CODE.DO*TIMES )()())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 73,
  "genome": "{:instruction BOOLEAN.FLUSH :close  0}{:instruction CODE.CAR :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction EXEC.YANK :close  0}{:instruction CODE.= :close  0}{:instruction FLOAT.- :close  4}{:instruction INTEGER.POP :close  4}{:instruction CODE.ROT :close  0}{:instruction -2313 :close  4}{:instruction CODE.NTHCDR :close  0}{:instruction INTEGER.> :close  0}{:instruction CODE.YANKDUP :close  4}{:instruction CODE.DO*TIMES :close  0}",
  "program": "(BOOLEAN.FLUSH CODE.CAR EXEC.DO*COUNT (EXEC.YANK CODE.= FLOAT.- )INTEGER.POP CODE.ROT -2313 CODE.NTHCDR INTEGER.> CODE.YANKDUP CODE.DO*TIMES )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 74,
  "genome": "{:instruction EXEC.ROT :close  0}{:instruction FLOAT.SIN :close  0}{:instruction CODE.CDR :close  4}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction CODE.CDR :close  4}{:instruction FLOAT.MAX :close  0}{:instruction EXEC.DO*RANGE :close  4}{:instruction BOOLEAN.POP :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction INTEGER.= :close  0}{:instruction INTEGER.- :close  4}{:instruction INTEGER.MAX :close  0}{:instruction FLOAT.YANK :close  0}{:instruction FLOAT.SIN :close  0}{:instruction EXEC.DO*WHILE :close  4}{:instruction CODE.SIZE :close  0}{:instruction EXEC.= :close  0}{:instruction EXEC.STACKDEPTH :close  0}{:instruction CODE.DO :close  4}{:instruction CODE.ATOM :close  0}{:instruction CODE.MEMBER :close  0}{:instruction INTEGER.% :close  0}{:instruction CODE.DUP :close  0}{:instruction FLOAT.FROMDATA :close  0}{:instruction INTEGER.YANK :close  0}{:instruction INTEGER./ :close  0}{:instruction INTEGER.% :close  0}{:instruction EXEC.POP :close  0}{:instruction CODE.IF :close  4}{:instruction FLOAT.POP :close  0}{:instruction CODE.DO*RANGE :close  0}{:instruction INTEGER.- :close  0}{:instruction CODE.QUOTE :close  0}{:instruction BOOLEAN.POP :close  0}{:instruction FLOAT.* :close  0}{:instruction CODE.YANKDUP :close  0}{:instruction EXEC.YANK :close  0}{:instruction FLOAT.DUP :close  0}{:instruction EXEC.YANK :close  0}{:instruction INTEGER.POP :close  0}{:instruction INTEGER.+ :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction INTEGER.YANK :close  0}{:instruction CODE.FROMBOOLEAN :close  0}",
  "program": "(EXEC.ROT (FLOAT.SIN CODE.CDR )()()INTEGER.FROMFLOAT CODE.CDR FLOAT.MAX EXEC.DO*RANGE ()BOOLEAN.POP INTEGER.SWAP INTEGER.= INTEGER.- INTEGER.MAX FLOAT.YANK FLOAT.SIN EXEC.DO*WHILE ()CODE.SIZE EXEC.= EXEC.STACKDEPTH CODE.DO CODE.ATOM CODE.MEMBER INTEGER.% CODE.DUP FLOAT.FROMDATA INTEGER.YANK INTEGER./ INTEGER.% EXEC.POP (CODE.IF )FLOAT.POP CODE.DO*RANGE INTEGER.- CODE.QUOTE (BOOLEAN.POP FLOAT.* CODE.YANKDUP EXEC.YANK FLOAT.DUP EXEC.YANK INTEGER.POP INTEGER.+ INTEGER.SWAP INTEGER.YANK CODE.FROMBOOLEAN ))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 75,
  "genome": "{:instruction CODE.ATOM :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction EXEC.S :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction INTEGER.MAX :close  0}{:instruction FLOAT.STACKDEPTH :close  4}{:instruction CODE.NULL :close  4}{:instruction BOOLEAN.AND :close  0}{:instruction FLOAT.< :close  0}{:instruction EXEC.K :close  0}{:instruction FLOAT.% :close  0}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction FLOAT.> :close  0}{:instruction INTEGER.ROT :close  0}{:instruction INTEGER.STACKDEPTH :close  0}",
  "program": "(CODE.ATOM FLOAT.YANKDUP EXEC.S (BOOLEAN.AND INTEGER.MAX FLOAT.STACKDEPTH )()()CODE.NULL BOOLEAN.AND FLOAT.< EXEC.K (FLOAT.% FLOAT.FROMBOOLEAN FLOAT.> INTEGER.ROT INTEGER.STACKDEPTH )())",
  "result-set": { "integer-stack": {"size": 2 "data" : {1 0} },
                  "float-stack": {"size": 1 "data" : {0} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 76,
  "genome": "{:instruction EXEC.WHILE :close  4}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction CODE.FLUSH :close  0}{:instruction EXEC.IF :close  0}{:instruction CODE.INSERT :close  0}{:instruction INTEGER.MIN :close  0}{:instruction BOOLEAN.YANKDUP :close  0}{:instruction FLOAT.> :close  0}{:instruction BOOLEAN.SWAP :close  0}{:instruction EXEC.ROT :close  0}{:instruction FLOAT.+ :close  4}{:instruction INTEGER.MIN :close  0}{:instruction CODE.INSERT :close  0}{:instruction CODE.SIZE :close  0}{:instruction CODE.CDR :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction FLOAT.MIN :close  0}{:instruction CODE.NTH :close  4}{:instruction CODE.DO*COUNT :close  0}{:instruction CODE.ROT :close  0}{:instruction CODE.ATOM :close  0}{:instruction INTEGER./ :close  0}{:instruction EXEC.SWAP :close  0}{:instruction CODE.POP :close  0}{:instruction CODE.DO* :close  0}{:instruction CODE.DO* :close  4}{:instruction FLOAT.YANKDUP :close  0}{:instruction BOOLEAN.ROT :close  4}{:instruction BOOLEAN.NOT :close  0}{:instruction FLOAT.COS :close  0}{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction BOOLEAN.OR :close  4}{:instruction FLOAT.* :close  0}{:instruction EXEC.YANK :close  4}{:instruction CODE.ATOM :close  0}{:instruction CODE.LIST :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction CODE.MEMBER :close  4}{:instruction EXEC.WHILE :close  0}{:instruction FLOAT.= :close  4}{:instruction FLOAT.FLUSH :close  0}{:instruction INTEGER.FLUSH :close  0}",
  "program": "(EXEC.WHILE ()BOOLEAN.FROMFLOAT CODE.FLUSH EXEC.IF (CODE.INSERT INTEGER.MIN BOOLEAN.YANKDUP FLOAT.> BOOLEAN.SWAP EXEC.ROT (FLOAT.+ )()())(INTEGER.MIN CODE.INSERT CODE.SIZE CODE.CDR EXEC.DO*COUNT (FLOAT.MIN CODE.NTH ))CODE.DO*COUNT CODE.ROT CODE.ATOM INTEGER./ EXEC.SWAP (CODE.POP CODE.DO* CODE.DO* )()FLOAT.YANKDUP BOOLEAN.ROT BOOLEAN.NOT FLOAT.COS INTEGER.FROMBOOLEAN BOOLEAN.OR FLOAT.* EXEC.YANK CODE.ATOM CODE.LIST CODE.FROMINTEGER CODE.MEMBER EXEC.WHILE (FLOAT.= )FLOAT.FLUSH INTEGER.FLUSH )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 78,
  "genome": "{:instruction BOOLEAN.FLUSH :close  0}{:instruction BOOLEAN.NOT :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction CODE.EXTRACT :close  0}{:instruction INTEGER.YANK :close  4}{:instruction CODE.DO*TIMES :close  4}{:instruction BOOLEAN.NAND :close  4}{:instruction INTEGER.YANKDUP :close  0}{:instruction CODE.LENGTH :close  0}{:instruction INTEGER.SHOVE :close  4}{:instruction EXEC.= :close  4}{:instruction FLOAT.COS :close  0}{:instruction FLOAT.FROMBOOLEAN :close  4}{:instruction INTEGER.> :close  0}{:instruction INTEGER.- :close  0}{:instruction EXEC.STACKDEPTH :close  4}{:instruction INTEGER./ :close  4}{:instruction CODE.SWAP :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction CODE.DUP :close  0}{:instruction CODE.LIST :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction INTEGER.MAX :close  0}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction FLOAT.* :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction INTEGER.POP :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction BOOLEAN.POP :close  4}{:instruction CODE.FROMINTEGER :close  4}{:instruction CODE.POSITION :close  4}{:instruction 0.72635745204201840 :close  0}{:instruction FLOAT.SIN :close  0}{:instruction CODE.CONTAINER :close  0}{:instruction FLOAT.POP :close  4}{:instruction INTEGER.- :close  0}{:instruction CODE.APPEND :close  0}{:instruction FLOAT.+ :close  4}{:instruction FLOAT.YANKDUP :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction BOOLEAN.STACKDEPTH :close  4}{:instruction BOOLEAN.AND :close  0}",
  "program": "(BOOLEAN.FLUSH BOOLEAN.NOT INTEGER.SHOVE BOOLEAN.YANK CODE.EXTRACT INTEGER.YANK CODE.DO*TIMES BOOLEAN.NAND INTEGER.YANKDUP CODE.LENGTH INTEGER.SHOVE EXEC.= FLOAT.COS FLOAT.FROMBOOLEAN INTEGER.> INTEGER.- EXEC.STACKDEPTH INTEGER./ CODE.SWAP CODE.FROMINTEGER FLOAT.SWAP CODE.DUP CODE.LIST CODE.DO*COUNT INTEGER.MAX CODE.INSTRUCTIONS BOOLEAN.ROT FLOAT.* CODE.NTHCDR FLOAT.YANKDUP INTEGER.POP BOOLEAN.ROT CODE.INSTRUCTIONS BOOLEAN.POP CODE.FROMINTEGER CODE.POSITION 0.72635745204201840 FLOAT.SIN CODE.CONTAINER FLOAT.POP INTEGER.- CODE.APPEND FLOAT.+ FLOAT.YANKDUP EXEC.DO*RANGE (BOOLEAN.STACKDEPTH )BOOLEAN.AND )",
  "result-set": { "integer-stack": {"size": 2 "data" : {0 -1} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 79,
  "genome": "{:instruction CODE.YANKDUP :close  0}{:instruction CODE.CDR :close  0}{:instruction CODE.LIST :close  4}{:instruction FLOAT.+ :close  4}{:instruction BOOLEAN.NOT :close  0}{:instruction CODE.ROT :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction EXEC.ROT :close  4}{:instruction CODE.NTHCDR :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction CODE.QUOTE :close  0}{:instruction CODE.DO* :close  0}{:instruction CODE.EXTRACT :close  4}{:instruction FLOAT.SHOVE :close  4}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction BOOLEAN.FLUSH :close  4}{:instruction EXEC.SHOVE :close  4}{:instruction CODE.ATOM :close  0}{:instruction INTEGER.MIN :close  0}{:instruction INTEGER.POP :close  4}{:instruction BOOLEAN.NOT :close  0}{:instruction BOOLEAN.NOR :close  4}{:instruction FLOAT.FROMBOOLEAN :close  4}{:instruction BOOLEAN.AND :close  4}{:instruction INTEGER.> :close  4}{:instruction BOOLEAN.YANK :close  0}{:instruction INTEGER.YANK :close  0}{:instruction INTEGER./ :close  4}{:instruction FLOAT.FROMINTEGER :close  0}{:instruction CODE.INSERT :close  0}{:instruction EXEC.POP :close  4}{:instruction FLOAT.POP :close  0}{:instruction CODE.NTH :close  0}{:instruction FLOAT.+ :close  0}{:instruction CODE.FROMFLOAT :close  0}{:instruction INTEGER.> :close  0}{:instruction CODE.EXTRACT :close  0}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction CODE.DO*COUNT :close  4}{:instruction CODE.LENGTH :close  0}{:instruction BOOLEAN.STACKDEPTH :close  4}{:instruction FLOAT.% :close  0}{:instruction FLOAT.FROMDATA :close  0}{:instruction EXEC.DO*COUNT :close  0}",
  "program": "(CODE.YANKDUP CODE.CDR CODE.LIST FLOAT.+ BOOLEAN.NOT CODE.ROT INTEGER.SWAP EXEC.ROT ()()()CODE.NTHCDR EXEC.DO*WHILE (CODE.QUOTE (CODE.DO* CODE.EXTRACT ))FLOAT.SHOVE FLOAT.STACKDEPTH INTEGER.SHOVE CODE.FROMBOOLEAN BOOLEAN.FLUSH EXEC.SHOVE ()CODE.ATOM INTEGER.MIN INTEGER.POP BOOLEAN.NOT BOOLEAN.NOR FLOAT.FROMBOOLEAN BOOLEAN.AND INTEGER.> BOOLEAN.YANK INTEGER.YANK INTEGER./ FLOAT.FROMINTEGER CODE.INSERT EXEC.POP ()FLOAT.POP CODE.NTH FLOAT.+ CODE.FROMFLOAT INTEGER.> CODE.EXTRACT FLOAT.STACKDEPTH CODE.DO*COUNT CODE.LENGTH BOOLEAN.STACKDEPTH FLOAT.% FLOAT.FROMDATA EXEC.DO*COUNT ())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 1 "data" : {1} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 80,
  "genome": "{:instruction FLOAT.YANK :close  0}{:instruction CODE.POSITION :close  0}{:instruction -0.99772702390275125 :close  0}{:instruction CODE.EXTRACT :close  0}{:instruction CODE.FLUSH :close  0}{:instruction CODE.CAR :close  0}{:instruction CODE.SWAP :close  4}{:instruction -0.93736869933488054 :close  0}{:instruction INTEGER.* :close  0}{:instruction EXEC.S :close  0}{:instruction FLOAT./ :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction FLOAT.COS :close  0}{:instruction FLOAT.ROT :close  4}{:instruction CODE.CONTAINER :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction BOOLEAN.POP :close  0}{:instruction FLOAT.MAX :close  0}{:instruction FLOAT.* :close  4}{:instruction TRUE :close  0}{:instruction INTEGER.YANK :close  0}{:instruction CODE.DO*RANGE :close  0}{:instruction CODE.YANK :close  0}{:instruction CODE.YANKDUP :close  4}{:instruction CODE.DO*RANGE :close  0}{:instruction BOOLEAN.SHOVE :close  0}{:instruction INTEGER.YANKDUP :close  4}{:instruction INTEGER.FROMFLOAT :close  4}{:instruction CODE.STACKDEPTH :close  0}{:instruction CODE.INSERT :close  0}{:instruction INTEGER.DUP :close  0}",
  "program": "(FLOAT.YANK CODE.POSITION -0.99772702390275125 CODE.EXTRACT CODE.FLUSH CODE.CAR CODE.SWAP -0.93736869933488054 INTEGER.* EXEC.S (FLOAT./ FLOAT.SWAP FLOAT.COS FLOAT.ROT )()()CODE.CONTAINER BOOLEAN.STACKDEPTH INTEGER.FROMFLOAT BOOLEAN.POP FLOAT.MAX FLOAT.* TRUE INTEGER.YANK CODE.DO*RANGE CODE.YANK CODE.YANKDUP CODE.DO*RANGE BOOLEAN.SHOVE INTEGER.YANKDUP INTEGER.FROMFLOAT CODE.STACKDEPTH CODE.INSERT INTEGER.DUP )",
  "result-set": { "integer-stack": {"size": 2 "data" : {0 0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {1} } }
}
{ "id": 82,
  "genome": "{:instruction EXEC.DO*TIMES :close  0}{:instruction CODE.DUP :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction CODE.LIST :close  0}{:instruction FALSE :close  0}{:instruction EXEC.SHOVE :close  4}{:instruction CODE.MEMBER :close  0}{:instruction BOOLEAN.YANKDUP :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction INTEGER.- :close  0}{:instruction CODE.SWAP :close  4}{:instruction INTEGER.% :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction EXEC.IF :close  0}{:instruction FLOAT.FROMINTEGER :close  0}{:instruction INTEGER.ROT :close  4}{:instruction EXEC.WHILE :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction EXEC.IF :close  0}{:instruction BOOLEAN.SHOVE :close  4}{:instruction 0.88829929146177578 :close  0}{:instruction CODE.CAR :close  0}{:instruction EXEC.= :close  0}{:instruction CODE.YANK :close  0}{:instruction INTEGER.= :close  0}{:instruction CODE.YANK :close  0}{:instruction INTEGER.< :close  4}{:instruction FLOAT.FLUSH :close  0}{:instruction FLOAT.- :close  0}{:instruction FLOAT.COS :close  0}{:instruction CODE.INSERT :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction FLOAT.> :close  0}{:instruction CODE.EXTRACT :close  0}{:instruction CODE.CAR :close  0}{:instruction EXEC.YANK :close  0}{:instruction FLOAT.+ :close  0}{:instruction CODE.MEMBER :close  0}",
  "program": "(EXEC.DO*TIMES (CODE.DUP BOOLEAN.FLUSH EXEC.DO*TIMES (CODE.LIST FALSE EXEC.SHOVE ()))CODE.MEMBER BOOLEAN.YANKDUP EXEC.DO*RANGE (INTEGER.- CODE.SWAP )INTEGER.% EXEC.DO*RANGE (EXEC.IF (FLOAT.FROMINTEGER INTEGER.ROT )())EXEC.WHILE (CODE.DO*TIMES EXEC.IF (BOOLEAN.SHOVE )())0.88829929146177578 CODE.CAR EXEC.= CODE.YANK INTEGER.= CODE.YANK INTEGER.< FLOAT.FLUSH FLOAT.- FLOAT.COS CODE.INSERT INTEGER.YANKDUP FLOAT.> CODE.EXTRACT CODE.CAR EXEC.YANK FLOAT.+ CODE.MEMBER )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 83,
  "genome": "{:instruction FLOAT.% :close  0}{:instruction INTEGER.+ :close  4}{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction INTEGER.* :close  0}{:instruction FLOAT.SHOVE :close  4}{:instruction BOOLEAN.POP :close  4}{:instruction EXEC.IF :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction CODE.EXTRACT :close  0}{:instruction CODE.ROT :close  0}{:instruction CODE.DO* :close  0}{:instruction CODE.= :close  0}{:instruction CODE.NULL :close  0}{:instruction CODE.MEMBER :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction EXEC.WHILE :close  0}{:instruction BOOLEAN.SHOVE :close  0}{:instruction CODE.APPEND :close  0}{:instruction INTEGER.% :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction FLOAT.YANK :close  0}{:instruction CODE.FROMFLOAT :close  0}{:instruction FLOAT.COS :close  0}{:instruction FLOAT.YANKDUP :close  4}{:instruction CODE.DO*COUNT :close  0}{:instruction CODE.SWAP :close  0}{:instruction INTEGER.YANK :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction FLOAT.< :close  0}{:instruction CODE.MEMBER :close  0}{:instruction INTEGER.* :close  0}{:instruction FLOAT.< :close  0}{:instruction FLOAT.POP :close  0}{:instruction INTEGER.= :close  0}{:instruction CODE.POSITION :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction CODE.ROT :close  0}{:instruction INTEGER.YANK :close  0}{:instruction CODE.CONS :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction FLOAT.TAN :close  0}{:instruction FLOAT.- :close  0}{:instruction CODE.LIST :close  0}{:instruction FLOAT.MIN :close  0}",
  "program": "(FLOAT.% INTEGER.+ INTEGER.FROMBOOLEAN INTEGER.* FLOAT.SHOVE BOOLEAN.POP EXEC.IF (INTEGER.SWAP CODE.EXTRACT CODE.ROT CODE.DO* CODE.= CODE.NULL CODE.MEMBER BOOLEAN.STACKDEPTH EXEC.WHILE (BOOLEAN.SHOVE CODE.APPEND INTEGER.% BOOLEAN.ROT FLOAT.YANK CODE.FROMFLOAT FLOAT.COS FLOAT.YANKDUP ))()CODE.DO*COUNT CODE.SWAP INTEGER.YANK CODE.FROMINTEGER FLOAT.< CODE.MEMBER INTEGER.* FLOAT.< FLOAT.POP INTEGER.= CODE.POSITION FLOAT.SHOVE CODE.ROT INTEGER.YANK CODE.CONS EXEC.YANKDUP EXEC.SHOVE (FLOAT.TAN FLOAT.- CODE.LIST FLOAT.MIN ))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 84,
  "genome": "{:instruction BOOLEAN.ROT :close  4}{:instruction BOOLEAN.STACKDEPTH :close  4}{:instruction FLOAT.SIN :close  4}{:instruction CODE.DUP :close  0}{:instruction CODE.POSITION :close  0}{:instruction CODE.DO* :close  4}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction INTEGER.= :close  0}{:instruction CODE.INSERT :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction INTEGER.POP :close  4}{:instruction BOOLEAN.= :close  0}{:instruction CODE.CDR :close  4}{:instruction CODE.FLUSH :close  0}{:instruction FLOAT.YANKDUP :close  4}{:instruction INTEGER.> :close  0}{:instruction FLOAT.FLUSH :close  0}{:instruction FLOAT.SWAP :close  4}{:instruction INTEGER.= :close  4}{:instruction BOOLEAN.SWAP :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction EXEC.FLUSH :close  0}{:instruction BOOLEAN.AND :close  4}{:instruction FLOAT./ :close  0}{:instruction FLOAT.COS :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction FLOAT.% :close  4}{:instruction BOOLEAN.FLUSH :close  0}{:instruction CODE.DUP :close  4}{:instruction CODE.CONTAINER :close  0}{:instruction CODE.DO*COUNT :close  4}",
  "program": "(BOOLEAN.ROT BOOLEAN.STACKDEPTH FLOAT.SIN CODE.DUP CODE.POSITION CODE.DO* BOOLEAN.FROMFLOAT INTEGER.= CODE.INSERT BOOLEAN.FROMINTEGER INTEGER.POP BOOLEAN.= CODE.CDR CODE.FLUSH FLOAT.YANKDUP INTEGER.> FLOAT.FLUSH FLOAT.SWAP INTEGER.= BOOLEAN.SWAP BOOLEAN.OR EXEC.FLUSH BOOLEAN.AND FLOAT./ FLOAT.COS INTEGER.STACKDEPTH FLOAT.% BOOLEAN.FLUSH CODE.DUP CODE.CONTAINER CODE.DO*COUNT )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 86,
  "genome": "{:instruction FLOAT.COS :close  0}",
  "program": "(FLOAT.COS )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 88,
  "genome": "{:instruction FLOAT.YANKDUP :close  0}{:instruction FLOAT.YANK :close  0}{:instruction BOOLEAN.FLUSH :close  4}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction CODE.DO* :close  0}{:instruction BOOLEAN.YANKDUP :close  0}{:instruction INTEGER.+ :close  4}{:instruction INTEGER.STACKDEPTH :close  4}{:instruction FLOAT.FLUSH :close  0}{:instruction BOOLEAN.SHOVE :close  0}{:instruction CODE.NTH :close  0}{:instruction FLOAT.FROMINTEGER :close  0}{:instruction CODE.SIZE :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction CODE.QUOTE :close  4}{:instruction FLOAT.- :close  4}{:instruction FLOAT.ROT :close  4}{:instruction INTEGER.POP :close  4}{:instruction BOOLEAN.POP :close  0}{:instruction INTEGER.SWAP :close  0}",
  "program": "(FLOAT.YANKDUP FLOAT.YANK BOOLEAN.FLUSH FLOAT.FROMBOOLEAN CODE.DO* BOOLEAN.YANKDUP INTEGER.+ INTEGER.STACKDEPTH FLOAT.FLUSH BOOLEAN.SHOVE CODE.NTH FLOAT.FROMINTEGER CODE.SIZE BOOLEAN.YANK CODE.QUOTE ()FLOAT.- FLOAT.ROT INTEGER.POP BOOLEAN.POP INTEGER.SWAP )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 89,
  "genome": "{:instruction INTEGER.DUP :close  4}{:instruction INTEGER.DUP :close  0}{:instruction FLOAT.YANK :close  4}{:instruction BOOLEAN.POP :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction CODE.IF :close  0}{:instruction FLOAT.ROT :close  4}{:instruction CODE.DUP :close  0}{:instruction FLOAT.POP :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction CODE.POSITION :close  4}{:instruction INTEGER./ :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction CODE.INSERT :close  4}{:instruction INTEGER.ROT :close  0}{:instruction CODE.EXTRACT :close  0}{:instruction CODE.NOOP :close  4}{:instruction CODE.POP :close  0}{:instruction EXEC.K :close  0}",
  "program": "(INTEGER.DUP INTEGER.DUP FLOAT.YANK BOOLEAN.POP BOOLEAN.FLUSH CODE.IF FLOAT.ROT CODE.DUP FLOAT.POP BOOLEAN.NOR CODE.POSITION INTEGER./ FLOAT.SWAP BOOLEAN.AND INTEGER.FROMBOOLEAN BOOLEAN.FROMINTEGER CODE.INSERT INTEGER.ROT CODE.EXTRACT CODE.NOOP CODE.POP EXEC.K ()())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {1} } }
}
{ "id": 90,
  "genome": "{:instruction TRUE :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction INTEGER.= :close  0}{:instruction CODE.POSITION :close  0}{:instruction CODE.LIST :close  0}{:instruction FLOAT.> :close  4}",
  "program": "(TRUE CODE.DO*COUNT FLOAT.SWAP INTEGER.= CODE.POSITION CODE.LIST FLOAT.> )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {1} } }
}
{ "id": 91,
  "genome": "{:instruction FLOAT.- :close  0}{:instruction CODE.ATOM :close  0}{:instruction FLOAT.YANKDUP :close  4}{:instruction EXEC.DO*TIMES :close  0}{:instruction FLOAT./ :close  0}{:instruction EXEC.DUP :close  0}{:instruction CODE.FROMINTEGER :close  4}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction EXEC.= :close  0}{:instruction BOOLEAN.DUP :close  0}{:instruction BOOLEAN.SWAP :close  0}{:instruction EXEC.= :close  0}{:instruction INTEGER.FROMFLOAT :close  4}{:instruction FLOAT.SWAP :close  0}{:instruction CODE.CAR :close  4}{:instruction CODE.SWAP :close  0}{:instruction CODE.EXTRACT :close  0}{:instruction CODE.POP :close  0}{:instruction INTEGER.* :close  4}{:instruction FLOAT.FROMDATA :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction BOOLEAN.AND :close  4}{:instruction BOOLEAN.OR :close  4}{:instruction FLOAT.- :close  0}{:instruction FLOAT.FROMDATA :close  4}{:instruction CODE.ATOM :close  0}{:instruction BOOLEAN.= :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction CODE.CONS :close  0}{:instruction CODE.FROMBOOLEAN :close  0}",
  "program": "(FLOAT.- CODE.ATOM FLOAT.YANKDUP EXEC.DO*TIMES (FLOAT./ EXEC.DUP (CODE.FROMINTEGER ))CODE.FROMBOOLEAN EXEC.= BOOLEAN.DUP BOOLEAN.SWAP EXEC.= INTEGER.FROMFLOAT FLOAT.SWAP CODE.CAR CODE.SWAP CODE.EXTRACT CODE.POP INTEGER.* FLOAT.FROMDATA BOOLEAN.ROT BOOLEAN.AND BOOLEAN.OR FLOAT.- FLOAT.FROMDATA CODE.ATOM BOOLEAN.= EXEC.DO*RANGE (CODE.DO*COUNT CODE.CONS CODE.FROMBOOLEAN ))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 92,
  "genome": "{:instruction CODE.SIZE :close  4}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction INTEGER.* :close  0}{:instruction EXEC.DUP :close  0}{:instruction INTEGER.+ :close  0}{:instruction BOOLEAN.= :close  4}{:instruction BOOLEAN.YANKDUP :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction EXEC.K :close  0}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction FLOAT.POP :close  0}{:instruction EXEC.YANK :close  0}{:instruction FLOAT.- :close  4}{:instruction EXEC.STACKDEPTH :close  0}{:instruction CODE.FLUSH :close  0}{:instruction FLOAT.+ :close  4}{:instruction CODE.EXTRACT :close  0}{:instruction EXEC.DUP :close  0}{:instruction CODE.ATOM :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction BOOLEAN.ROT :close  4}{:instruction EXEC.SWAP :close  0}{:instruction FLOAT.FROMBOOLEAN :close  4}{:instruction CODE.NULL :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction FLOAT.FROMDATA :close  0}{:instruction EXEC.ROT :close  0}{:instruction BOOLEAN.ROT :close  0}",
  "program": "(CODE.SIZE BOOLEAN.STACKDEPTH INTEGER.* EXEC.DUP (INTEGER.+ BOOLEAN.= )BOOLEAN.YANKDUP FLOAT.SWAP EXEC.K (FLOAT.FROMBOOLEAN FLOAT.POP EXEC.YANK FLOAT.- )()EXEC.STACKDEPTH CODE.FLUSH FLOAT.+ CODE.EXTRACT EXEC.DUP (CODE.ATOM BOOLEAN.NOR BOOLEAN.ROT )EXEC.SWAP (FLOAT.FROMBOOLEAN )()CODE.NULL BOOLEAN.FROMINTEGER FLOAT.FROMDATA EXEC.ROT (BOOLEAN.ROT )()())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {1} } }
}
{ "id": 93,
  "genome": "{:instruction BOOLEAN.DUP :close  0}{:instruction CODE.SIZE :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction CODE.LIST :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction CODE.ATOM :close  0}{:instruction CODE.DUP :close  4}{:instruction CODE.FROMFLOAT :close  0}{:instruction FLOAT.ROT :close  0}{:instruction CODE.DO* :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction BOOLEAN.SWAP :close  0}{:instruction FLOAT.COS :close  0}{:instruction EXEC.WHILE :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction BOOLEAN.NOT :close  0}{:instruction CODE.FLUSH :close  0}{:instruction EXEC.DUP :close  4}{:instruction INTEGER.SWAP :close  4}{:instruction CODE.CDR :close  0}{:instruction FLOAT.MAX :close  0}{:instruction FLOAT.FROMBOOLEAN :close  4}{:instruction CODE.MEMBER :close  0}{:instruction EXEC.SWAP :close  0}{:instruction INTEGER.% :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction INTEGER.FROMFLOAT :close  4}{:instruction EXEC.WHEN :close  4}{:instruction INTEGER.+ :close  0}{:instruction CODE.LIST :close  0}{:instruction -3564 :close  0}{:instruction EXEC.SWAP :close  4}{:instruction INTEGER.SWAP :close  0}{:instruction BOOLEAN.POP :close  4}{:instruction CODE.YANK :close  0}{:instruction EXEC.WHEN :close  0}{:instruction EXEC.DO*TIMES :close  4}{:instruction CODE.ROT :close  4}{:instruction CODE.CDR :close  4}{:instruction BOOLEAN.NOT :close  4}{:instruction INTEGER.MAX :close  0}{:instruction BOOLEAN.ROT :close  0}",
  "program": "(BOOLEAN.DUP CODE.SIZE CODE.DO*COUNT CODE.LIST CODE.NTHCDR INTEGER.YANKDUP EXEC.YANKDUP CODE.ATOM CODE.DUP CODE.FROMFLOAT FLOAT.ROT CODE.DO* BOOLEAN.STACKDEPTH BOOLEAN.SWAP FLOAT.COS EXEC.WHILE (CODE.DO*TIMES BOOLEAN.NOT CODE.FLUSH EXEC.DUP ())INTEGER.SWAP CODE.CDR FLOAT.MAX FLOAT.FROMBOOLEAN CODE.MEMBER EXEC.SWAP (INTEGER.% BOOLEAN.FLUSH INTEGER.FROMFLOAT )()EXEC.WHEN ()INTEGER.+ CODE.LIST -3564 EXEC.SWAP ()()INTEGER.SWAP BOOLEAN.POP CODE.YANK EXEC.WHEN (EXEC.DO*TIMES ())CODE.ROT CODE.CDR BOOLEAN.NOT INTEGER.MAX BOOLEAN.ROT )",
  "result-set": { "integer-stack": {"size": 1 "data" : {-3564} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 94,
  "genome": "{:instruction CODE.SWAP :close  0}{:instruction CODE.POP :close  0}{:instruction CODE.MEMBER :close  0}{:instruction CODE.IF :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction BOOLEAN.DUP :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction FLOAT.YANK :close  0}{:instruction INTEGER.% :close  0}{:instruction INTEGER.= :close  0}{:instruction EXEC.= :close  4}{:instruction INTEGER.YANK :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction INTEGER.ROT :close  0}{:instruction CODE.SHOVE :close  0}{:instruction FLOAT.% :close  0}{:instruction BOOLEAN.FLUSH :close  0}",
  "program": "(CODE.SWAP CODE.POP CODE.MEMBER CODE.IF BOOLEAN.FLUSH EXEC.DO*COUNT (INTEGER.YANKDUP BOOLEAN.OR BOOLEAN.STACKDEPTH BOOLEAN.DUP INTEGER.FROMFLOAT FLOAT.YANK INTEGER.% INTEGER.= EXEC.= )INTEGER.YANK BOOLEAN.AND INTEGER.ROT CODE.SHOVE FLOAT.% BOOLEAN.FLUSH )",
  "result-set": { "integer-stack": {"size": 1 "data" : {0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 96,
  "genome": "{:instruction CODE.FROMINTEGER :close  4}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction FLOAT.ROT :close  4}{:instruction EXEC.DO*COUNT :close  0}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction BOOLEAN.NOT :close  0}{:instruction BOOLEAN.NAND :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction INTEGER.MAX :close  0}{:instruction EXEC.WHILE :close  0}{:instruction FLOAT.ROT :close  0}{:instruction FLOAT.< :close  0}{:instruction CODE.CONS :close  0}{:instruction CODE.FLUSH :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction FLOAT.< :close  4}{:instruction INTEGER.SHOVE :close  0}{:instruction INTEGER.+ :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction -1433 :close  0}{:instruction EXEC.STACKDEPTH :close  4}{:instruction CODE.CONTAINER :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction EXEC.YANK :close  4}{:instruction CODE.CAR :close  0}{:instruction FLOAT.FLUSH :close  4}{:instruction EXEC.STACKDEPTH :close  4}{:instruction CODE.DO :close  4}{:instruction CODE.DO*RANGE :close  4}{:instruction EXEC.S :close  4}{:instruction FLOAT.TAN :close  0}{:instruction INTEGER.DUP :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction BOOLEAN.NOT :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction EXEC.FLUSH :close  0}{:instruction EXEC.IF :close  0}{:instruction EXEC.S :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction CODE.SIZE :close  0}{:instruction INTEGER.STACKDEPTH :close  0}",
  "program": "(CODE.FROMINTEGER BOOLEAN.FROMINTEGER FLOAT.ROT EXEC.DO*COUNT (FLOAT.STACKDEPTH INTEGER.FROMBOOLEAN BOOLEAN.NOT BOOLEAN.NAND CODE.DO*COUNT INTEGER.MAX EXEC.WHILE (FLOAT.ROT FLOAT.< CODE.CONS CODE.FLUSH BOOLEAN.OR FLOAT.< ))INTEGER.SHOVE INTEGER.+ EXEC.DO*COUNT (-1433 EXEC.STACKDEPTH )CODE.CONTAINER EXEC.DO*RANGE (CODE.DO*TIMES BOOLEAN.FLUSH EXEC.YANK )CODE.CAR FLOAT.FLUSH EXEC.STACKDEPTH CODE.DO CODE.DO*RANGE EXEC.S ()()()FLOAT.TAN INTEGER.DUP BOOLEAN.FROMFLOAT BOOLEAN.NOT EXEC.DO*TIMES (EXEC.FLUSH EXEC.IF (EXEC.S (FLOAT.YANKDUP BOOLEAN.AND CODE.SIZE INTEGER.STACKDEPTH )()())()))",
  "result-set": { "integer-stack": {"size": 2 "data" : {14 14} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 98,
  "genome": "{:instruction BOOLEAN.DUP :close  0}{:instruction INTEGER.STACKDEPTH :close  4}{:instruction EXEC.= :close  0}{:instruction CODE.LENGTH :close  0}{:instruction INTEGER.ROT :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction FLOAT.MIN :close  0}",
  "program": "(BOOLEAN.DUP INTEGER.STACKDEPTH EXEC.= CODE.LENGTH INTEGER.ROT EXEC.DO*COUNT (FLOAT.MIN ))",
  "result-set": { "integer-stack": {"size": 2 "data" : {-1 0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 99,
  "genome": "{:instruction EXEC.= :close  4}{:instruction BOOLEAN.ROT :close  0}{:instruction BOOLEAN.POP :close  4}",
  "program": "(EXEC.= BOOLEAN.ROT BOOLEAN.POP )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 100,
  "genome": "{:instruction CODE.CDR :close  0}{:instruction BOOLEAN.SWAP :close  0}{:instruction INTEGER.STACKDEPTH :close  0}",
  "program": "(CODE.CDR BOOLEAN.SWAP INTEGER.STACKDEPTH )",
  "result-set": { "integer-stack": {"size": 1 "data" : {0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 102,
  "genome": "{:instruction EXEC.FLUSH :close  0}{:instruction CODE.POSITION :close  0}{:instruction INTEGER.> :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction FLOAT.SIN :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction FLOAT.= :close  0}{:instruction CODE.NTH :close  0}{:instruction CODE.NOOP :close  0}{:instruction CODE.FROMINTEGER :close  4}{:instruction CODE.POSITION :close  0}{:instruction BOOLEAN.NOR :close  4}{:instruction FLOAT.ROT :close  0}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction INTEGER.MAX :close  0}{:instruction EXEC.YANK :close  4}{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction EXEC.WHEN :close  0}{:instruction FLOAT.POP :close  0}{:instruction BOOLEAN.NOT :close  4}{:instruction CODE.DO :close  4}{:instruction EXEC.IF :close  0}{:instruction CODE.INSERT :close  0}{:instruction FLOAT.% :close  0}{:instruction BOOLEAN.FROMINTEGER :close  4}",
  "program": "(EXEC.FLUSH CODE.POSITION INTEGER.> CODE.FROMINTEGER BOOLEAN.ROT FLOAT.SIN BOOLEAN.FROMINTEGER FLOAT.= CODE.NTH CODE.NOOP CODE.FROMINTEGER CODE.POSITION BOOLEAN.NOR FLOAT.ROT FLOAT.STACKDEPTH INTEGER.MAX EXEC.YANK INTEGER.FROMBOOLEAN EXEC.WHEN (FLOAT.POP BOOLEAN.NOT )CODE.DO EXEC.IF (CODE.INSERT FLOAT.% BOOLEAN.FROMINTEGER )())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 104,
  "genome": "",
  "program": "()",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 105,
  "genome": "{:instruction CODE.POP :close  0}{:instruction CODE.POP :close  0}{:instruction CODE.NULL :close  4}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction INTEGER.< :close  4}{:instruction CODE.POSITION :close  4}",
  "program": "(CODE.POP CODE.POP CODE.NULL FLOAT.STACKDEPTH BOOLEAN.ROT INTEGER.< CODE.POSITION )",
  "result-set": { "integer-stack": {"size": 1 "data" : {0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 106,
  "genome": "{:instruction FLOAT.COS :close  0}{:instruction BOOLEAN.= :close  0}{:instruction INTEGER.ROT :close  0}{:instruction EXEC.K :close  4}{:instruction BOOLEAN.NAND :close  0}{:instruction EXEC.POP :close  0}{:instruction CODE.MEMBER :close  4}{:instruction INTEGER.SHOVE :close  0}{:instruction EXEC.WHILE :close  0}{:instruction CODE.SWAP :close  4}{:instruction EXEC.DO*RANGE :close  0}{:instruction INTEGER.MIN :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction CODE.APPEND :close  0}{:instruction CODE.ATOM :close  0}{:instruction INTEGER.MIN :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction FLOAT.STACKDEPTH :close  4}{:instruction FLOAT.FROMINTEGER :close  0}{:instruction CODE.NTH :close  0}{:instruction CODE.YANK :close  0}{:instruction FLOAT.POP :close  0}{:instruction FLOAT./ :close  0}{:instruction EXEC.= :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction CODE.INSERT :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction CODE.DO* :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction FLOAT.- :close  0}{:instruction CODE.NULL :close  0}{:instruction FLOAT.= :close  0}{:instruction INTEGER.MIN :close  0}{:instruction CODE.INSERT :close  0}{:instruction EXEC.ROT :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction CODE.= :close  0}{:instruction FLOAT.% :close  0}{:instruction FLOAT.MAX :close  4}{:instruction CODE.YANKDUP :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction EXEC.IF :close  4}{:instruction FLOAT.YANKDUP :close  4}",
  "program": "(FLOAT.COS BOOLEAN.= INTEGER.ROT EXEC.K ()()BOOLEAN.NAND EXEC.POP (CODE.MEMBER )INTEGER.SHOVE EXEC.WHILE (CODE.SWAP )EXEC.DO*RANGE (INTEGER.MIN CODE.STACKDEPTH BOOLEAN.STACKDEPTH CODE.APPEND CODE.ATOM INTEGER.MIN CODE.STACKDEPTH FLOAT.SHOVE FLOAT.STACKDEPTH )FLOAT.FROMINTEGER CODE.NTH CODE.YANK FLOAT.POP FLOAT./ EXEC.= CODE.STACKDEPTH CODE.INSERT CODE.STACKDEPTH FLOAT.SWAP CODE.DO* INTEGER.STACKDEPTH INTEGER.FROMFLOAT FLOAT.- CODE.NULL FLOAT.= INTEGER.MIN CODE.INSERT EXEC.ROT (INTEGER.SHOVE CODE.= FLOAT.% FLOAT.MAX )()()CODE.YANKDUP BOOLEAN.FLUSH EXEC.IF ()()FLOAT.YANKDUP )",
  "result-set": { "integer-stack": {"size": 2 "data" : {0 0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 107,
  "genome": "{:instruction BOOLEAN.ROT :close  0}{:instruction INTEGER.- :close  0}{:instruction FLOAT.+ :close  0}{:instruction INTEGER.% :close  4}{:instruction INTEGER.POP :close  0}{:instruction INTEGER.> :close  0}{:instruction FLOAT.YANK :close  0}{:instruction EXEC.STACKDEPTH :close  0}{:instruction FLOAT.= :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction FLOAT.MAX :close  0}{:instruction BOOLEAN.AND :close  4}{:instruction CODE.SWAP :close  0}{:instruction BOOLEAN.AND :close  4}{:instruction FLOAT.> :close  0}{:instruction FLOAT.TAN :close  0}{:instruction EXEC.YANK :close  4}{:instruction EXEC.WHILE :close  0}{:instruction CODE.SWAP :close  0}{:instruction CODE.FROMINTEGER :close  4}{:instruction FLOAT./ :close  4}{:instruction CODE.ATOM :close  0}{:instruction CODE.NULL :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction CODE.LIST :close  4}{:instruction BOOLEAN.= :close  0}{:instruction INTEGER.POP :close  0}{:instruction INTEGER.MIN :close  0}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction FLOAT.MAX :close  0}{:instruction CODE.EXTRACT :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction FLOAT.POP :close  0}{:instruction BOOLEAN.FROMFLOAT :close  4}",
  "program": "(BOOLEAN.ROT INTEGER.- FLOAT.+ INTEGER.% INTEGER.POP INTEGER.> FLOAT.YANK EXEC.STACKDEPTH FLOAT.= EXEC.DO*COUNT (FLOAT.MAX BOOLEAN.AND )CODE.SWAP BOOLEAN.AND FLOAT.> FLOAT.TAN EXEC.YANK EXEC.WHILE (CODE.SWAP CODE.FROMINTEGER )FLOAT./ CODE.ATOM CODE.NULL BOOLEAN.YANK CODE.LIST BOOLEAN.= INTEGER.POP INTEGER.MIN CODE.INSTRUCTIONS FLOAT.MAX CODE.EXTRACT BOOLEAN.FROMFLOAT BOOLEAN.AND FLOAT.POP BOOLEAN.FROMFLOAT )",
  "result-set": { "integer-stack": {"size": 19 "data" : {18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 108,
  "genome": "{:instruction EXEC.WHILE :close  0}{:instruction EXEC.= :close  4}{:instruction FLOAT.SIN :close  0}{:instruction CODE.CONS :close  0}{:instruction FLOAT./ :close  0}{:instruction CODE.CONTAINER :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction CODE.INSTRUCTIONS :close  4}{:instruction FLOAT.YANKDUP :close  4}{:instruction EXEC.DO*WHILE :close  0}{:instruction CODE.DO :close  4}{:instruction CODE.DUP :close  0}{:instruction CODE.DO* :close  4}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction CODE.INSERT :close  0}{:instruction BOOLEAN.DUP :close  4}{:instruction INTEGER.YANKDUP :close  0}{:instruction INTEGER.POP :close  4}{:instruction EXEC.SWAP :close  0}{:instruction INTEGER.< :close  0}{:instruction FLOAT.ROT :close  0}{:instruction INTEGER.< :close  4}{:instruction BOOLEAN.OR :close  0}{:instruction FLOAT.= :close  4}{:instruction EXEC.SWAP :close  4}{:instruction FLOAT.ROT :close  0}{:instruction FLOAT.TAN :close  0}{:instruction EXEC.YANK :close  4}{:instruction EXEC.POP :close  0}{:instruction FLOAT.FROMDATA :close  4}{:instruction FLOAT.FROMDATA :close  4}{:instruction FLOAT.% :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction CODE.CAR :close  0}{:instruction FLOAT.COS :close  0}{:instruction FLOAT.COS :close  0}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction FLOAT.% :close  0}{:instruction FLOAT.+ :close  0}{:instruction INTEGER.= :close  0}{:instruction BOOLEAN.= :close  0}{:instruction BOOLEAN.NOT :close  4}{:instruction CODE.FROMFLOAT :close  0}{:instruction INTEGER.- :close  4}{:instruction FLOAT.SIN :close  4}{:instruction FLOAT./ :close  4}{:instruction EXEC.IF :close  4}{:instruction FLOAT.> :close  0}",
  "program": "(EXEC.WHILE (EXEC.= )FLOAT.SIN CODE.CONS FLOAT./ CODE.CONTAINER INTEGER.SWAP CODE.INSTRUCTIONS FLOAT.YANKDUP EXEC.DO*WHILE (CODE.DO )CODE.DUP CODE.DO* BOOLEAN.FROMINTEGER BOOLEAN.NOR CODE.INSERT BOOLEAN.DUP INTEGER.YANKDUP INTEGER.POP EXEC.SWAP (INTEGER.< FLOAT.ROT INTEGER.< )()BOOLEAN.OR FLOAT.= EXEC.SWAP ()()FLOAT.ROT FLOAT.TAN EXEC.YANK EXEC.POP (FLOAT.FROMDATA )FLOAT.FROMDATA FLOAT.% INTEGER.FROMFLOAT CODE.CAR FLOAT.COS FLOAT.COS CODE.INSTRUCTIONS FLOAT.% FLOAT.+ INTEGER.= BOOLEAN.= BOOLEAN.NOT CODE.FROMFLOAT INTEGER.- FLOAT.SIN FLOAT./ EXEC.IF ()()FLOAT.> )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 109,
  "genome": "{:instruction FLOAT.YANKDUP :close  0}{:instruction INTEGER.STACKDEPTH :close  4}{:instruction FLOAT./ :close  0}{:instruction EXEC.STACKDEPTH :close  0}{:instruction BOOLEAN.DUP :close  0}{:instruction CODE.SWAP :close  4}{:instruction CODE.ATOM :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction INTEGER.FLUSH :close  4}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction FLOAT.< :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction INTEGER.DUP :close  0}{:instruction CODE.DO*RANGE :close  4}{:instruction INTEGER.FROMFLOAT :close  4}{:instruction CODE.IF :close  4}{:instruction FLOAT.SIN :close  4}{:instruction CODE.POP :close  4}{:instruction BOOLEAN.NAND :close  4}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction FLOAT.< :close  4}{:instruction EXEC.STACKDEPTH :close  0}{:instruction BOOLEAN.NAND :close  0}",
  "program": "(FLOAT.YANKDUP INTEGER.STACKDEPTH FLOAT./ EXEC.STACKDEPTH BOOLEAN.DUP CODE.SWAP CODE.ATOM INTEGER.STACKDEPTH INTEGER.FLUSH CODE.FROMBOOLEAN FLOAT.< INTEGER.YANKDUP INTEGER.DUP CODE.DO*RANGE INTEGER.FROMFLOAT CODE.IF FLOAT.SIN CODE.POP BOOLEAN.NAND CODE.FROMBOOLEAN BOOLEAN.ROT FLOAT.< EXEC.STACKDEPTH BOOLEAN.NAND )",
  "result-set": { "integer-stack": {"size": 1 "data" : {1} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 110,
  "genome": "{:instruction INTEGER.ROT :close  0}{:instruction CODE.YANK :close  4}{:instruction FLOAT.FLUSH :close  0}{:instruction BOOLEAN.NAND :close  0}{:instruction TRUE :close  4}{:instruction CODE.FROMFLOAT :close  0}{:instruction CODE.ROT :close  4}{:instruction CODE.STACKDEPTH :close  4}",
  "program": "(INTEGER.ROT CODE.YANK FLOAT.FLUSH BOOLEAN.NAND TRUE CODE.FROMFLOAT CODE.ROT CODE.STACKDEPTH )",
  "result-set": { "integer-stack": {"size": 1 "data" : {1} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {1} } }
}
{ "id": 112,
  "genome": "{:instruction CODE.CAR :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction CODE.IF :close  4}{:instruction CODE.NTH :close  0}{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction INTEGER.MAX :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction CODE.CONS :close  0}{:instruction INTEGER.- :close  0}{:instruction EXEC.DO*COUNT :close  4}{:instruction BOOLEAN.POP :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction BOOLEAN.SHOVE :close  0}{:instruction INTEGER.DUP :close  0}{:instruction FLOAT.SIN :close  0}{:instruction CODE.FROMFLOAT :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction BOOLEAN.= :close  0}{:instruction CODE.CONS :close  0}",
  "program": "(CODE.CAR FLOAT.SWAP CODE.IF CODE.NTH INTEGER.FROMBOOLEAN INTEGER.MAX CODE.FROMINTEGER CODE.CONS INTEGER.- EXEC.DO*COUNT ()BOOLEAN.POP BOOLEAN.FLUSH BOOLEAN.SHOVE INTEGER.DUP FLOAT.SIN CODE.FROMFLOAT FLOAT.SWAP BOOLEAN.= CODE.CONS )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 113,
  "genome": "{:instruction EXEC.WHILE :close  0}{:instruction FLOAT.= :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction CODE.LENGTH :close  0}{:instruction INTEGER.MIN :close  4}{:instruction EXEC.DO*TIMES :close  0}{:instruction FLOAT.FROMINTEGER :close  0}{:instruction EXEC.S :close  0}{:instruction CODE.NTH :close  4}{:instruction BOOLEAN.NAND :close  0}{:instruction FLOAT.< :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction CODE.POSITION :close  0}{:instruction CODE.CONTAINER :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction CODE.CDR :close  4}{:instruction CODE.DO*TIMES :close  0}{:instruction -1426 :close  0}{:instruction FLOAT.< :close  4}{:instruction FLOAT.= :close  0}{:instruction EXEC.IF :close  0}{:instruction -1511 :close  0}{:instruction FLOAT.SIN :close  0}",
  "program": "(EXEC.WHILE (FLOAT.= BOOLEAN.ROT CODE.LENGTH INTEGER.MIN )EXEC.DO*TIMES (FLOAT.FROMINTEGER EXEC.S (CODE.NTH )()())BOOLEAN.NAND FLOAT.< BOOLEAN.AND INTEGER.FROMBOOLEAN CODE.POSITION CODE.CONTAINER BOOLEAN.AND BOOLEAN.FROMFLOAT INTEGER.YANKDUP CODE.STACKDEPTH INTEGER.FROMFLOAT CODE.CDR CODE.DO*TIMES -1426 FLOAT.< FLOAT.= EXEC.IF (-1511 FLOAT.SIN )())",
  "result-set": { "integer-stack": {"size": 3 "data" : {-1511 -1426 0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 114,
  "genome": "{:instruction BOOLEAN.AND :close  0}{:instruction FALSE :close  4}{:instruction BOOLEAN.OR :close  4}",
  "program": "(BOOLEAN.AND FALSE BOOLEAN.OR )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 115,
  "genome": "{:instruction EXEC.K :close  0}{:instruction CODE.LIST :close  0}{:instruction BOOLEAN.YANKDUP :close  0}{:instruction FLOAT.- :close  0}{:instruction EXEC.K :close  0}{:instruction FLOAT.+ :close  4}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction FLOAT.> :close  0}",
  "program": "(EXEC.K (CODE.LIST BOOLEAN.YANKDUP FLOAT.- EXEC.K (FLOAT.+ )())()INTEGER.STACKDEPTH FLOAT.> )",
  "result-set": { "integer-stack": {"size": 1 "data" : {0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 117,
  "genome": "{:instruction CODE.= :close  0}{:instruction FLOAT.- :close  0}{:instruction CODE.SHOVE :close  0}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction FLOAT.> :close  0}{:instruction CODE.YANK :close  4}{:instruction EXEC.DO*WHILE :close  0}{:instruction FLOAT.POP :close  0}{:instruction INTEGER.SWAP :close  4}{:instruction INTEGER.> :close  4}",
  "program": "(CODE.= FLOAT.- CODE.SHOVE FLOAT.STACKDEPTH FLOAT.YANKDUP FLOAT.> CODE.YANK EXEC.DO*WHILE (FLOAT.POP INTEGER.SWAP )INTEGER.> )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 119,
  "genome": "{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction EXEC.= :close  4}{:instruction BOOLEAN.AND :close  0}{:instruction CODE.CDR :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction CODE.SHOVE :close  0}{:instruction CODE.YANK :close  4}{:instruction INTEGER.FROMFLOAT :close  4}{:instruction -0.68690596886139965 :close  0}{:instruction FLOAT.* :close  0}{:instruction CODE.SHOVE :close  0}{:instruction CODE.MEMBER :close  0}{:instruction BOOLEAN.NAND :close  0}{:instruction TRUE :close  0}{:instruction EXEC.ROT :close  0}{:instruction CODE.APPEND :close  0}{:instruction CODE.NOOP :close  0}{:instruction BOOLEAN.YANKDUP :close  4}{:instruction CODE.DO :close  4}{:instruction CODE.CAR :close  0}{:instruction INTEGER.FLUSH :close  0}",
  "program": "(INTEGER.FROMBOOLEAN EXEC.= BOOLEAN.AND CODE.CDR BOOLEAN.OR CODE.INSTRUCTIONS CODE.SHOVE CODE.YANK INTEGER.FROMFLOAT -0.68690596886139965 FLOAT.* CODE.SHOVE CODE.MEMBER BOOLEAN.NAND TRUE EXEC.ROT (CODE.APPEND CODE.NOOP BOOLEAN.YANKDUP )()()CODE.DO CODE.CAR INTEGER.FLUSH )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 1 "data" : {-0.686906} },
                  "bool-stack": {"size": 2 "data" : {1 1} } }
}
{ "id": 121,
  "genome": "{:instruction CODE.DUP :close  0}{:instruction INTEGER.YANKDUP :close  4}{:instruction FLOAT.= :close  4}{:instruction FLOAT.- :close  0}{:instruction INTEGER./ :close  0}{:instruction EXEC.POP :close  0}{:instruction EXEC.WHEN :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction FLOAT.> :close  4}{:instruction EXEC.DO*COUNT :close  4}{:instruction FLOAT.% :close  0}",
  "program": "(CODE.DUP INTEGER.YANKDUP FLOAT.= FLOAT.- INTEGER./ EXEC.POP (EXEC.WHEN (INTEGER.FROMFLOAT FLOAT.> ))EXEC.DO*COUNT ()FLOAT.% )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 122,
  "genome": "{:instruction BOOLEAN.SWAP :close  4}{:instruction EXEC.DO*WHILE :close  0}{:instruction CODE.DO* :close  0}{:instruction EXEC.POP :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction INTEGER.- :close  0}{:instruction FLOAT.* :close  0}{:instruction FLOAT.YANKDUP :close  4}{:instruction INTEGER.MAX :close  0}{:instruction CODE.CAR :close  4}{:instruction BOOLEAN.DUP :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction INTEGER.DUP :close  4}{:instruction FLOAT.- :close  0}{:instruction CODE.EXTRACT :close  4}{:instruction EXEC.SHOVE :close  0}{:instruction INTEGER.MAX :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction FLOAT./ :close  0}{:instruction BOOLEAN.DUP :close  0}{:instruction FLOAT.* :close  4}{:instruction FLOAT.ROT :close  0}{:instruction EXEC.ROT :close  0}{:instruction CODE.LENGTH :close  0}{:instruction INTEGER./ :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction INTEGER.ROT :close  0}{:instruction BOOLEAN.DUP :close  0}{:instruction BOOLEAN.FROMFLOAT :close  4}{:instruction EXEC.POP :close  4}{:instruction CODE.LIST :close  0}{:instruction EXEC.= :close  0}{:instruction INTEGER.MIN :close  0}{:instruction BOOLEAN.YANKDUP :close  4}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction EXEC.POP :close  0}{:instruction FLOAT.% :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction INTEGER.POP :close  0}{:instruction EXEC.S :close  0}",
  "program": "(BOOLEAN.SWAP EXEC.DO*WHILE (CODE.DO* EXEC.POP (BOOLEAN.FLUSH INTEGER.- FLOAT.* FLOAT.YANKDUP ))INTEGER.MAX CODE.CAR BOOLEAN.DUP BOOLEAN.FROMINTEGER INTEGER.DUP FLOAT.- CODE.EXTRACT EXEC.SHOVE (INTEGER.MAX CODE.STACKDEPTH FLOAT./ BOOLEAN.DUP FLOAT.* )FLOAT.ROT EXEC.ROT (CODE.LENGTH INTEGER./ EXEC.YANKDUP INTEGER.ROT BOOLEAN.DUP BOOLEAN.FROMFLOAT )()()EXEC.POP ()CODE.LIST EXEC.= INTEGER.MIN BOOLEAN.YANKDUP BOOLEAN.FROMINTEGER EXEC.POP (FLOAT.% CODE.NTHCDR EXEC.SHOVE (INTEGER.POP EXEC.S ()()())))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 125,
  "genome": "{:instruction EXEC.K :close  0}{:instruction FLOAT.ROT :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction CODE.NTH :close  0}{:instruction FLOAT.POP :close  0}{:instruction INTEGER.< :close  0}{:instruction INTEGER./ :close  4}{:instruction 0.37840095520447958 :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction CODE.IF :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction CODE.MEMBER :close  0}{:instruction INTEGER.+ :close  0}{:instruction CODE.SWAP :close  0}{:instruction BOOLEAN.SWAP :close  4}{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction CODE.INSTRUCTIONS :close  4}{:instruction CODE.ROT :close  0}{:instruction INTEGER.- :close  0}{:instruction CODE.MEMBER :close  4}{:instruction CODE.YANKDUP :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction CODE.= :close  4}{:instruction CODE.ROT :close  0}{:instruction FLOAT.DUP :close  4}{:instruction EXEC.YANK :close  4}{:instruction FLOAT.YANKDUP :close  0}{:instruction FLOAT.STACKDEPTH :close  4}{:instruction INTEGER.% :close  0}{:instruction INTEGER.% :close  0}{:instruction EXEC.S :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction FLOAT.SHOVE :close  4}{:instruction INTEGER.POP :close  0}{:instruction EXEC.FLUSH :close  0}{:instruction INTEGER./ :close  0}{:instruction CODE.YANKDUP :close  4}{:instruction INTEGER.* :close  0}{:instruction CODE.POSITION :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}",
  "program": "(EXEC.K (FLOAT.ROT CODE.STACKDEPTH CODE.NTH FLOAT.POP INTEGER.< INTEGER./ )()0.37840095520447958 EXEC.DO*COUNT (INTEGER.FROMFLOAT CODE.IF EXEC.DO*WHILE (BOOLEAN.OR CODE.MEMBER INTEGER.+ CODE.SWAP BOOLEAN.SWAP ))INTEGER.FROMBOOLEAN CODE.INSTRUCTIONS CODE.ROT INTEGER.- CODE.MEMBER CODE.YANKDUP CODE.FROMINTEGER FLOAT.SHOVE CODE.= CODE.ROT FLOAT.DUP EXEC.YANK FLOAT.YANKDUP FLOAT.STACKDEPTH INTEGER.% INTEGER.% EXEC.S (BOOLEAN.FROMINTEGER CODE.NTHCDR FLOAT.SHOVE )()()INTEGER.POP EXEC.FLUSH INTEGER./ CODE.YANKDUP INTEGER.* CODE.POSITION BOOLEAN.FROMFLOAT )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 2 "data" : {0 0} } }
}
{ "id": 126,
  "genome": "{:instruction BOOLEAN.= :close  0}{:instruction INTEGER.+ :close  0}{:instruction BOOLEAN.YANKDUP :close  0}{:instruction CODE.IF :close  0}{:instruction CODE.STACKDEPTH :close  4}{:instruction INTEGER.YANK :close  0}{:instruction CODE.NTH :close  0}{:instruction EXEC.WHILE :close  0}{:instruction 935 :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction CODE.DO*RANGE :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction FLOAT.- :close  4}{:instruction EXEC.FLUSH :close  0}{:instruction FLOAT.MAX :close  0}{:instruction FLOAT.% :close  0}{:instruction EXEC.S :close  4}{:instruction BOOLEAN.ROT :close  0}{:instruction FLOAT.TAN :close  4}{:instruction INTEGER.MIN :close  0}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction FLOAT.% :close  0}{:instruction INTEGER.+ :close  4}{:instruction CODE.DUP :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction INTEGER.% :close  0}{:instruction FLOAT.% :close  4}{:instruction CODE.FROMFLOAT :close  0}{:instruction CODE.DO :close  0}{:instruction INTEGER.MIN :close  0}{:instruction EXEC.Y :close  4}{:instruction FLOAT.> :close  0}{:instruction INTEGER.= :close  4}{:instruction CODE.CONS :close  4}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction FLOAT.+ :close  4}{:instruction FLOAT.- :close  0}{:instruction EXEC.SWAP :close  0}{:instruction CODE.SIZE :close  0}{:instruction FLOAT.ROT :close  0}{:instruction FLOAT.MAX :close  4}{:instruction FLOAT.FROMBOOLEAN :close  4}{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction CODE.YANK :close  4}{:instruction CODE.CDR :close  0}",
  "program": "(BOOLEAN.= INTEGER.+ BOOLEAN.YANKDUP CODE.IF CODE.STACKDEPTH INTEGER.YANK CODE.NTH EXEC.WHILE (935 EXEC.YANKDUP CODE.DO*RANGE BOOLEAN.ROT BOOLEAN.YANK FLOAT.- )EXEC.FLUSH FLOAT.MAX FLOAT.% EXEC.S ()()()BOOLEAN.ROT FLOAT.TAN INTEGER.MIN FLOAT.FROMBOOLEAN FLOAT.% INTEGER.+ CODE.DUP BOOLEAN.FROMINTEGER INTEGER.% FLOAT.% CODE.FROMFLOAT CODE.DO INTEGER.MIN EXEC.Y ()FLOAT.> INTEGER.= CODE.CONS BOOLEAN.FROMINTEGER FLOAT.+ FLOAT.- EXEC.SWAP (CODE.SIZE FLOAT.ROT FLOAT.MAX )()FLOAT.FROMBOOLEAN INTEGER.FROMBOOLEAN CODE.YANK CODE.CDR )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 128,
  "genome": "{:instruction FLOAT.= :close  4}{:instruction FLOAT.SHOVE :close  0}{:instruction FALSE :close  4}{:instruction CODE.POSITION :close  0}{:instruction CODE.YANKDUP :close  4}{:instruction CODE.LIST :close  0}{:instruction INTEGER.POP :close  0}{:instruction CODE.CONTAINER :close  0}",
  "program": "(FLOAT.= FLOAT.SHOVE FALSE CODE.POSITION CODE.YANKDUP CODE.LIST INTEGER.POP CODE.CONTAINER )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 130,
  "genome": "{:instruction INTEGER.FLUSH :close  0}{:instruction FLOAT.SIN :close  4}{:instruction EXEC.DO*TIMES :close  0}{:instruction CODE.APPEND :close  0}{:instruction FLOAT.MIN :close  0}{:instruction BOOLEAN.YANKDUP :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction INTEGER.> :close  0}{:instruction INTEGER.< :close  0}{:instruction BOOLEAN.= :close  0}{:instruction BOOLEAN.SWAP :close  4}{:instruction INTEGER.+ :close  4}{:instruction EXEC.FLUSH :close  4}{:instruction EXEC.FLUSH :close  0}{:instruction CODE.APPEND :close  0}{:instruction CODE.NULL :close  4}{:instruction CODE.SIZE :close  0}{:instruction CODE.CONTAINER :close  0}",
  "program": "(INTEGER.FLUSH FLOAT.SIN EXEC.DO*TIMES (CODE.APPEND FLOAT.MIN BOOLEAN.YANKDUP BOOLEAN.ROT INTEGER.> INTEGER.< BOOLEAN.= BOOLEAN.SWAP )INTEGER.+ EXEC.FLUSH EXEC.FLUSH CODE.APPEND CODE.NULL CODE.SIZE CODE.CONTAINER )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 131,
  "genome": "{:instruction BOOLEAN.YANK :close  0}{:instruction CODE.CAR :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction INTEGER.YANK :close  0}{:instruction FLOAT.% :close  4}{:instruction EXEC.POP :close  0}{:instruction INTEGER.- :close  0}{:instruction INTEGER.= :close  0}{:instruction FLOAT.> :close  4}{:instruction BOOLEAN.POP :close  4}{:instruction BOOLEAN.DUP :close  0}{:instruction TRUE :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction CODE.LENGTH :close  0}{:instruction CODE.DUP :close  0}{:instruction INTEGER.> :close  0}{:instruction INTEGER.MIN :close  4}{:instruction CODE.DO :close  4}{:instruction CODE.FLUSH :close  4}{:instruction CODE.ROT :close  0}{:instruction INTEGER.ROT :close  4}{:instruction INTEGER.SWAP :close  0}{:instruction INTEGER.% :close  0}{:instruction FLOAT.STACKDEPTH :close  4}{:instruction INTEGER.> :close  0}{:instruction BOOLEAN.NAND :close  4}{:instruction FLOAT.- :close  4}{:instruction EXEC.YANK :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction CODE.QUOTE :close  0}{:instruction CODE.APPEND :close  0}{:instruction EXEC.= :close  0}{:instruction BOOLEAN.OR :close  0}",
  "program": "(BOOLEAN.YANK CODE.CAR CODE.NTHCDR INTEGER.YANK FLOAT.% EXEC.POP (INTEGER.- INTEGER.= FLOAT.> )BOOLEAN.POP BOOLEAN.DUP TRUE BOOLEAN.ROT CODE.INSTRUCTIONS CODE.LENGTH CODE.DUP INTEGER.> INTEGER.MIN CODE.DO CODE.FLUSH CODE.ROT INTEGER.ROT INTEGER.SWAP INTEGER.% FLOAT.STACKDEPTH INTEGER.> BOOLEAN.NAND FLOAT.- EXEC.YANK BOOLEAN.FROMINTEGER CODE.FROMBOOLEAN CODE.QUOTE (CODE.APPEND EXEC.= BOOLEAN.OR ))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 132,
  "genome": "{:instruction CODE.DO*RANGE :close  0}{:instruction CODE.SHOVE :close  0}{:instruction CODE.POSITION :close  0}{:instruction FLOAT.- :close  0}{:instruction INTEGER.> :close  0}{:instruction FLOAT.% :close  0}{:instruction CODE.POP :close  4}{:instruction INTEGER.MAX :close  4}{:instruction EXEC.S :close  4}{:instruction CODE.POP :close  4}{:instruction CODE.NOOP :close  0}{:instruction CODE.LENGTH :close  4}{:instruction CODE.CONTAINER :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction CODE.QUOTE :close  0}",
  "program": "(CODE.DO*RANGE CODE.SHOVE CODE.POSITION FLOAT.- INTEGER.> FLOAT.% CODE.POP INTEGER.MAX EXEC.S ()()()CODE.POP CODE.NOOP CODE.LENGTH CODE.CONTAINER FLOAT.SWAP CODE.QUOTE ())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 133,
  "genome": "",
  "program": "()",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 134,
  "genome": "{:instruction CODE.QUOTE :close  0}{:instruction INTEGER.MAX :close  0}{:instruction CODE.YANKDUP :close  0}{:instruction INTEGER.< :close  4}{:instruction BOOLEAN.FROMINTEGER :close  4}{:instruction FLOAT.FLUSH :close  0}{:instruction CODE.NTHCDR :close  4}{:instruction INTEGER.FROMBOOLEAN :close  4}{:instruction INTEGER./ :close  0}{:instruction EXEC.S :close  0}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction CODE.SWAP :close  0}{:instruction CODE.NULL :close  0}{:instruction INTEGER.FROMBOOLEAN :close  4}{:instruction INTEGER.SWAP :close  4}{:instruction EXEC.S :close  4}{:instruction TRUE :close  0}{:instruction INTEGER.< :close  4}",
  "program": "(CODE.QUOTE (INTEGER.MAX CODE.YANKDUP INTEGER.< )BOOLEAN.FROMINTEGER FLOAT.FLUSH CODE.NTHCDR INTEGER.FROMBOOLEAN INTEGER./ EXEC.S (FLOAT.STACKDEPTH CODE.DO*COUNT CODE.SWAP CODE.NULL INTEGER.FROMBOOLEAN )()()INTEGER.SWAP EXEC.S ()()()TRUE INTEGER.< )",
  "result-set": { "integer-stack": {"size": 1 "data" : {0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {1} } }
}
{ "id": 135,
  "genome": "{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction CODE.SWAP :close  0}{:instruction INTEGER.STACKDEPTH :close  4}{:instruction INTEGER.POP :close  0}{:instruction CODE.YANKDUP :close  0}{:instruction CODE.CAR :close  0}",
  "program": "(BOOLEAN.FROMFLOAT CODE.SWAP INTEGER.STACKDEPTH INTEGER.POP CODE.YANKDUP CODE.CAR )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 136,
  "genome": "{:instruction CODE.INSERT :close  0}{:instruction INTEGER.DUP :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction INTEGER.MIN :close  0}{:instruction CODE.= :close  0}{:instruction FLOAT.SHOVE :close  4}{:instruction CODE.INSTRUCTIONS :close  4}{:instruction CODE.DO*COUNT :close  0}{:instruction CODE.= :close  4}{:instruction EXEC.SWAP :close  4}",
  "program": "(CODE.INSERT INTEGER.DUP EXEC.DO*COUNT (INTEGER.MIN CODE.= FLOAT.SHOVE )CODE.INSTRUCTIONS CODE.DO*COUNT CODE.= EXEC.SWAP ()())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 137,
  "genome": "{:instruction INTEGER.= :close  0}{:instruction FLOAT.* :close  4}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction FLOAT.MIN :close  0}{:instruction EXEC.= :close  0}{:instruction INTEGER.ROT :close  0}{:instruction CODE.CAR :close  4}{:instruction INTEGER.* :close  0}{:instruction EXEC.DO*WHILE :close  4}{:instruction INTEGER.SWAP :close  0}{:instruction CODE.EXTRACT :close  0}{:instruction 459 :close  0}{:instruction EXEC.ROT :close  0}{:instruction CODE.SHOVE :close  0}{:instruction CODE.SIZE :close  0}{:instruction FLOAT.FROMINTEGER :close  4}{:instruction BOOLEAN.SWAP :close  0}{:instruction CODE.QUOTE :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction EXEC.YANK :close  4}{:instruction EXEC.= :close  0}{:instruction CODE.DO*TIMES :close  4}{:instruction FLOAT.YANK :close  4}{:instruction CODE.SIZE :close  0}{:instruction EXEC.YANK :close  4}{:instruction CODE.DO*TIMES :close  0}{:instruction CODE.CONS :close  4}{:instruction EXEC.DO*RANGE :close  0}",
  "program": "(INTEGER.= FLOAT.* CODE.FROMBOOLEAN INTEGER.YANKDUP FLOAT.MIN EXEC.= INTEGER.ROT CODE.CAR INTEGER.* EXEC.DO*WHILE ()INTEGER.SWAP CODE.EXTRACT 459 EXEC.ROT (CODE.SHOVE CODE.SIZE FLOAT.FROMINTEGER )()()BOOLEAN.SWAP CODE.QUOTE (EXEC.DO*WHILE (EXEC.YANK ))EXEC.= CODE.DO*TIMES FLOAT.YANK CODE.SIZE EXEC.YANK CODE.DO*TIMES CODE.CONS EXEC.DO*RANGE ())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 1 "data" : {37} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 138,
  "genome": "{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction CODE.YANKDUP :close  0}{:instruction FLOAT.MIN :close  0}{:instruction CODE.FLUSH :close  0}{:instruction FLOAT.* :close  0}{:instruction INTEGER.FLUSH :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction CODE.ROT :close  4}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction EXEC.K :close  0}{:instruction FLOAT.TAN :close  0}{:instruction INTEGER.YANK :close  0}",
  "program": "(INTEGER.FROMBOOLEAN FLOAT.FROMBOOLEAN CODE.DO*TIMES CODE.YANKDUP FLOAT.MIN CODE.FLUSH FLOAT.* INTEGER.FLUSH FLOAT.SWAP CODE.ROT BOOLEAN.FROMINTEGER EXEC.K (FLOAT.TAN INTEGER.YANK )())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 141,
  "genome": "{:instruction -3801 :close  0}{:instruction FLOAT.TAN :close  4}{:instruction FLOAT.SHOVE :close  0}{:instruction CODE.STACKDEPTH :close  4}{:instruction FLOAT.TAN :close  4}{:instruction BOOLEAN.AND :close  0}{:instruction CODE.POP :close  4}{:instruction CODE.CONTAINER :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction INTEGER.< :close  0}{:instruction EXEC.IF :close  0}{:instruction EXEC.ROT :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction CODE.DO* :close  0}{:instruction BOOLEAN.DUP :close  0}{:instruction FLOAT.YANK :close  0}{:instruction CODE.NTH :close  0}{:instruction CODE.DO* :close  0}{:instruction CODE.ROT :close  0}{:instruction INTEGER.> :close  0}{:instruction BOOLEAN.DUP :close  0}{:instruction CODE.SWAP :close  0}{:instruction CODE.NOOP :close  0}{:instruction FLOAT.SIN :close  4}{:instruction FLOAT.POP :close  0}{:instruction FLOAT./ :close  0}{:instruction INTEGER.ROT :close  4}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction FLOAT.TAN :close  4}{:instruction CODE.EXTRACT :close  4}{:instruction FLOAT.SHOVE :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction BOOLEAN.SHOVE :close  0}{:instruction EXEC.SHOVE :close  4}{:instruction FLOAT.* :close  0}{:instruction INTEGER.POP :close  0}{:instruction CODE.POP :close  0}",
  "program": "(-3801 FLOAT.TAN FLOAT.SHOVE CODE.STACKDEPTH FLOAT.TAN BOOLEAN.AND CODE.POP CODE.CONTAINER FLOAT.YANKDUP BOOLEAN.OR INTEGER.< EXEC.IF (EXEC.ROT (CODE.DO*TIMES FLOAT.FROMBOOLEAN EXEC.DO*COUNT (CODE.DO* BOOLEAN.DUP FLOAT.YANK CODE.NTH CODE.DO* CODE.ROT INTEGER.> BOOLEAN.DUP CODE.SWAP CODE.NOOP FLOAT.SIN ))()()FLOAT.POP FLOAT./ INTEGER.ROT )()CODE.INSTRUCTIONS FLOAT.TAN CODE.EXTRACT FLOAT.SHOVE EXEC.SHOVE (BOOLEAN.SHOVE EXEC.SHOVE ())FLOAT.* INTEGER.POP CODE.POP )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 142,
  "genome": "{:instruction INTEGER.+ :close  4}{:instruction CODE.YANK :close  0}{:instruction BOOLEAN.DUP :close  0}{:instruction FLOAT.- :close  0}{:instruction EXEC.S :close  4}{:instruction BOOLEAN.NOR :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction EXEC.WHILE :close  4}{:instruction CODE.FLUSH :close  0}{:instruction FLOAT.POP :close  0}{:instruction BOOLEAN.SHOVE :close  0}{:instruction CODE.ATOM :close  0}{:instruction FALSE :close  0}{:instruction CODE.NTH :close  0}{:instruction CODE.QUOTE :close  0}{:instruction FLOAT.POP :close  0}{:instruction FLOAT.+ :close  0}{:instruction CODE.CONTAINER :close  0}{:instruction CODE.NULL :close  4}{:instruction EXEC.WHILE :close  0}{:instruction FLOAT.MAX :close  0}{:instruction BOOLEAN.YANKDUP :close  0}{:instruction CODE.= :close  0}{:instruction CODE.ROT :close  0}{:instruction EXEC.DO*COUNT :close  0}",
  "program": "(INTEGER.+ CODE.YANK BOOLEAN.DUP FLOAT.- EXEC.S ()()()BOOLEAN.NOR EXEC.DO*TIMES (EXEC.WHILE ())CODE.FLUSH FLOAT.POP BOOLEAN.SHOVE CODE.ATOM FALSE CODE.NTH CODE.QUOTE (FLOAT.POP FLOAT.+ CODE.CONTAINER CODE.NULL )EXEC.WHILE (FLOAT.MAX BOOLEAN.YANKDUP CODE.= CODE.ROT EXEC.DO*COUNT ()))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 143,
  "genome": "{:instruction CODE.INSTRUCTIONS :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction FLOAT.> :close  0}{:instruction BOOLEAN.POP :close  0}{:instruction CODE.ROT :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction CODE.SWAP :close  0}{:instruction CODE.FROMFLOAT :close  0}{:instruction INTEGER.< :close  0}{:instruction BOOLEAN.DUP :close  0}{:instruction FLOAT.MIN :close  4}{:instruction BOOLEAN.= :close  0}{:instruction FLOAT.FROMBOOLEAN :close  4}{:instruction BOOLEAN.FLUSH :close  0}{:instruction CODE.DO :close  0}{:instruction BOOLEAN.POP :close  4}{:instruction -0.40033631944105408 :close  0}{:instruction CODE.NTH :close  4}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction 3884 :close  0}{:instruction CODE.POSITION :close  4}{:instruction CODE.CDR :close  4}{:instruction BOOLEAN.YANK :close  0}{:instruction EXEC.FLUSH :close  0}{:instruction FLOAT.% :close  0}{:instruction FLOAT.POP :close  4}{:instruction CODE.IF :close  0}{:instruction FLOAT.FLUSH :close  0}{:instruction FLOAT.< :close  0}{:instruction FLOAT.YANK :close  0}",
  "program": "(CODE.INSTRUCTIONS INTEGER.FROMFLOAT EXEC.DO*TIMES (FLOAT.> BOOLEAN.POP CODE.ROT EXEC.YANKDUP CODE.FROMBOOLEAN CODE.SWAP CODE.FROMFLOAT INTEGER.< BOOLEAN.DUP FLOAT.MIN )BOOLEAN.= FLOAT.FROMBOOLEAN BOOLEAN.FLUSH CODE.DO BOOLEAN.POP -0.40033631944105408 CODE.NTH BOOLEAN.STACKDEPTH CODE.FROMBOOLEAN 3884 CODE.POSITION CODE.CDR BOOLEAN.YANK EXEC.FLUSH FLOAT.% FLOAT.POP CODE.IF FLOAT.FLUSH FLOAT.< FLOAT.YANK )",
  "result-set": { "integer-stack": {"size": 2 "data" : {3884 0} },
                  "float-stack": {"size": 1 "data" : {-0.400336} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 144,
  "genome": "{:instruction FLOAT.SIN :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction EXEC.STACKDEPTH :close  4}{:instruction FLOAT.< :close  0}{:instruction CODE.FLUSH :close  4}{:instruction EXEC.DO*RANGE :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction EXEC.WHILE :close  0}",
  "program": "(FLOAT.SIN INTEGER.SWAP EXEC.STACKDEPTH FLOAT.< CODE.FLUSH EXEC.DO*RANGE (BOOLEAN.STACKDEPTH EXEC.WHILE ()))",
  "result-set": { "integer-stack": {"size": 2 "data" : {0 4} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 145,
  "genome": "{:instruction EXEC.= :close  0}{:instruction FLOAT.+ :close  0}{:instruction INTEGER.ROT :close  0}{:instruction INTEGER.MIN :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction FLOAT.SHOVE :close  4}{:instruction CODE.YANKDUP :close  0}{:instruction CODE.SWAP :close  0}{:instruction BOOLEAN.STACKDEPTH :close  4}{:instruction EXEC.DO*COUNT :close  4}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction CODE.SHOVE :close  4}{:instruction EXEC.SWAP :close  4}{:instruction EXEC.IF :close  4}{:instruction INTEGER.FROMBOOLEAN :close  0}",
  "program": "(EXEC.= FLOAT.+ INTEGER.ROT INTEGER.MIN CODE.DO*TIMES FLOAT.FROMBOOLEAN FLOAT.SHOVE CODE.YANKDUP CODE.SWAP BOOLEAN.STACKDEPTH EXEC.DO*COUNT ()FLOAT.FROMBOOLEAN CODE.NTHCDR CODE.SHOVE EXEC.SWAP ()()EXEC.IF ()()INTEGER.FROMBOOLEAN )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 1 "data" : {0} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 146,
  "genome": "{:instruction EXEC.DO*COUNT :close  4}{:instruction CODE.FROMFLOAT :close  4}{:instruction FLOAT.MIN :close  0}{:instruction EXEC.POP :close  0}{:instruction FLOAT.= :close  0}{:instruction FLOAT.SIN :close  0}{:instruction EXEC.POP :close  0}{:instruction CODE.APPEND :close  0}{:instruction INTEGER.< :close  0}{:instruction BOOLEAN.DUP :close  4}{:instruction EXEC.ROT :close  0}{:instruction INTEGER.> :close  0}{:instruction BOOLEAN.NAND :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction EXEC.= :close  0}{:instruction INTEGER.- :close  0}{:instruction EXEC.Y :close  0}{:instruction FLOAT.FLUSH :close  0}{:instruction FLOAT.COS :close  0}{:instruction INTEGER.DUP :close  4}{:instruction INTEGER.% :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction CODE.DO*TIMES :close  4}{:instruction CODE.NOOP :close  0}{:instruction BOOLEAN.NOT :close  0}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction INTEGER.MIN :close  0}{:instruction CODE.POSITION :close  0}{:instruction CODE.CAR :close  4}{:instruction EXEC.SHOVE :close  4}{:instruction CODE.CAR :close  0}{:instruction INTEGER./ :close  4}{:instruction FLOAT.MIN :close  4}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction INTEGER.MAX :close  0}{:instruction BOOLEAN.DUP :close  0}{:instruction EXEC.= :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction CODE.LIST :close  0}",
  "program": "(EXEC.DO*COUNT ()CODE.FROMFLOAT FLOAT.MIN EXEC.POP (FLOAT.= FLOAT.SIN EXEC.POP (CODE.APPEND INTEGER.< BOOLEAN.DUP ))EXEC.ROT (INTEGER.> BOOLEAN.NAND CODE.DO*COUNT EXEC.= INTEGER.- EXEC.Y (FLOAT.FLUSH FLOAT.COS INTEGER.DUP ))()()INTEGER.% EXEC.DO*TIMES (CODE.DO*TIMES )CODE.NOOP BOOLEAN.NOT CODE.INSTRUCTIONS BOOLEAN.FROMFLOAT INTEGER.MIN CODE.POSITION CODE.CAR EXEC.SHOVE ()CODE.CAR INTEGER./ FLOAT.MIN BOOLEAN.FROMFLOAT INTEGER.MAX BOOLEAN.DUP EXEC.= BOOLEAN.YANK CODE.LIST )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 3 "data" : {0 1 1} } }
}
{ "id": 148,
  "genome": "{:instruction INTEGER.% :close  0}{:instruction INTEGER.FROMBOOLEAN :close  4}{:instruction EXEC.IF :close  4}{:instruction FLOAT.SWAP :close  0}{:instruction FLOAT.FROMINTEGER :close  0}{:instruction CODE.INSERT :close  0}{:instruction CODE.MEMBER :close  0}{:instruction -3441 :close  0}{:instruction FLOAT.+ :close  0}{:instruction CODE.FLUSH :close  4}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction -0.056859069749912949 :close  0}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction CODE.= :close  0}{:instruction -2095 :close  0}{:instruction EXEC.K :close  4}{:instruction CODE.NOOP :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction EXEC.YANK :close  0}{:instruction BOOLEAN.SHOVE :close  0}{:instruction CODE.LIST :close  0}{:instruction CODE.CDR :close  0}{:instruction EXEC.WHILE :close  0}{:instruction CODE.DO* :close  4}{:instruction FLOAT.FROMINTEGER :close  4}{:instruction CODE.CONS :close  0}{:instruction CODE.DO*TIMES :close  4}{:instruction CODE.NOOP :close  0}{:instruction FLOAT.> :close  4}{:instruction INTEGER.% :close  0}{:instruction CODE.YANK :close  0}{:instruction BOOLEAN.FROMFLOAT :close  4}{:instruction EXEC.WHEN :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction EXEC.DO*COUNT :close  4}",
  "program": "(INTEGER.% INTEGER.FROMBOOLEAN EXEC.IF ()()FLOAT.SWAP FLOAT.FROMINTEGER CODE.INSERT CODE.MEMBER -3441 FLOAT.+ CODE.FLUSH FLOAT.FROMBOOLEAN -0.056859069749912949 FLOAT.STACKDEPTH CODE.= -2095 EXEC.K ()()CODE.NOOP EXEC.SHOVE (EXEC.YANK BOOLEAN.SHOVE CODE.LIST CODE.CDR EXEC.WHILE (CODE.DO* ))FLOAT.FROMINTEGER CODE.CONS CODE.DO*TIMES CODE.NOOP FLOAT.> INTEGER.% CODE.YANK BOOLEAN.FROMFLOAT EXEC.WHEN (INTEGER.FROMFLOAT EXEC.DO*COUNT ()))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 149,
  "genome": "{:instruction FLOAT.STACKDEPTH :close  0}{:instruction CODE.NULL :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction FLOAT.% :close  0}{:instruction FLOAT.COS :close  4}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction EXEC.WHEN :close  0}{:instruction CODE.APPEND :close  4}{:instruction EXEC.DUP :close  0}{:instruction FLOAT.< :close  4}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction FLOAT.> :close  0}{:instruction FLOAT.= :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction 3331 :close  4}{:instruction CODE.NULL :close  0}{:instruction CODE.QUOTE :close  4}{:instruction EXEC.DO*TIMES :close  0}{:instruction EXEC.FLUSH :close  4}{:instruction CODE.STACKDEPTH :close  0}{:instruction CODE.POP :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction EXEC.IF :close  0}{:instruction INTEGER.MAX :close  4}{:instruction FLOAT.- :close  4}{:instruction INTEGER.SHOVE :close  0}{:instruction EXEC.Y :close  4}{:instruction FLOAT.SHOVE :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction FLOAT.MAX :close  0}{:instruction BOOLEAN.= :close  4}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction FLOAT.DUP :close  0}{:instruction BOOLEAN.NOT :close  0}{:instruction BOOLEAN.SWAP :close  4}{:instruction INTEGER.SHOVE :close  4}{:instruction EXEC.YANK :close  4}{:instruction CODE.STACKDEPTH :close  0}",
  "program": "(FLOAT.STACKDEPTH CODE.NULL BOOLEAN.AND FLOAT.% FLOAT.COS INTEGER.FROMFLOAT EXEC.WHEN (CODE.APPEND )EXEC.DUP (FLOAT.< )BOOLEAN.STACKDEPTH FLOAT.> FLOAT.= EXEC.SHOVE (3331 )CODE.NULL CODE.QUOTE ()EXEC.DO*TIMES (EXEC.FLUSH )CODE.STACKDEPTH CODE.POP FLOAT.SHOVE EXEC.IF (INTEGER.MAX )()FLOAT.- INTEGER.SHOVE EXEC.Y ()FLOAT.SHOVE FLOAT.YANKDUP CODE.FROMBOOLEAN FLOAT.MAX BOOLEAN.= CODE.INSTRUCTIONS FLOAT.DUP BOOLEAN.NOT BOOLEAN.SWAP INTEGER.SHOVE EXEC.YANK CODE.STACKDEPTH )",
  "result-set": { "integer-stack": {"size": 1 "data" : {0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 151,
  "genome": "{:instruction EXEC.DO*RANGE :close  0}{:instruction CODE.DO*COUNT :close  4}{:instruction INTEGER./ :close  0}{:instruction EXEC.POP :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction CODE.CONS :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction CODE.LENGTH :close  4}{:instruction CODE.DO*RANGE :close  4}{:instruction INTEGER.SHOVE :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction CODE.POSITION :close  0}{:instruction FLOAT.SWAP :close  4}{:instruction CODE.MEMBER :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction INTEGER.+ :close  0}",
  "program": "(EXEC.DO*RANGE (CODE.DO*COUNT )INTEGER./ EXEC.POP (BOOLEAN.FROMFLOAT CODE.CONS CODE.DO*COUNT CODE.LENGTH )CODE.DO*RANGE INTEGER.SHOVE BOOLEAN.NOR CODE.POSITION FLOAT.SWAP CODE.MEMBER CODE.FROMBOOLEAN INTEGER.+ )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 152,
  "genome": "{:instruction EXEC.ROT :close  4}{:instruction FLOAT.FROMDATA :close  4}{:instruction CODE.DO* :close  0}{:instruction CODE.MEMBER :close  0}{:instruction FLOAT.DUP :close  0}{:instruction CODE.YANKDUP :close  0}{:instruction CODE.INSERT :close  0}{:instruction FLOAT.FROMINTEGER :close  0}{:instruction EXEC.DO*WHILE :close  4}{:instruction CODE.NTH :close  0}{:instruction FLOAT.YANKDUP :close  4}{:instruction INTEGER.STACKDEPTH :close  4}{:instruction BOOLEAN.FLUSH :close  4}{:instruction EXEC.S :close  4}{:instruction FLOAT.FROMINTEGER :close  0}{:instruction FLOAT.< :close  0}{:instruction EXEC.YANKDUP :close  4}{:instruction INTEGER.+ :close  0}{:instruction CODE.POP :close  4}{:instruction INTEGER.< :close  4}{:instruction CODE.DUP :close  4}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction CODE.QUOTE :close  0}{:instruction CODE.ATOM :close  4}{:instruction FLOAT.SIN :close  4}",
  "program": "(EXEC.ROT ()()()FLOAT.FROMDATA CODE.DO* CODE.MEMBER FLOAT.DUP CODE.YANKDUP CODE.INSERT FLOAT.FROMINTEGER EXEC.DO*WHILE ()CODE.NTH FLOAT.YANKDUP INTEGER.STACKDEPTH BOOLEAN.FLUSH EXEC.S ()()()FLOAT.FROMINTEGER FLOAT.< EXEC.YANKDUP INTEGER.+ CODE.POP INTEGER.< CODE.DUP FLOAT.STACKDEPTH CODE.QUOTE (CODE.ATOM )FLOAT.SIN )",
  "result-set": { "integer-stack": {"size": 1 "data" : {1} },
                  "float-stack": {"size": 1 "data" : {0} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 153,
  "genome": "{:instruction BOOLEAN.SHOVE :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction FLOAT.% :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction BOOLEAN.= :close  0}{:instruction CODE.QUOTE :close  0}{:instruction FLOAT.* :close  0}{:instruction CODE.FROMBOOLEAN :close  0}",
  "program": "(BOOLEAN.SHOVE EXEC.DO*COUNT (BOOLEAN.OR FLOAT.% BOOLEAN.FROMFLOAT BOOLEAN.= CODE.QUOTE (FLOAT.* CODE.FROMBOOLEAN )))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 154,
  "genome": "{:instruction INTEGER./ :close  0}{:instruction CODE.CDR :close  0}{:instruction FLOAT.- :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction CODE.POP :close  0}{:instruction CODE.CONS :close  0}{:instruction INTEGER.DUP :close  0}{:instruction CODE.SWAP :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction EXEC.YANK :close  0}{:instruction EXEC.YANK :close  0}{:instruction FLOAT.YANKDUP :close  4}{:instruction INTEGER.> :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction EXEC.DO*RANGE :close  4}{:instruction FLOAT.FLUSH :close  0}{:instruction EXEC.ROT :close  0}{:instruction CODE.DUP :close  0}{:instruction INTEGER.DUP :close  0}{:instruction FALSE :close  0}",
  "program": "(INTEGER./ CODE.CDR FLOAT.- EXEC.SHOVE (CODE.POP CODE.CONS INTEGER.DUP CODE.SWAP EXEC.DO*TIMES (EXEC.YANK EXEC.YANK FLOAT.YANKDUP ))INTEGER.> BOOLEAN.STACKDEPTH EXEC.DO*RANGE ()FLOAT.FLUSH EXEC.ROT (CODE.DUP INTEGER.DUP FALSE )()())",
  "result-set": { "integer-stack": {"size": 2 "data" : {0 0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 155,
  "genome": "{:instruction CODE.POP :close  0}{:instruction EXEC.YANK :close  0}{:instruction FLOAT.COS :close  0}{:instruction EXEC.S :close  0}{:instruction CODE.IF :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction INTEGER./ :close  0}{:instruction FLOAT.= :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction FLOAT.- :close  0}{:instruction EXEC.SWAP :close  4}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction FLOAT.YANK :close  0}{:instruction INTEGER.+ :close  0}{:instruction CODE.CAR :close  0}{:instruction FLOAT.> :close  0}{:instruction CODE.LENGTH :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction INTEGER.YANKDUP :close  4}{:instruction CODE.ATOM :close  0}",
  "program": "(CODE.POP EXEC.YANK FLOAT.COS EXEC.S (CODE.IF INTEGER.STACKDEPTH INTEGER./ FLOAT.= BOOLEAN.STACKDEPTH FLOAT.- EXEC.SWAP ()())()(BOOLEAN.STACKDEPTH CODE.DO*TIMES FLOAT.YANK INTEGER.+ CODE.CAR FLOAT.> CODE.LENGTH BOOLEAN.STACKDEPTH INTEGER.YANKDUP )CODE.ATOM )",
  "result-set": { "integer-stack": {"size": 4 "data" : {0 0 0 0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 156,
  "genome": "{:instruction CODE.NULL :close  0}{:instruction CODE.SIZE :close  0}{:instruction CODE.LENGTH :close  4}{:instruction INTEGER.ROT :close  0}{:instruction CODE.SHOVE :close  4}{:instruction BOOLEAN.= :close  4}{:instruction CODE.STACKDEPTH :close  0}{:instruction BOOLEAN.DUP :close  4}{:instruction EXEC.DUP :close  0}{:instruction FLOAT.FROMINTEGER :close  0}{:instruction EXEC.IF :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction BOOLEAN.STACKDEPTH :close  4}{:instruction CODE.NTHCDR :close  0}{:instruction INTEGER./ :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction CODE.NTH :close  4}{:instruction EXEC.STACKDEPTH :close  0}{:instruction CODE.POSITION :close  0}{:instruction CODE.APPEND :close  0}{:instruction FLOAT.* :close  4}{:instruction INTEGER.= :close  0}{:instruction BOOLEAN.DUP :close  0}{:instruction BOOLEAN.NOR :close  4}{:instruction FLOAT.= :close  0}{:instruction BOOLEAN.ROT :close  4}{:instruction FLOAT.* :close  0}{:instruction CODE.FROMFLOAT :close  4}{:instruction BOOLEAN.SHOVE :close  4}{:instruction CODE.FROMFLOAT :close  0}{:instruction CODE.MEMBER :close  0}{:instruction FLOAT.DUP :close  4}{:instruction EXEC.SHOVE :close  0}{:instruction INTEGER.MAX :close  4}{:instruction EXEC.YANKDUP :close  0}{:instruction CODE.NULL :close  0}{:instruction CODE.FLUSH :close  0}",
  "program": "(CODE.NULL CODE.SIZE CODE.LENGTH INTEGER.ROT CODE.SHOVE BOOLEAN.= CODE.STACKDEPTH BOOLEAN.DUP EXEC.DUP (FLOAT.FROMINTEGER EXEC.IF (EXEC.DO*TIMES (BOOLEAN.STACKDEPTH ))())CODE.NTHCDR INTEGER./ FLOAT.YANKDUP BOOLEAN.YANK CODE.NTH EXEC.STACKDEPTH CODE.POSITION CODE.APPEND FLOAT.* INTEGER.= BOOLEAN.DUP BOOLEAN.NOR FLOAT.= BOOLEAN.ROT FLOAT.* CODE.FROMFLOAT BOOLEAN.SHOVE CODE.FROMFLOAT CODE.MEMBER FLOAT.DUP EXEC.SHOVE (INTEGER.MAX )EXEC.YANKDUP CODE.NULL CODE.FLUSH )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 157,
  "genome": "",
  "program": "()",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 158,
  "genome": "",
  "program": "()",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 159,
  "genome": "{:instruction FLOAT.- :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction FLOAT.SIN :close  0}{:instruction FLOAT./ :close  0}{:instruction EXEC.= :close  0}{:instruction CODE.FROMFLOAT :close  4}{:instruction FLOAT.= :close  4}{:instruction EXEC.DO*TIMES :close  0}{:instruction FLOAT.FLUSH :close  0}{:instruction FLOAT.FROMDATA :close  0}{:instruction CODE.DO* :close  4}{:instruction BOOLEAN.POP :close  0}{:instruction 70 :close  4}{:instruction FLOAT.SHOVE :close  0}{:instruction INTEGER.ROT :close  0}{:instruction CODE.= :close  0}{:instruction CODE.MEMBER :close  4}{:instruction INTEGER.DUP :close  0}",
  "program": "(FLOAT.- EXEC.DO*WHILE (FLOAT.SIN FLOAT./ EXEC.= CODE.FROMFLOAT )FLOAT.= EXEC.DO*TIMES (FLOAT.FLUSH FLOAT.FROMDATA CODE.DO* )BOOLEAN.POP 70 FLOAT.SHOVE INTEGER.ROT CODE.= CODE.MEMBER INTEGER.DUP )",
  "result-set": { "integer-stack": {"size": 4 "data" : {70 70 70 70} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 160,
  "genome": "{:instruction CODE.INSTRUCTIONS :close  0}{:instruction FLOAT.= :close  4}{:instruction EXEC.WHEN :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction CODE.CONTAINER :close  0}{:instruction FLOAT.TAN :close  0}{:instruction FLOAT.POP :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction EXEC.S :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction FLOAT.MAX :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction CODE.CDR :close  4}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction CODE.YANKDUP :close  0}{:instruction -2262 :close  4}{:instruction CODE.POSITION :close  0}",
  "program": "(CODE.INSTRUCTIONS FLOAT.= EXEC.WHEN (CODE.FROMBOOLEAN CODE.CONTAINER FLOAT.TAN FLOAT.POP CODE.STACKDEPTH EXEC.S (FLOAT.SHOVE FLOAT.MAX FLOAT.SWAP CODE.CDR )()())BOOLEAN.FROMINTEGER CODE.YANKDUP -2262 CODE.POSITION )",
  "result-set": { "integer-stack": {"size": 1 "data" : {-2262} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {1} } }
}
{ "id": 161,
  "genome": "{:instruction FLOAT.FROMINTEGER :close  0}{:instruction CODE.INSERT :close  4}{:instruction FLOAT.FROMBOOLEAN :close  4}{:instruction INTEGER.DUP :close  4}{:instruction EXEC.YANK :close  4}{:instruction INTEGER.SWAP :close  0}{:instruction CODE.INSTRUCTIONS :close  4}{:instruction INTEGER.ROT :close  0}{:instruction FLOAT.MIN :close  0}{:instruction BOOLEAN.POP :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction CODE.INSERT :close  4}{:instruction FLOAT.MAX :close  0}{:instruction FLOAT.FROMDATA :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction CODE.IF :close  0}{:instruction BOOLEAN.SWAP :close  4}{:instruction CODE.FROMFLOAT :close  4}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction EXEC.ROT :close  0}{:instruction BOOLEAN.YANKDUP :close  0}{:instruction INTEGER.DUP :close  0}{:instruction CODE.SIZE :close  0}{:instruction INTEGER.DUP :close  4}{:instruction CODE.IF :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction CODE.YANKDUP :close  0}{:instruction FLOAT.% :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction EXEC.SWAP :close  4}{:instruction CODE.QUOTE :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction FLOAT.MIN :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction EXEC.DUP :close  0}{:instruction FLOAT.< :close  0}{:instruction INTEGER.POP :close  4}{:instruction EXEC.DUP :close  0}{:instruction CODE.CONS :close  0}",
  "program": "(FLOAT.FROMINTEGER CODE.INSERT FLOAT.FROMBOOLEAN INTEGER.DUP EXEC.YANK INTEGER.SWAP CODE.INSTRUCTIONS INTEGER.ROT FLOAT.MIN BOOLEAN.POP BOOLEAN.FLUSH INTEGER.FROMFLOAT CODE.INSERT FLOAT.MAX FLOAT.FROMDATA BOOLEAN.AND CODE.IF BOOLEAN.SWAP CODE.FROMFLOAT CODE.INSTRUCTIONS EXEC.ROT (BOOLEAN.YANKDUP INTEGER.DUP CODE.SIZE INTEGER.DUP )()()CODE.IF INTEGER.SWAP CODE.YANKDUP FLOAT.% BOOLEAN.OR EXEC.SWAP ()()CODE.QUOTE (EXEC.YANKDUP FLOAT.MIN EXEC.DO*COUNT (EXEC.DUP (FLOAT.< INTEGER.POP )))EXEC.DUP (CODE.CONS ))",
  "result-set": { "integer-stack": {"size": 1 "data" : {125} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 162,
  "genome": "{:instruction CODE.NTHCDR :close  0}{:instruction INTEGER.% :close  4}{:instruction CODE.NTH :close  0}{:instruction BOOLEAN.FROMINTEGER :close  4}{:instruction FLOAT.SIN :close  0}{:instruction BOOLEAN.SWAP :close  4}{:instruction BOOLEAN.ROT :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction FLOAT.MAX :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction CODE.CONTAINER :close  0}{:instruction EXEC.FLUSH :close  4}{:instruction INTEGER.DUP :close  0}{:instruction TRUE :close  4}{:instruction BOOLEAN.DUP :close  0}{:instruction BOOLEAN.SWAP :close  0}{:instruction CODE.NOOP :close  0}{:instruction INTEGER.* :close  0}{:instruction BOOLEAN.POP :close  4}{:instruction EXEC.STACKDEPTH :close  4}{:instruction EXEC.ROT :close  0}{:instruction INTEGER.DUP :close  0}{:instruction BOOLEAN.SHOVE :close  0}{:instruction INTEGER./ :close  0}{:instruction INTEGER.+ :close  0}{:instruction INTEGER.POP :close  0}{:instruction FLOAT.FROMBOOLEAN :close  4}{:instruction BOOLEAN.= :close  4}{:instruction CODE.DO*TIMES :close  0}{:instruction CODE.DUP :close  0}{:instruction FLOAT.MIN :close  0}{:instruction BOOLEAN.= :close  0}{:instruction BOOLEAN.= :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction FLOAT.SIN :close  0}{:instruction EXEC.SHOVE :close  4}{:instruction FLOAT.YANK :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction EXEC.WHEN :close  0}{:instruction FLOAT.ROT :close  0}{:instruction BOOLEAN.NAND :close  4}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction FLOAT.YANKDUP :close  4}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction INTEGER.% :close  0}",
  "program": "(CODE.NTHCDR INTEGER.% CODE.NTH BOOLEAN.FROMINTEGER FLOAT.SIN BOOLEAN.SWAP BOOLEAN.ROT FLOAT.SHOVE FLOAT.MAX INTEGER.FROMFLOAT CODE.CONTAINER EXEC.FLUSH INTEGER.DUP TRUE BOOLEAN.DUP BOOLEAN.SWAP CODE.NOOP INTEGER.* BOOLEAN.POP EXEC.STACKDEPTH EXEC.ROT (INTEGER.DUP BOOLEAN.SHOVE INTEGER./ INTEGER.+ INTEGER.POP FLOAT.FROMBOOLEAN )()()BOOLEAN.= CODE.DO*TIMES CODE.DUP FLOAT.MIN BOOLEAN.= BOOLEAN.= BOOLEAN.YANK FLOAT.SIN EXEC.SHOVE ()FLOAT.YANK CODE.FROMINTEGER EXEC.WHEN (FLOAT.ROT BOOLEAN.NAND )INTEGER.FROMFLOAT FLOAT.YANKDUP FLOAT.STACKDEPTH INTEGER.% )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 163,
  "genome": "{:instruction INTEGER.* :close  0}{:instruction BOOLEAN.SHOVE :close  0}{:instruction BOOLEAN.POP :close  0}{:instruction FLOAT.- :close  0}{:instruction FLOAT.> :close  0}{:instruction FLOAT.COS :close  4}{:instruction EXEC.DO*COUNT :close  4}{:instruction FLOAT.COS :close  0}{:instruction 1290 :close  0}{:instruction CODE.CONTAINER :close  0}{:instruction FLOAT.FLUSH :close  0}{:instruction CODE.DUP :close  0}{:instruction FLOAT.POP :close  4}{:instruction FLOAT.SWAP :close  0}{:instruction INTEGER.POP :close  4}{:instruction CODE.FLUSH :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction CODE.SHOVE :close  0}{:instruction FLOAT.SIN :close  0}{:instruction INTEGER.= :close  0}{:instruction INTEGER.POP :close  0}{:instruction BOOLEAN.SHOVE :close  0}{:instruction CODE.CAR :close  4}{:instruction FLOAT.YANK :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction EXEC.S :close  0}{:instruction FLOAT.YANK :close  0}{:instruction INTEGER.FROMFLOAT :close  0}",
  "program": "(INTEGER.* BOOLEAN.SHOVE BOOLEAN.POP FLOAT.- FLOAT.> FLOAT.COS EXEC.DO*COUNT ()FLOAT.COS 1290 CODE.CONTAINER FLOAT.FLUSH CODE.DUP FLOAT.POP FLOAT.SWAP INTEGER.POP CODE.FLUSH INTEGER.FROMFLOAT CODE.SHOVE FLOAT.SIN INTEGER.= INTEGER.POP BOOLEAN.SHOVE CODE.CAR FLOAT.YANK CODE.NTHCDR EXEC.S (FLOAT.YANK INTEGER.FROMFLOAT )()())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 164,
  "genome": "{:instruction CODE.CONTAINER :close  0}{:instruction EXEC.POP :close  4}{:instruction CODE.SIZE :close  0}{:instruction CODE.ROT :close  4}{:instruction EXEC.= :close  0}",
  "program": "(CODE.CONTAINER EXEC.POP ()CODE.SIZE CODE.ROT EXEC.= )",
  "result-set": { "integer-stack": {"size": 1 "data" : {7} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 165,
  "genome": "{:instruction CODE.APPEND :close  0}{:instruction FLOAT.SIN :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction FALSE :close  0}{:instruction FLOAT.FROMDATA :close  0}{:instruction CODE.CDR :close  0}{:instruction CODE.ATOM :close  0}{:instruction INTEGER.MIN :close  0}{:instruction FLOAT.ROT :close  0}{:instruction FLOAT.COS :close  0}{:instruction FLOAT.- :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction FLOAT.COS :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction EXEC.K :close  0}{:instruction FLOAT.* :close  0}{:instruction INTEGER.> :close  0}{:instruction FLOAT.* :close  0}{:instruction FLOAT.* :close  0}{:instruction FLOAT.FROMINTEGER :close  4}{:instruction EXEC.= :close  4}{:instruction CODE.POSITION :close  0}{:instruction BOOLEAN.FROMFLOAT :close  4}{:instruction CODE.EXTRACT :close  4}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction CODE.NTH :close  0}{:instruction INTEGER.DUP :close  0}{:instruction INTEGER.> :close  0}{:instruction CODE.NOOP :close  0}{:instruction INTEGER.ROT :close  4}{:instruction FLOAT.POP :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction INTEGER.MIN :close  0}{:instruction CODE.POSITION :close  0}{:instruction EXEC.DO*RANGE :close  4}{:instruction EXEC.IF :close  4}{:instruction INTEGER.> :close  0}{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction INTEGER.% :close  4}{:instruction FLOAT./ :close  0}",
  "program": "(CODE.APPEND FLOAT.SIN INTEGER.SHOVE FALSE FLOAT.FROMDATA CODE.CDR CODE.ATOM INTEGER.MIN FLOAT.ROT FLOAT.COS FLOAT.- INTEGER.SWAP FLOAT.COS CODE.STACKDEPTH EXEC.K (FLOAT.* INTEGER.> FLOAT.* FLOAT.* FLOAT.FROMINTEGER )()EXEC.= CODE.POSITION BOOLEAN.FROMFLOAT CODE.EXTRACT FLOAT.FROMBOOLEAN CODE.NTH INTEGER.DUP INTEGER.> CODE.NOOP INTEGER.ROT FLOAT.POP EXEC.YANKDUP EXEC.DO*RANGE (INTEGER.MIN CODE.POSITION EXEC.DO*RANGE ())EXEC.IF ()()INTEGER.> INTEGER.FROMBOOLEAN INTEGER.% FLOAT./ )",
  "result-set": { "integer-stack": {"size": 1 "data" : {0} },
                  "float-stack": {"size": 1 "data" : {0} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 167,
  "genome": "{:instruction EXEC.SWAP :close  4}{:instruction CODE.DO*COUNT :close  0}{:instruction EXEC.SWAP :close  4}{:instruction CODE.CDR :close  4}{:instruction FLOAT.> :close  0}{:instruction EXEC.YANK :close  0}{:instruction CODE.FROMFLOAT :close  0}{:instruction BOOLEAN.NOT :close  0}{:instruction FLOAT.* :close  0}{:instruction -0.87327049762785214 :close  0}{:instruction BOOLEAN.DUP :close  0}{:instruction CODE.LENGTH :close  0}{:instruction EXEC.= :close  0}{:instruction INTEGER.FROMFLOAT :close  0}",
  "program": "(EXEC.SWAP ()()CODE.DO*COUNT EXEC.SWAP ()()CODE.CDR FLOAT.> EXEC.YANK CODE.FROMFLOAT BOOLEAN.NOT FLOAT.* -0.87327049762785214 BOOLEAN.DUP CODE.LENGTH EXEC.= INTEGER.FROMFLOAT )",
  "result-set": { "integer-stack": {"size": 2 "data" : {0 17} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 168,
  "genome": "{:instruction CODE.STACKDEPTH :close  0}{:instruction INTEGER./ :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction INTEGER.+ :close  0}",
  "program": "(CODE.STACKDEPTH INTEGER./ EXEC.DO*WHILE (INTEGER.+ ))",
  "result-set": { "integer-stack": {"size": 1 "data" : {1} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 169,
  "genome": "{:instruction FLOAT.- :close  0}{:instruction INTEGER.FLUSH :close  0}{:instruction FLOAT.SHOVE :close  4}{:instruction INTEGER.POP :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction EXEC.K :close  4}{:instruction CODE.STACKDEPTH :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction EXEC.WHILE :close  0}",
  "program": "(FLOAT.- INTEGER.FLUSH FLOAT.SHOVE INTEGER.POP BOOLEAN.AND INTEGER.FROMFLOAT EXEC.K ()()CODE.STACKDEPTH BOOLEAN.YANK EXEC.WHILE ())",
  "result-set": { "integer-stack": {"size": 1 "data" : {1} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 170,
  "genome": "{:instruction CODE.POSITION :close  4}{:instruction EXEC.DO*COUNT :close  0}{:instruction CODE.MEMBER :close  0}{:instruction CODE.SIZE :close  4}{:instruction INTEGER.DUP :close  0}{:instruction FLOAT.FROMDATA :close  4}{:instruction CODE.NTH :close  0}{:instruction INTEGER.< :close  0}{:instruction EXEC.FLUSH :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction CODE.YANK :close  0}{:instruction CODE.ROT :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction INTEGER.< :close  0}{:instruction EXEC.Y :close  4}{:instruction CODE.DO*RANGE :close  0}{:instruction CODE.NULL :close  0}{:instruction CODE.NOOP :close  4}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction FLOAT.SHOVE :close  4}{:instruction INTEGER.= :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction -0.70204557797453493 :close  0}{:instruction INTEGER.FLUSH :close  4}{:instruction EXEC.DUP :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction CODE.IF :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction CODE.FROMINTEGER :close  4}{:instruction INTEGER.SHOVE :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction EXEC.ROT :close  0}{:instruction EXEC.ROT :close  4}{:instruction EXEC.POP :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction FLOAT.DUP :close  0}",
  "program": "(CODE.POSITION EXEC.DO*COUNT (CODE.MEMBER CODE.SIZE )INTEGER.DUP FLOAT.FROMDATA CODE.NTH INTEGER.< EXEC.FLUSH BOOLEAN.FROMFLOAT CODE.YANK CODE.ROT CODE.STACKDEPTH INTEGER.< EXEC.Y ()CODE.DO*RANGE CODE.NULL CODE.NOOP CODE.INSTRUCTIONS FLOAT.SHOVE INTEGER.= BOOLEAN.FROMINTEGER -0.70204557797453493 INTEGER.FLUSH EXEC.DUP (CODE.DO*COUNT CODE.IF BOOLEAN.NOR CODE.FROMINTEGER )INTEGER.SHOVE EXEC.DO*COUNT (EXEC.ROT (EXEC.ROT ()()())(EXEC.POP (BOOLEAN.YANK FLOAT.DUP ))()))",
  "result-set": { "integer-stack": {"size": 1 "data" : {48} },
                  "float-stack": {"size": 1 "data" : {0.076923} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 171,
  "genome": "{:instruction FLOAT.MAX :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction CODE.CDR :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction CODE.LENGTH :close  0}{:instruction CODE.CONS :close  4}",
  "program": "(FLOAT.MAX BOOLEAN.YANK CODE.CDR CODE.FROMINTEGER CODE.LENGTH CODE.CONS )",
  "result-set": { "integer-stack": {"size": 1 "data" : {5} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 172,
  "genome": "{:instruction FLOAT.> :close  4}{:instruction EXEC.K :close  0}{:instruction INTEGER.> :close  0}{:instruction CODE.INSERT :close  0}{:instruction EXEC.SWAP :close  4}{:instruction BOOLEAN.YANK :close  4}{:instruction EXEC.YANKDUP :close  4}{:instruction FLOAT.YANK :close  0}{:instruction FLOAT.< :close  0}{:instruction CODE.CAR :close  0}{:instruction INTEGER.+ :close  0}{:instruction CODE.YANK :close  0}{:instruction EXEC.YANK :close  0}{:instruction EXEC.WHEN :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction CODE.POP :close  0}{:instruction CODE.DO* :close  0}{:instruction INTEGER.< :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction CODE.LIST :close  4}{:instruction CODE.= :close  0}{:instruction CODE.IF :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction EXEC.S :close  0}{:instruction INTEGER./ :close  0}{:instruction FLOAT.COS :close  0}{:instruction INTEGER.% :close  4}{:instruction EXEC.DO*TIMES :close  0}{:instruction FLOAT.* :close  0}{:instruction INTEGER.- :close  0}{:instruction INTEGER.FLUSH :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction FLOAT.SWAP :close  4}{:instruction CODE.INSTRUCTIONS :close  4}",
  "program": "(FLOAT.> EXEC.K (INTEGER.> CODE.INSERT EXEC.SWAP ()())()BOOLEAN.YANK EXEC.YANKDUP FLOAT.YANK FLOAT.< CODE.CAR INTEGER.+ CODE.YANK EXEC.YANK EXEC.WHEN (EXEC.DO*WHILE (CODE.POP CODE.DO* INTEGER.< INTEGER.FROMFLOAT CODE.LIST ))CODE.= CODE.IF EXEC.YANKDUP EXEC.S (INTEGER./ FLOAT.COS INTEGER.% )()()EXEC.DO*TIMES (FLOAT.* INTEGER.- INTEGER.FLUSH INTEGER.STACKDEPTH FLOAT.SWAP )CODE.INSTRUCTIONS )",
  "result-set": { "integer-stack": {"size": 1 "data" : {0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 173,
  "genome": "{:instruction FLOAT.FROMINTEGER :close  0}{:instruction EXEC.S :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction EXEC.DO*TIMES :close  4}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction FLOAT.POP :close  0}{:instruction INTEGER.= :close  0}{:instruction FLOAT.MIN :close  4}{:instruction INTEGER.% :close  0}{:instruction CODE.= :close  4}{:instruction -0.47786288137497912 :close  0}{:instruction INTEGER.FROMFLOAT :close  4}{:instruction INTEGER.DUP :close  0}{:instruction FLOAT.MIN :close  0}{:instruction BOOLEAN.NOT :close  0}{:instruction BOOLEAN.SHOVE :close  4}{:instruction BOOLEAN.DUP :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction CODE.CDR :close  4}{:instruction CODE.CONS :close  4}{:instruction INTEGER.* :close  4}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction EXEC.FLUSH :close  4}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction CODE.CAR :close  0}{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction CODE.CAR :close  0}{:instruction BOOLEAN.SWAP :close  0}{:instruction INTEGER.POP :close  4}{:instruction CODE.DO*TIMES :close  4}{:instruction CODE.MEMBER :close  0}{:instruction EXEC.STACKDEPTH :close  0}{:instruction CODE.DO*RANGE :close  4}{:instruction INTEGER.MIN :close  0}{:instruction EXEC.DUP :close  0}",
  "program": "(FLOAT.FROMINTEGER EXEC.S (CODE.DO*TIMES EXEC.DO*TIMES ())()()FLOAT.FROMBOOLEAN FLOAT.POP INTEGER.= FLOAT.MIN INTEGER.% CODE.= -0.47786288137497912 INTEGER.FROMFLOAT INTEGER.DUP FLOAT.MIN BOOLEAN.NOT BOOLEAN.SHOVE BOOLEAN.DUP FLOAT.SWAP CODE.CDR CODE.CONS INTEGER.* FLOAT.STACKDEPTH EXEC.FLUSH FLOAT.FROMBOOLEAN CODE.CAR INTEGER.FROMBOOLEAN BOOLEAN.FROMINTEGER CODE.CAR BOOLEAN.SWAP INTEGER.POP CODE.DO*TIMES CODE.MEMBER EXEC.STACKDEPTH CODE.DO*RANGE INTEGER.MIN EXEC.DUP ())",
  "result-set": { "integer-stack": {"size": 2 "data" : {0 0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 175,
  "genome": "{:instruction FLOAT.ROT :close  0}{:instruction BOOLEAN.SWAP :close  4}{:instruction CODE.DO* :close  0}{:instruction INTEGER.MAX :close  4}{:instruction CODE.DO :close  0}{:instruction FLOAT.YANK :close  4}{:instruction FLOAT.SHOVE :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction BOOLEAN.POP :close  4}{:instruction BOOLEAN.SHOVE :close  0}{:instruction CODE.= :close  0}{:instruction BOOLEAN.NAND :close  0}{:instruction FALSE :close  0}{:instruction BOOLEAN.OR :close  4}{:instruction CODE.QUOTE :close  0}{:instruction EXEC.DUP :close  4}{:instruction EXEC.YANKDUP :close  4}{:instruction EXEC.DO*RANGE :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction FLOAT.SIN :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction BOOLEAN.POP :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction FLOAT.YANK :close  0}{:instruction INTEGER.YANK :close  0}{:instruction CODE.FROMFLOAT :close  0}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction CODE.CDR :close  0}{:instruction CODE.CDR :close  0}{:instruction CODE.DUP :close  0}{:instruction CODE.MEMBER :close  0}{:instruction CODE.LENGTH :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction BOOLEAN.FROMINTEGER :close  4}{:instruction INTEGER.% :close  0}{:instruction FLOAT.= :close  0}{:instruction CODE.CAR :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction -3832 :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction INTEGER.DUP :close  4}{:instruction BOOLEAN.= :close  0}",
  "program": "(FLOAT.ROT BOOLEAN.SWAP CODE.DO* INTEGER.MAX CODE.DO FLOAT.YANK FLOAT.SHOVE BOOLEAN.FLUSH BOOLEAN.POP BOOLEAN.SHOVE CODE.= BOOLEAN.NAND FALSE BOOLEAN.OR CODE.QUOTE (EXEC.DUP ())EXEC.YANKDUP EXEC.DO*RANGE (EXEC.DO*COUNT (FLOAT.SIN CODE.DO*TIMES CODE.NTHCDR BOOLEAN.POP CODE.DO*COUNT FLOAT.YANK INTEGER.YANK CODE.FROMFLOAT FLOAT.STACKDEPTH CODE.CDR CODE.CDR CODE.DUP CODE.MEMBER CODE.LENGTH CODE.FROMINTEGER BOOLEAN.FROMINTEGER ))INTEGER.% FLOAT.= CODE.CAR EXEC.DO*WHILE (-3832 BOOLEAN.ROT INTEGER.DUP )BOOLEAN.= )",
  "result-set": { "integer-stack": {"size": 2 "data" : {-3832 -3832} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 176,
  "genome": "{:instruction BOOLEAN.NOT :close  0}{:instruction FLOAT.SIN :close  0}{:instruction EXEC.IF :close  0}{:instruction FLOAT.= :close  0}",
  "program": "(BOOLEAN.NOT FLOAT.SIN EXEC.IF (FLOAT.= )())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 178,
  "genome": "{:instruction CODE.YANK :close  4}{:instruction CODE.FROMFLOAT :close  0}{:instruction EXEC.S :close  0}{:instruction INTEGER.FROMFLOAT :close  4}{:instruction CODE.DO*TIMES :close  0}{:instruction EXEC.IF :close  0}{:instruction BOOLEAN.POP :close  4}{:instruction FLOAT.YANK :close  0}{:instruction FLOAT.MAX :close  0}{:instruction CODE.YANKDUP :close  0}{:instruction EXEC.= :close  0}{:instruction FLOAT.POP :close  0}{:instruction FLOAT.MIN :close  0}{:instruction INTEGER.MIN :close  0}{:instruction FLOAT.MIN :close  0}{:instruction CODE.LIST :close  0}{:instruction EXEC.POP :close  0}{:instruction CODE.IF :close  4}{:instruction EXEC.DO*TIMES :close  4}{:instruction CODE.INSERT :close  4}{:instruction CODE.DO*COUNT :close  0}{:instruction INTEGER.+ :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction CODE.ROT :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction INTEGER.+ :close  0}{:instruction CODE.ROT :close  0}{:instruction CODE.CONS :close  0}{:instruction FLOAT.SIN :close  4}{:instruction CODE.LIST :close  0}{:instruction EXEC.DUP :close  4}{:instruction FLOAT.YANK :close  0}{:instruction EXEC.IF :close  4}{:instruction CODE.FROMINTEGER :close  4}",
  "program": "(CODE.YANK CODE.FROMFLOAT EXEC.S (INTEGER.FROMFLOAT )()()CODE.DO*TIMES EXEC.IF (BOOLEAN.POP )()FLOAT.YANK FLOAT.MAX CODE.YANKDUP EXEC.= FLOAT.POP FLOAT.MIN INTEGER.MIN FLOAT.MIN CODE.LIST EXEC.POP (CODE.IF )EXEC.DO*TIMES ()CODE.INSERT CODE.DO*COUNT INTEGER.+ CODE.DO*TIMES CODE.ROT CODE.NTHCDR INTEGER.+ CODE.ROT CODE.CONS FLOAT.SIN CODE.LIST EXEC.DUP ()FLOAT.YANK EXEC.IF ()()CODE.FROMINTEGER )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 179,
  "genome": "{:instruction CODE.IF :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction CODE.CDR :close  0}{:instruction INTEGER.STACKDEPTH :close  4}{:instruction CODE.YANK :close  4}{:instruction FLOAT.* :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction CODE.APPEND :close  0}{:instruction CODE.NOOP :close  0}{:instruction INTEGER.< :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction CODE.SHOVE :close  0}{:instruction CODE.DUP :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction CODE.DO*RANGE :close  4}{:instruction EXEC.K :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction BOOLEAN.SHOVE :close  4}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction CODE.IF :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction CODE.MEMBER :close  0}{:instruction FLOAT.YANKDUP :close  4}{:instruction INTEGER.MIN :close  0}{:instruction FLOAT.SWAP :close  4}{:instruction CODE.DO :close  4}{:instruction FLOAT.TAN :close  0}{:instruction EXEC.= :close  0}{:instruction FLOAT.= :close  0}{:instruction BOOLEAN.SHOVE :close  4}{:instruction EXEC.DO*WHILE :close  0}{:instruction CODE.FROMBOOLEAN :close  4}{:instruction FLOAT.- :close  0}{:instruction EXEC.= :close  0}{:instruction EXEC.K :close  0}",
  "program": "(CODE.IF EXEC.DO*RANGE (CODE.CDR INTEGER.STACKDEPTH )CODE.YANK FLOAT.* FLOAT.SHOVE CODE.APPEND CODE.NOOP INTEGER.< EXEC.DO*RANGE (CODE.SHOVE CODE.DUP CODE.FROMBOOLEAN CODE.DO*RANGE )EXEC.K (FLOAT.SWAP BOOLEAN.SHOVE )()BOOLEAN.FROMINTEGER CODE.IF CODE.FROMINTEGER FLOAT.YANKDUP CODE.FROMBOOLEAN FLOAT.YANKDUP INTEGER.YANKDUP CODE.MEMBER FLOAT.YANKDUP INTEGER.MIN FLOAT.SWAP CODE.DO FLOAT.TAN EXEC.= FLOAT.= BOOLEAN.SHOVE EXEC.DO*WHILE (CODE.FROMBOOLEAN )FLOAT.- EXEC.= EXEC.K ()())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 181,
  "genome": "{:instruction EXEC.FLUSH :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction INTEGER.> :close  0}{:instruction CODE.SIZE :close  0}{:instruction BOOLEAN.SWAP :close  0}{:instruction BOOLEAN.STACKDEPTH :close  4}{:instruction BOOLEAN.NAND :close  4}{:instruction BOOLEAN.STACKDEPTH :close  4}{:instruction FLOAT.MAX :close  0}{:instruction CODE.CAR :close  0}{:instruction CODE.CDR :close  0}{:instruction CODE.CONTAINER :close  0}{:instruction BOOLEAN.POP :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction BOOLEAN.NAND :close  0}{:instruction CODE.SWAP :close  0}{:instruction CODE.CONS :close  0}{:instruction BOOLEAN.POP :close  0}{:instruction INTEGER.+ :close  0}",
  "program": "(EXEC.FLUSH EXEC.YANKDUP INTEGER.> CODE.SIZE BOOLEAN.SWAP BOOLEAN.STACKDEPTH BOOLEAN.NAND BOOLEAN.STACKDEPTH FLOAT.MAX CODE.CAR CODE.CDR CODE.CONTAINER BOOLEAN.POP EXEC.SHOVE (BOOLEAN.NAND CODE.SWAP CODE.CONS BOOLEAN.POP INTEGER.+ ))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 182,
  "genome": "{:instruction EXEC.YANK :close  0}{:instruction BOOLEAN.POP :close  4}{:instruction CODE.CAR :close  4}{:instruction FLOAT.MIN :close  4}{:instruction INTEGER.SHOVE :close  0}{:instruction INTEGER.+ :close  0}{:instruction FLOAT.ROT :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction INTEGER.< :close  4}{:instruction CODE.STACKDEPTH :close  0}{:instruction CODE.SWAP :close  0}{:instruction CODE.SHOVE :close  0}{:instruction CODE.POP :close  4}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction EXEC.ROT :close  0}{:instruction INTEGER./ :close  4}{:instruction CODE.NTHCDR :close  4}{:instruction INTEGER.> :close  4}{:instruction FLOAT.> :close  0}{:instruction BOOLEAN.NAND :close  0}{:instruction INTEGER.* :close  0}{:instruction INTEGER.% :close  4}{:instruction INTEGER.ROT :close  0}{:instruction FLOAT.POP :close  0}{:instruction FLOAT.> :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction FLOAT.DUP :close  0}{:instruction INTEGER.< :close  4}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction CODE.EXTRACT :close  0}",
  "program": "(EXEC.YANK BOOLEAN.POP CODE.CAR FLOAT.MIN INTEGER.SHOVE INTEGER.+ FLOAT.ROT EXEC.YANKDUP EXEC.DO*TIMES (INTEGER.< )CODE.STACKDEPTH CODE.SWAP CODE.SHOVE CODE.POP CODE.FROMBOOLEAN EXEC.ROT (INTEGER./ )()()CODE.NTHCDR INTEGER.> FLOAT.> BOOLEAN.NAND INTEGER.* INTEGER.% INTEGER.ROT FLOAT.POP FLOAT.> CODE.STACKDEPTH FLOAT.DUP INTEGER.< CODE.INSTRUCTIONS CODE.EXTRACT )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 183,
  "genome": "{:instruction BOOLEAN.SHOVE :close  4}{:instruction TRUE :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction EXEC.S :close  4}{:instruction CODE.CONTAINER :close  0}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction FALSE :close  4}{:instruction FLOAT.% :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction CODE.DUP :close  0}{:instruction CODE.SWAP :close  0}{:instruction CODE.NULL :close  0}{:instruction CODE.YANKDUP :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction CODE.DO* :close  4}{:instruction FLOAT.+ :close  4}{:instruction BOOLEAN.POP :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction EXEC.YANK :close  0}{:instruction CODE.YANKDUP :close  4}{:instruction CODE.CONTAINER :close  0}{:instruction EXEC.STACKDEPTH :close  4}{:instruction FLOAT.YANK :close  0}{:instruction CODE.QUOTE :close  0}",
  "program": "(BOOLEAN.SHOVE TRUE INTEGER.STACKDEPTH EXEC.S ()()()CODE.CONTAINER FLOAT.STACKDEPTH FALSE FLOAT.% BOOLEAN.FROMFLOAT CODE.DUP CODE.SWAP CODE.NULL CODE.YANKDUP CODE.FROMINTEGER CODE.DO* FLOAT.+ BOOLEAN.POP BOOLEAN.YANK EXEC.YANK CODE.YANKDUP CODE.CONTAINER EXEC.STACKDEPTH FLOAT.YANK CODE.QUOTE ())",
  "result-set": { "integer-stack": {"size": 1 "data" : {3} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 2 "data" : {0 1} } }
}
{ "id": 184,
  "genome": "{:instruction INTEGER.POP :close  0}{:instruction EXEC.YANKDUP :close  4}{:instruction FLOAT.YANK :close  0}{:instruction INTEGER.= :close  0}{:instruction CODE.CONTAINER :close  0}{:instruction EXEC.K :close  0}{:instruction EXEC.POP :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction BOOLEAN.POP :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction CODE.YANK :close  0}{:instruction BOOLEAN.NOT :close  0}{:instruction FLOAT.COS :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction EXEC.= :close  0}{:instruction FLOAT.* :close  0}{:instruction EXEC.POP :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction BOOLEAN.= :close  4}{:instruction FLOAT.MAX :close  0}{:instruction INTEGER.- :close  0}{:instruction TRUE :close  0}{:instruction CODE.EXTRACT :close  0}{:instruction FLOAT.% :close  0}{:instruction -3417 :close  4}{:instruction CODE.FROMINTEGER :close  4}{:instruction BOOLEAN.NAND :close  0}{:instruction EXEC.SWAP :close  0}{:instruction FLOAT.TAN :close  4}{:instruction FLOAT.SIN :close  4}{:instruction CODE.DO*RANGE :close  0}{:instruction 3610 :close  0}{:instruction BOOLEAN.FROMFLOAT :close  4}{:instruction EXEC.DO*RANGE :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction EXEC.S :close  4}{:instruction INTEGER.> :close  0}{:instruction CODE.MEMBER :close  0}",
  "program": "(INTEGER.POP EXEC.YANKDUP FLOAT.YANK INTEGER.= CODE.CONTAINER EXEC.K (EXEC.POP (INTEGER.YANKDUP BOOLEAN.POP BOOLEAN.YANK CODE.YANK BOOLEAN.NOT FLOAT.COS INTEGER.SHOVE EXEC.= FLOAT.* EXEC.POP (FLOAT.SWAP BOOLEAN.= )))()FLOAT.MAX INTEGER.- TRUE CODE.EXTRACT FLOAT.% -3417 CODE.FROMINTEGER BOOLEAN.NAND EXEC.SWAP (FLOAT.TAN )()FLOAT.SIN CODE.DO*RANGE 3610 BOOLEAN.FROMFLOAT EXEC.DO*RANGE (CODE.FROMBOOLEAN BOOLEAN.YANK EXEC.S ()()())INTEGER.> CODE.MEMBER )",
  "result-set": { "integer-stack": {"size": 1 "data" : {3610} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 186,
  "genome": "{:instruction CODE.NULL :close  0}{:instruction CODE.NULL :close  0}{:instruction BOOLEAN.FROMFLOAT :close  4}{:instruction CODE.DUP :close  4}{:instruction EXEC.= :close  0}{:instruction INTEGER.= :close  0}{:instruction CODE.MEMBER :close  4}{:instruction FLOAT.SHOVE :close  4}{:instruction CODE.IF :close  0}{:instruction -3029 :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction CODE.APPEND :close  0}{:instruction FALSE :close  0}{:instruction -0.70329199119081998 :close  0}{:instruction CODE.APPEND :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction CODE.CONTAINER :close  0}{:instruction FLOAT.> :close  0}{:instruction BOOLEAN.YANKDUP :close  0}{:instruction INTEGER.% :close  4}{:instruction CODE.DO*TIMES :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction CODE.YANK :close  0}{:instruction FLOAT.TAN :close  0}{:instruction FLOAT.= :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction INTEGER.= :close  0}{:instruction CODE.SHOVE :close  0}{:instruction INTEGER.ROT :close  0}{:instruction BOOLEAN.DUP :close  4}{:instruction BOOLEAN.DUP :close  4}{:instruction CODE.INSERT :close  0}{:instruction CODE.INSERT :close  4}{:instruction BOOLEAN.DUP :close  4}{:instruction EXEC.DO*COUNT :close  0}",
  "program": "(CODE.NULL CODE.NULL BOOLEAN.FROMFLOAT CODE.DUP EXEC.= INTEGER.= CODE.MEMBER FLOAT.SHOVE CODE.IF -3029 FLOAT.SWAP CODE.APPEND FALSE -0.70329199119081998 CODE.APPEND INTEGER.SWAP CODE.CONTAINER FLOAT.> BOOLEAN.YANKDUP INTEGER.% CODE.DO*TIMES CODE.STACKDEPTH CODE.YANK FLOAT.TAN FLOAT.= INTEGER.SHOVE INTEGER.= CODE.SHOVE INTEGER.ROT BOOLEAN.DUP BOOLEAN.DUP CODE.INSERT CODE.INSERT BOOLEAN.DUP EXEC.DO*COUNT ())",
  "result-set": { "integer-stack": {"size": 2 "data" : {-1 0} },
                  "float-stack": {"size": 1 "data" : {-0.847932} },
                  "bool-stack": {"size": 7 "data" : {0 0 0 0 0 0 0} } }
}
{ "id": 188,
  "genome": "{:instruction CODE.DO*TIMES :close  0}{:instruction EXEC.YANK :close  4}{:instruction EXEC.FLUSH :close  0}",
  "program": "(CODE.DO*TIMES EXEC.YANK EXEC.FLUSH )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 189,
  "genome": "{:instruction FLOAT.+ :close  0}{:instruction INTEGER.YANK :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction CODE.APPEND :close  0}{:instruction INTEGER.MAX :close  0}{:instruction BOOLEAN.FROMINTEGER :close  4}{:instruction FLOAT.SWAP :close  0}{:instruction EXEC.SHOVE :close  0}",
  "program": "(FLOAT.+ INTEGER.YANK INTEGER.YANKDUP EXEC.DO*COUNT (INTEGER.YANKDUP CODE.APPEND INTEGER.MAX BOOLEAN.FROMINTEGER )FLOAT.SWAP EXEC.SHOVE ())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 190,
  "genome": "{:instruction CODE.SHOVE :close  0}{:instruction CODE.POP :close  4}{:instruction INTEGER.MAX :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction CODE.ATOM :close  0}{:instruction INTEGER.MIN :close  0}{:instruction CODE.DO*RANGE :close  0}{:instruction INTEGER./ :close  0}{:instruction CODE.CONS :close  4}{:instruction CODE.FROMINTEGER :close  0}{:instruction BOOLEAN.YANKDUP :close  4}{:instruction CODE.FLUSH :close  0}{:instruction INTEGER.POP :close  0}{:instruction CODE.CAR :close  0}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction INTEGER.YANKDUP :close  4}{:instruction INTEGER.SWAP :close  0}{:instruction INTEGER.MAX :close  4}{:instruction CODE.DO* :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction CODE.IF :close  0}{:instruction FLOAT.YANK :close  0}{:instruction EXEC.IF :close  4}{:instruction CODE.SIZE :close  0}{:instruction EXEC.S :close  0}{:instruction EXEC.DUP :close  0}{:instruction CODE.SIZE :close  0}{:instruction BOOLEAN.SWAP :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction FLOAT.+ :close  0}{:instruction FLOAT.FLUSH :close  4}{:instruction 0.40589618436198127 :close  4}{:instruction CODE.DUP :close  0}{:instruction FLOAT.MAX :close  4}{:instruction FLOAT.* :close  4}{:instruction FLOAT.- :close  4}",
  "program": "(CODE.SHOVE CODE.POP INTEGER.MAX EXEC.DO*TIMES (CODE.ATOM INTEGER.MIN CODE.DO*RANGE INTEGER./ CODE.CONS )CODE.FROMINTEGER BOOLEAN.YANKDUP CODE.FLUSH INTEGER.POP CODE.CAR FLOAT.STACKDEPTH INTEGER.YANKDUP INTEGER.SWAP INTEGER.MAX CODE.DO* CODE.FROMINTEGER FLOAT.SHOVE CODE.IF FLOAT.YANK EXEC.IF ()()CODE.SIZE EXEC.S (EXEC.DUP (CODE.SIZE BOOLEAN.SWAP CODE.DO*COUNT FLOAT.+ FLOAT.FLUSH ))()()0.40589618436198127 CODE.DUP FLOAT.MAX FLOAT.* FLOAT.- )",
  "result-set": { "integer-stack": {"size": 1 "data" : {1} },
                  "float-stack": {"size": 1 "data" : {0.405896} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 191,
  "genome": "{:instruction EXEC.POP :close  0}{:instruction EXEC.FLUSH :close  4}{:instruction EXEC.IF :close  0}{:instruction INTEGER.MIN :close  0}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction FLOAT.FLUSH :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction BOOLEAN.NAND :close  4}{:instruction FLOAT.= :close  4}{:instruction INTEGER.POP :close  0}{:instruction -3419 :close  0}{:instruction INTEGER.> :close  0}{:instruction EXEC.SWAP :close  0}{:instruction INTEGER.* :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction INTEGER.- :close  0}{:instruction CODE.POSITION :close  0}{:instruction CODE.LIST :close  4}{:instruction CODE.= :close  0}{:instruction CODE.SHOVE :close  4}{:instruction BOOLEAN.NAND :close  0}{:instruction CODE.NULL :close  0}{:instruction CODE.DO :close  0}{:instruction CODE.SHOVE :close  0}{:instruction CODE.= :close  4}{:instruction FALSE :close  0}{:instruction INTEGER.* :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction INTEGER.YANK :close  4}",
  "program": "(EXEC.POP (EXEC.FLUSH )EXEC.IF (INTEGER.MIN CODE.INSTRUCTIONS FLOAT.FLUSH EXEC.SHOVE (BOOLEAN.NAND ))()FLOAT.= INTEGER.POP -3419 INTEGER.> EXEC.SWAP (INTEGER.* BOOLEAN.NOR INTEGER.- CODE.POSITION CODE.LIST )()CODE.= CODE.SHOVE BOOLEAN.NAND CODE.NULL CODE.DO CODE.SHOVE CODE.= FALSE INTEGER.* CODE.STACKDEPTH INTEGER.YANK )",
  "result-set": { "integer-stack": {"size": 1 "data" : {3419} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 192,
  "genome": "{:instruction EXEC.SWAP :close  0}{:instruction CODE.ATOM :close  4}{:instruction CODE.SHOVE :close  0}{:instruction CODE.CDR :close  0}{:instruction CODE.NULL :close  0}{:instruction CODE.SHOVE :close  0}{:instruction CODE.LENGTH :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction EXEC.S :close  4}{:instruction BOOLEAN.SWAP :close  0}{:instruction FLOAT.= :close  0}{:instruction EXEC.FLUSH :close  0}{:instruction CODE.FLUSH :close  0}{:instruction FLOAT.- :close  0}{:instruction CODE.APPEND :close  0}{:instruction INTEGER.MIN :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction CODE.DO*RANGE :close  0}{:instruction BOOLEAN.NOT :close  4}{:instruction BOOLEAN.OR :close  0}{:instruction FLOAT.MAX :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction EXEC.FLUSH :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction FLOAT.SIN :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction FLOAT.SIN :close  4}{:instruction FLOAT.FLUSH :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction BOOLEAN.POP :close  0}{:instruction BOOLEAN.= :close  0}{:instruction INTEGER.+ :close  0}{:instruction EXEC.FLUSH :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction 3521 :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction BOOLEAN.YANK :close  0}",
  "program": "(EXEC.SWAP (CODE.ATOM )()CODE.SHOVE CODE.CDR CODE.NULL CODE.SHOVE CODE.LENGTH BOOLEAN.FROMFLOAT BOOLEAN.FROMINTEGER CODE.DO*TIMES EXEC.S ()()()BOOLEAN.SWAP FLOAT.= EXEC.FLUSH CODE.FLUSH FLOAT.- CODE.APPEND INTEGER.MIN EXEC.DO*COUNT (CODE.DO*RANGE BOOLEAN.NOT )BOOLEAN.OR FLOAT.MAX INTEGER.STACKDEPTH EXEC.FLUSH CODE.FROMINTEGER FLOAT.SIN INTEGER.SWAP INTEGER.SHOVE BOOLEAN.YANK FLOAT.SIN FLOAT.FLUSH EXEC.DO*RANGE (BOOLEAN.POP BOOLEAN.= INTEGER.+ EXEC.FLUSH BOOLEAN.STACKDEPTH 3521 INTEGER.SHOVE BOOLEAN.YANK ))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 193,
  "genome": "{:instruction FLOAT.TAN :close  0}{:instruction CODE.POP :close  0}{:instruction FLOAT.- :close  0}{:instruction -1521 :close  4}{:instruction INTEGER.STACKDEPTH :close  4}{:instruction FLOAT.* :close  0}{:instruction INTEGER.+ :close  0}{:instruction FLOAT.ROT :close  0}{:instruction EXEC.DUP :close  0}{:instruction FLOAT./ :close  4}{:instruction EXEC.YANK :close  0}{:instruction INTEGER.STACKDEPTH :close  4}{:instruction EXEC.Y :close  0}{:instruction CODE.CONTAINER :close  0}{:instruction EXEC.FLUSH :close  0}{:instruction INTEGER.MIN :close  0}{:instruction CODE.SHOVE :close  0}{:instruction FLOAT.COS :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction EXEC.DUP :close  0}{:instruction INTEGER.DUP :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction CODE.NULL :close  0}{:instruction INTEGER.< :close  0}{:instruction FLOAT.ROT :close  0}{:instruction EXEC.SWAP :close  0}{:instruction FLOAT.STACKDEPTH :close  4}{:instruction FLOAT.< :close  4}{:instruction INTEGER.POP :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction INTEGER.> :close  0}",
  "program": "(FLOAT.TAN CODE.POP FLOAT.- -1521 INTEGER.STACKDEPTH FLOAT.* INTEGER.+ FLOAT.ROT EXEC.DUP (FLOAT./ )EXEC.YANK INTEGER.STACKDEPTH EXEC.Y (CODE.CONTAINER EXEC.FLUSH INTEGER.MIN CODE.SHOVE FLOAT.COS FLOAT.SWAP EXEC.DUP (INTEGER.DUP BOOLEAN.NOR CODE.NULL INTEGER.< FLOAT.ROT EXEC.SWAP (FLOAT.STACKDEPTH )()))FLOAT.< INTEGER.POP BOOLEAN.NOR INTEGER.> )",
  "result-set": { "integer-stack": {"size": 1 "data" : {0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 194,
  "genome": "",
  "program": "()",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 195,
  "genome": "{:instruction FLOAT.DUP :close  0}{:instruction FLOAT.SIN :close  0}{:instruction BOOLEAN.DUP :close  0}{:instruction EXEC.DUP :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction INTEGER.FLUSH :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction CODE.NTH :close  0}{:instruction FLOAT.TAN :close  4}{:instruction EXEC.POP :close  0}{:instruction INTEGER.+ :close  4}{:instruction FLOAT.DUP :close  0}{:instruction FLOAT.MIN :close  4}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction FLOAT.% :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction EXEC.K :close  4}{:instruction INTEGER.POP :close  4}",
  "program": "(FLOAT.DUP FLOAT.SIN BOOLEAN.DUP EXEC.DUP (CODE.STACKDEPTH FLOAT.YANKDUP INTEGER.FLUSH BOOLEAN.ROT CODE.INSTRUCTIONS CODE.NTH FLOAT.TAN )EXEC.POP (INTEGER.+ )FLOAT.DUP FLOAT.MIN CODE.INSTRUCTIONS FLOAT.% FLOAT.SWAP EXEC.K ()()INTEGER.POP )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 196,
  "genome": "{:instruction INTEGER.ROT :close  0}{:instruction BOOLEAN.DUP :close  0}{:instruction CODE.ATOM :close  4}{:instruction CODE.QUOTE :close  0}{:instruction CODE.CONTAINER :close  0}{:instruction CODE.APPEND :close  4}{:instruction CODE.FLUSH :close  4}{:instruction FLOAT.YANKDUP :close  0}{:instruction INTEGER.= :close  0}{:instruction FLOAT.FROMDATA :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction INTEGER.ROT :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction CODE.POP :close  0}{:instruction FLOAT.SIN :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction CODE.POP :close  0}{:instruction FLOAT.YANK :close  4}{:instruction CODE.NOOP :close  0}{:instruction INTEGER.FLUSH :close  0}{:instruction FLOAT.MAX :close  4}{:instruction CODE.ROT :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction FLOAT.ROT :close  4}{:instruction FLOAT.- :close  4}{:instruction FLOAT.+ :close  0}{:instruction CODE.ROT :close  0}{:instruction CODE.LIST :close  4}{:instruction FLOAT.FROMINTEGER :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction FLOAT.- :close  0}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction BOOLEAN.SHOVE :close  4}{:instruction INTEGER.FLUSH :close  0}{:instruction FLOAT.* :close  0}",
  "program": "(INTEGER.ROT BOOLEAN.DUP CODE.ATOM CODE.QUOTE (CODE.CONTAINER CODE.APPEND )CODE.FLUSH FLOAT.YANKDUP INTEGER.= FLOAT.FROMDATA CODE.FROMBOOLEAN INTEGER.ROT CODE.DO*TIMES CODE.POP FLOAT.SIN CODE.NTHCDR CODE.POP FLOAT.YANK CODE.NOOP INTEGER.FLUSH FLOAT.MAX CODE.ROT BOOLEAN.FLUSH FLOAT.ROT FLOAT.- FLOAT.+ CODE.ROT CODE.LIST FLOAT.FROMINTEGER FLOAT.SWAP FLOAT.- FLOAT.STACKDEPTH BOOLEAN.ROT BOOLEAN.SHOVE INTEGER.FLUSH FLOAT.* )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 197,
  "genome": "{:instruction FLOAT.FROMBOOLEAN :close  0}",
  "program": "(FLOAT.FROMBOOLEAN )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 199,
  "genome": "{:instruction BOOLEAN.YANK :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction CODE.YANK :close  0}{:instruction BOOLEAN.NOT :close  0}",
  "program": "(BOOLEAN.YANK FLOAT.YANKDUP CODE.YANK BOOLEAN.NOT )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 200,
  "genome": "{:instruction FLOAT.DUP :close  4}{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction CODE.DO*RANGE :close  4}{:instruction EXEC.DO*WHILE :close  0}{:instruction BOOLEAN.YANK :close  4}{:instruction FLOAT.* :close  0}{:instruction CODE.LENGTH :close  4}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction FLOAT.% :close  4}{:instruction FLOAT.SWAP :close  0}{:instruction INTEGER.FROMFLOAT :close  4}{:instruction CODE.YANKDUP :close  4}{:instruction EXEC.DO*COUNT :close  4}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction EXEC.SWAP :close  4}{:instruction BOOLEAN.STACKDEPTH :close  4}{:instruction FLOAT.= :close  0}{:instruction INTEGER.- :close  0}{:instruction CODE.POP :close  0}{:instruction CODE.SIZE :close  4}{:instruction INTEGER.- :close  0}{:instruction EXEC.WHEN :close  0}{:instruction CODE.NULL :close  0}{:instruction CODE.APPEND :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction FLOAT.MAX :close  0}{:instruction FLOAT.MIN :close  0}{:instruction CODE.SIZE :close  4}{:instruction FLOAT.FROMINTEGER :close  4}{:instruction FLOAT.< :close  0}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction CODE.FROMFLOAT :close  0}{:instruction CODE.DO* :close  0}{:instruction CODE.FLUSH :close  0}",
  "program": "(FLOAT.DUP INTEGER.FROMBOOLEAN CODE.DO*RANGE EXEC.DO*WHILE (BOOLEAN.YANK )FLOAT.* CODE.LENGTH INTEGER.FROMFLOAT BOOLEAN.YANK FLOAT.% FLOAT.SWAP INTEGER.FROMFLOAT CODE.YANKDUP EXEC.DO*COUNT ()CODE.FROMBOOLEAN EXEC.SWAP ()()BOOLEAN.STACKDEPTH FLOAT.= INTEGER.- CODE.POP CODE.SIZE INTEGER.- EXEC.WHEN (CODE.NULL CODE.APPEND EXEC.DO*COUNT (FLOAT.MAX FLOAT.MIN CODE.SIZE ))FLOAT.FROMINTEGER FLOAT.< FLOAT.STACKDEPTH FLOAT.YANKDUP CODE.FROMFLOAT CODE.DO* CODE.FLUSH )",
  "result-set": { "integer-stack": {"size": 31 "data" : {30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0} },
                  "float-stack": {"size": 2 "data" : {31 31} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 201,
  "genome": "{:instruction BOOLEAN.= :close  0}{:instruction INTEGER.MIN :close  0}{:instruction BOOLEAN.NAND :close  4}{:instruction EXEC.DO*COUNT :close  0}{:instruction INTEGER.> :close  0}{:instruction CODE.DO*TIMES :close  4}{:instruction CODE.NTH :close  0}{:instruction CODE.LIST :close  4}{:instruction FLOAT.YANKDUP :close  0}{:instruction FLOAT.MIN :close  0}{:instruction FLOAT.> :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction INTEGER.MIN :close  0}{:instruction EXEC.STACKDEPTH :close  0}{:instruction BOOLEAN.YANK :close  4}{:instruction BOOLEAN.YANK :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction CODE.ATOM :close  0}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction CODE.IF :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction BOOLEAN.NOT :close  0}{:instruction FLOAT.FLUSH :close  4}{:instruction CODE.FROMBOOLEAN :close  4}{:instruction INTEGER.SWAP :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction BOOLEAN.SHOVE :close  0}{:instruction BOOLEAN.FLUSH :close  0}",
  "program": "(BOOLEAN.= INTEGER.MIN BOOLEAN.NAND EXEC.DO*COUNT (INTEGER.> CODE.DO*TIMES )CODE.NTH CODE.LIST FLOAT.YANKDUP FLOAT.MIN FLOAT.> INTEGER.SHOVE INTEGER.MIN EXEC.STACKDEPTH BOOLEAN.YANK BOOLEAN.YANK INTEGER.YANKDUP CODE.ATOM FLOAT.STACKDEPTH EXEC.DO*TIMES (CODE.IF BOOLEAN.NOR BOOLEAN.NOT FLOAT.FLUSH )CODE.FROMBOOLEAN INTEGER.SWAP EXEC.SHOVE (BOOLEAN.SHOVE BOOLEAN.FLUSH ))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 202,
  "genome": "{:instruction BOOLEAN.NOT :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction CODE.CDR :close  0}{:instruction BOOLEAN.NOT :close  0}{:instruction INTEGER.YANK :close  0}{:instruction CODE.DO*TIMES :close  4}{:instruction BOOLEAN.OR :close  0}{:instruction FLOAT.DUP :close  4}{:instruction INTEGER.* :close  0}{:instruction INTEGER.< :close  4}{:instruction CODE.ATOM :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction BOOLEAN.SHOVE :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction INTEGER.FLUSH :close  0}{:instruction CODE.FROMINTEGER :close  4}{:instruction FLOAT./ :close  4}{:instruction INTEGER.= :close  4}{:instruction EXEC.DO*WHILE :close  0}{:instruction CODE.INSERT :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction INTEGER.MIN :close  4}{:instruction FLOAT.* :close  0}{:instruction EXEC.DO*RANGE :close  4}{:instruction CODE.QUOTE :close  0}{:instruction CODE.QUOTE :close  0}{:instruction CODE.CONS :close  0}{:instruction FLOAT.POP :close  4}{:instruction CODE.POP :close  0}{:instruction INTEGER.* :close  0}{:instruction FLOAT.TAN :close  0}{:instruction CODE.NULL :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction CODE.DUP :close  0}{:instruction FLOAT.FROMINTEGER :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction BOOLEAN.= :close  4}{:instruction CODE.NOOP :close  0}{:instruction INTEGER.* :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction FLOAT.< :close  4}",
  "program": "(BOOLEAN.NOT FLOAT.YANKDUP EXEC.DO*TIMES (CODE.CDR BOOLEAN.NOT INTEGER.YANK CODE.DO*TIMES )BOOLEAN.OR FLOAT.DUP INTEGER.* INTEGER.< CODE.ATOM EXEC.DO*COUNT (BOOLEAN.SHOVE FLOAT.SHOVE INTEGER.FLUSH CODE.FROMINTEGER )FLOAT./ INTEGER.= EXEC.DO*WHILE (CODE.INSERT FLOAT.SWAP INTEGER.MIN )FLOAT.* EXEC.DO*RANGE ()CODE.QUOTE (CODE.QUOTE (CODE.CONS FLOAT.POP ))CODE.POP INTEGER.* FLOAT.TAN CODE.NULL BOOLEAN.FLUSH CODE.DO*TIMES INTEGER.STACKDEPTH CODE.DUP FLOAT.FROMINTEGER BOOLEAN.FROMFLOAT BOOLEAN.= CODE.NOOP INTEGER.* BOOLEAN.YANK BOOLEAN.NOR FLOAT.< )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 203,
  "genome": "{:instruction CODE.DUP :close  0}{:instruction CODE.FLUSH :close  0}{:instruction CODE.APPEND :close  0}{:instruction FLOAT.POP :close  0}{:instruction INTEGER.% :close  4}{:instruction INTEGER.SHOVE :close  0}{:instruction BOOLEAN.= :close  0}{:instruction EXEC.SWAP :close  0}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction INTEGER.> :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction FLOAT.FROMDATA :close  0}{:instruction CODE.YANK :close  0}{:instruction CODE.DO* :close  0}{:instruction CODE.CONS :close  0}{:instruction CODE.NULL :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction INTEGER.= :close  4}{:instruction CODE.NULL :close  0}{:instruction EXEC.= :close  0}{:instruction CODE.DO :close  0}{:instruction BOOLEAN.SWAP :close  0}{:instruction FALSE :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction EXEC.IF :close  0}{:instruction CODE.LIST :close  0}{:instruction FLOAT.< :close  0}{:instruction INTEGER.> :close  0}{:instruction BOOLEAN.NAND :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction EXEC.IF :close  4}{:instruction EXEC.ROT :close  0}{:instruction INTEGER.DUP :close  0}{:instruction CODE.SIZE :close  0}{:instruction FLOAT.POP :close  0}{:instruction EXEC.= :close  0}",
  "program": "(CODE.DUP CODE.FLUSH CODE.APPEND FLOAT.POP INTEGER.% INTEGER.SHOVE BOOLEAN.= EXEC.SWAP (CODE.INSTRUCTIONS INTEGER.> BOOLEAN.NOR FLOAT.FROMDATA CODE.YANK CODE.DO* CODE.CONS CODE.NULL CODE.NTHCDR INTEGER.= )()CODE.NULL EXEC.= CODE.DO BOOLEAN.SWAP FALSE BOOLEAN.AND EXEC.IF (CODE.LIST FLOAT.< INTEGER.> BOOLEAN.NAND INTEGER.SHOVE EXEC.IF ()())()EXEC.ROT (INTEGER.DUP CODE.SIZE FLOAT.POP EXEC.= )()())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {1} } }
}
{ "id": 204,
  "genome": "{:instruction CODE.NOOP :close  0}",
  "program": "(CODE.NOOP )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 205,
  "genome": "{:instruction INTEGER.MIN :close  0}{:instruction EXEC.ROT :close  0}{:instruction BOOLEAN.OR :close  4}{:instruction CODE.POSITION :close  0}{:instruction EXEC.POP :close  0}{:instruction CODE.YANK :close  0}{:instruction CODE.EXTRACT :close  0}{:instruction INTEGER.DUP :close  4}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction CODE.APPEND :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction BOOLEAN.SHOVE :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction -0.14249375070037640 :close  0}{:instruction FLOAT.% :close  0}{:instruction INTEGER.ROT :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}",
  "program": "(INTEGER.MIN EXEC.ROT (BOOLEAN.OR )()()CODE.POSITION EXEC.POP (CODE.YANK CODE.EXTRACT INTEGER.DUP )FLOAT.FROMBOOLEAN EXEC.DO*TIMES (CODE.APPEND BOOLEAN.NOR BOOLEAN.SHOVE EXEC.SHOVE (-0.14249375070037640 FLOAT.% INTEGER.ROT BOOLEAN.STACKDEPTH )))",
  "result-set": { "integer-stack": {"size": 1 "data" : {0} },
                  "float-stack": {"size": 1 "data" : {-0.142494} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 206,
  "genome": "{:instruction EXEC.DO*WHILE :close  0}{:instruction FLOAT.MIN :close  0}{:instruction EXEC.SHOVE :close  4}{:instruction CODE.SWAP :close  0}{:instruction INTEGER.ROT :close  0}{:instruction FLOAT.< :close  4}{:instruction CODE.YANK :close  4}{:instruction FLOAT.< :close  0}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction BOOLEAN.DUP :close  4}{:instruction EXEC.DO*RANGE :close  0}{:instruction CODE.NTHCDR :close  4}{:instruction INTEGER.SHOVE :close  0}{:instruction CODE.CAR :close  0}{:instruction CODE.YANKDUP :close  0}{:instruction EXEC.DO*RANGE :close  4}{:instruction EXEC.WHILE :close  0}{:instruction BOOLEAN.DUP :close  0}{:instruction INTEGER.+ :close  0}{:instruction CODE.NULL :close  4}{:instruction CODE.LENGTH :close  0}{:instruction 0.85348170014412172 :close  4}{:instruction CODE.CAR :close  4}{:instruction FLOAT.TAN :close  0}{:instruction FLOAT.DUP :close  0}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction CODE.CAR :close  0}{:instruction FLOAT.TAN :close  0}{:instruction BOOLEAN.NAND :close  0}{:instruction INTEGER.POP :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction BOOLEAN.YANK :close  4}{:instruction FLOAT.= :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction CODE.CAR :close  0}{:instruction 2384 :close  0}{:instruction EXEC.= :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction FLOAT.MAX :close  0}{:instruction CODE.YANKDUP :close  0}{:instruction CODE.NULL :close  0}{:instruction FLOAT.POP :close  0}{:instruction CODE.EXTRACT :close  0}{:instruction INTEGER.< :close  0}{:instruction FLOAT.POP :close  4}{:instruction CODE.DO*RANGE :close  0}",
  "program": "(EXEC.DO*WHILE (FLOAT.MIN EXEC.SHOVE ())CODE.SWAP INTEGER.ROT FLOAT.< CODE.YANK FLOAT.< FLOAT.STACKDEPTH BOOLEAN.DUP EXEC.DO*RANGE (CODE.NTHCDR )INTEGER.SHOVE CODE.CAR CODE.YANKDUP EXEC.DO*RANGE ()EXEC.WHILE (BOOLEAN.DUP INTEGER.+ CODE.NULL )CODE.LENGTH 0.85348170014412172 CODE.CAR FLOAT.TAN FLOAT.DUP FLOAT.FROMBOOLEAN CODE.CAR FLOAT.TAN BOOLEAN.NAND INTEGER.POP CODE.DO*TIMES BOOLEAN.YANK FLOAT.= EXEC.YANKDUP CODE.CAR 2384 EXEC.= BOOLEAN.OR FLOAT.MAX CODE.YANKDUP CODE.NULL FLOAT.POP CODE.EXTRACT INTEGER.< FLOAT.POP CODE.DO*RANGE )",
  "result-set": { "integer-stack": {"size": 1 "data" : {2384} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 2 "data" : {0 0} } }
}
{ "id": 207,
  "genome": "{:instruction EXEC.DO*COUNT :close  0}{:instruction CODE.YANK :close  0}{:instruction EXEC.YANK :close  0}{:instruction INTEGER.YANKDUP :close  4}{:instruction FLOAT.MIN :close  0}{:instruction BOOLEAN.YANKDUP :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction FLOAT.POP :close  0}{:instruction BOOLEAN.NAND :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction FLOAT.> :close  0}{:instruction FLOAT.STACKDEPTH :close  4}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction CODE.DO*COUNT :close  4}{:instruction FLOAT.COS :close  0}{:instruction EXEC.DO*COUNT :close  4}{:instruction INTEGER.FLUSH :close  0}{:instruction FLOAT.DUP :close  0}{:instruction CODE.CONTAINER :close  4}{:instruction CODE.EXTRACT :close  0}{:instruction CODE.MEMBER :close  4}{:instruction CODE.POP :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction INTEGER.+ :close  0}{:instruction FLOAT./ :close  4}{:instruction CODE.INSERT :close  4}{:instruction FLOAT.SWAP :close  4}",
  "program": "(EXEC.DO*COUNT (CODE.YANK EXEC.YANK INTEGER.YANKDUP )FLOAT.MIN BOOLEAN.YANKDUP INTEGER.FROMFLOAT FLOAT.POP BOOLEAN.NAND BOOLEAN.NOR FLOAT.> FLOAT.STACKDEPTH INTEGER.STACKDEPTH CODE.DO*COUNT FLOAT.COS EXEC.DO*COUNT ()INTEGER.FLUSH FLOAT.DUP CODE.CONTAINER CODE.EXTRACT CODE.MEMBER CODE.POP FLOAT.SHOVE EXEC.SHOVE (INTEGER.+ FLOAT./ )CODE.INSERT FLOAT.SWAP )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 211,
  "genome": "",
  "program": "()",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 212,
  "genome": "{:instruction FLOAT.MAX :close  4}{:instruction INTEGER.> :close  0}{:instruction CODE.DO* :close  0}{:instruction EXEC.WHEN :close  4}{:instruction CODE.NTHCDR :close  0}{:instruction CODE.NTH :close  0}{:instruction CODE.YANK :close  0}{:instruction CODE.NULL :close  0}{:instruction FLOAT.YANK :close  0}{:instruction INTEGER.MIN :close  0}{:instruction CODE.LENGTH :close  0}",
  "program": "(FLOAT.MAX INTEGER.> CODE.DO* EXEC.WHEN ()CODE.NTHCDR CODE.NTH CODE.YANK CODE.NULL FLOAT.YANK INTEGER.MIN CODE.LENGTH )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 213,
  "genome": "{:instruction CODE.LIST :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction CODE.QUOTE :close  0}{:instruction FLOAT.COS :close  4}{:instruction INTEGER.MIN :close  4}{:instruction BOOLEAN.DUP :close  4}{:instruction CODE.YANK :close  0}{:instruction EXEC.IF :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction INTEGER.< :close  0}{:instruction INTEGER.* :close  0}{:instruction BOOLEAN.OR :close  4}{:instruction CODE.NULL :close  0}{:instruction FLOAT.> :close  4}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction EXEC.SWAP :close  0}{:instruction EXEC.STACKDEPTH :close  0}{:instruction CODE.NTHCDR :close  4}{:instruction EXEC.DO*WHILE :close  0}{:instruction CODE.DO* :close  0}{:instruction CODE.NOOP :close  0}{:instruction FLOAT.YANK :close  0}{:instruction CODE.NULL :close  4}",
  "program": "(CODE.LIST INTEGER.FROMFLOAT EXEC.DO*COUNT (CODE.QUOTE (FLOAT.COS ))INTEGER.MIN BOOLEAN.DUP CODE.YANK EXEC.IF (INTEGER.STACKDEPTH INTEGER.< INTEGER.* BOOLEAN.OR )()CODE.NULL FLOAT.> FLOAT.STACKDEPTH EXEC.SWAP (EXEC.STACKDEPTH CODE.NTHCDR )()EXEC.DO*WHILE (CODE.DO* CODE.NOOP FLOAT.YANK CODE.NULL ))",
  "result-set": { "integer-stack": {"size": 2 "data" : {7 0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 214,
  "genome": "{:instruction CODE.LIST :close  4}{:instruction EXEC.FLUSH :close  4}{:instruction BOOLEAN.AND :close  4}{:instruction FLOAT.POP :close  0}{:instruction CODE.ROT :close  4}{:instruction EXEC.IF :close  0}{:instruction EXEC.YANK :close  0}{:instruction FLOAT.SIN :close  0}{:instruction EXEC.ROT :close  0}{:instruction FLOAT.> :close  0}{:instruction BOOLEAN.SWAP :close  4}{:instruction CODE.CDR :close  0}{:instruction CODE.INSERT :close  0}{:instruction INTEGER.POP :close  4}{:instruction FLOAT.SIN :close  0}{:instruction EXEC.S :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction FLOAT.YANK :close  0}{:instruction FLOAT.MAX :close  4}{:instruction INTEGER.% :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction INTEGER.FLUSH :close  0}{:instruction FLOAT.> :close  0}{:instruction FALSE :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction INTEGER.ROT :close  0}{:instruction CODE.DO :close  0}{:instruction INTEGER.MIN :close  0}{:instruction EXEC.= :close  0}{:instruction CODE.DUP :close  0}{:instruction CODE.CDR :close  0}{:instruction INTEGER.YANK :close  4}{:instruction FLOAT.MIN :close  0}{:instruction CODE.NULL :close  4}{:instruction FLOAT.- :close  0}{:instruction CODE.FLUSH :close  0}{:instruction CODE.DO :close  4}{:instruction CODE.CONS :close  0}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction BOOLEAN.= :close  4}{:instruction EXEC.SWAP :close  4}{:instruction CODE.CDR :close  4}",
  "program": "(CODE.LIST EXEC.FLUSH BOOLEAN.AND FLOAT.POP CODE.ROT EXEC.IF (EXEC.YANK FLOAT.SIN EXEC.ROT (FLOAT.> BOOLEAN.SWAP )()())(CODE.CDR CODE.INSERT INTEGER.POP )FLOAT.SIN EXEC.S (INTEGER.STACKDEPTH BOOLEAN.ROT CODE.FROMINTEGER FLOAT.YANK FLOAT.MAX )()()INTEGER.% EXEC.DO*WHILE (INTEGER.FLUSH FLOAT.> FALSE CODE.FROMBOOLEAN INTEGER.ROT CODE.DO INTEGER.MIN EXEC.= CODE.DUP CODE.CDR INTEGER.YANK )FLOAT.MIN CODE.NULL FLOAT.- CODE.FLUSH CODE.DO CODE.CONS CODE.INSTRUCTIONS BOOLEAN.FROMFLOAT BOOLEAN.= EXEC.SWAP ()()CODE.CDR )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 215,
  "genome": "{:instruction INTEGER.MIN :close  0}{:instruction INTEGER.= :close  4}{:instruction FLOAT./ :close  0}{:instruction INTEGER.MAX :close  0}{:instruction INTEGER.- :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction CODE.DO* :close  0}{:instruction FLOAT.- :close  0}{:instruction CODE.DUP :close  0}{:instruction BOOLEAN.NOT :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction CODE.CONS :close  4}{:instruction CODE.CONS :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction FLOAT.MIN :close  4}{:instruction EXEC.WHILE :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction FLOAT.SIN :close  4}{:instruction INTEGER.% :close  0}{:instruction FLOAT.= :close  0}{:instruction CODE.CAR :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction CODE.FROMFLOAT :close  0}{:instruction EXEC.SHOVE :close  4}{:instruction BOOLEAN.SHOVE :close  0}",
  "program": "(INTEGER.MIN INTEGER.= FLOAT./ INTEGER.MAX INTEGER.- EXEC.DO*COUNT (BOOLEAN.AND CODE.DO* FLOAT.- CODE.DUP BOOLEAN.NOT EXEC.DO*WHILE (CODE.CONS ))CODE.CONS FLOAT.SHOVE FLOAT.MIN EXEC.WHILE (CODE.STACKDEPTH FLOAT.SIN )INTEGER.% FLOAT.= CODE.CAR BOOLEAN.STACKDEPTH CODE.FROMFLOAT EXEC.SHOVE ()BOOLEAN.SHOVE )",
  "result-set": { "integer-stack": {"size": 2 "data" : {0 0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 216,
  "genome": "{:instruction CODE.POSITION :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction CODE.IF :close  0}{:instruction FLOAT./ :close  4}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction CODE.NULL :close  0}{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction FALSE :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction FLOAT.COS :close  0}{:instruction CODE.DO*COUNT :close  4}{:instruction INTEGER.FROMFLOAT :close  4}{:instruction EXEC.DO*COUNT :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction FLOAT.MAX :close  4}{:instruction CODE.EXTRACT :close  0}{:instruction BOOLEAN.NOT :close  0}{:instruction BOOLEAN.SWAP :close  0}{:instruction BOOLEAN.NOR :close  4}",
  "program": "(CODE.POSITION CODE.STACKDEPTH CODE.IF FLOAT./ BOOLEAN.STACKDEPTH CODE.NULL INTEGER.FROMBOOLEAN FALSE CODE.STACKDEPTH FLOAT.COS CODE.DO*COUNT INTEGER.FROMFLOAT EXEC.DO*COUNT (CODE.DO*COUNT FLOAT.MAX )CODE.EXTRACT BOOLEAN.NOT BOOLEAN.SWAP BOOLEAN.NOR )",
  "result-set": { "integer-stack": {"size": 5 "data" : {-1 0 0 0 1} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {1} } }
}
{ "id": 217,
  "genome": "",
  "program": "()",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 218,
  "genome": "{:instruction CODE.= :close  0}{:instruction TRUE :close  4}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction FLOAT.FLUSH :close  0}{:instruction FLOAT.% :close  4}{:instruction CODE.= :close  4}{:instruction BOOLEAN.SHOVE :close  0}{:instruction INTEGER.YANK :close  4}{:instruction FLOAT.+ :close  4}",
  "program": "(CODE.= TRUE CODE.INSTRUCTIONS FLOAT.FLUSH FLOAT.% CODE.= BOOLEAN.SHOVE INTEGER.YANK FLOAT.+ )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 2 "data" : {0 1} } }
}
{ "id": 221,
  "genome": "{:instruction INTEGER.POP :close  4}{:instruction INTEGER.SWAP :close  4}{:instruction EXEC.S :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction CODE.LIST :close  0}{:instruction INTEGER.> :close  0}{:instruction CODE.STACKDEPTH :close  4}{:instruction FLOAT.YANK :close  0}{:instruction FLOAT.= :close  0}{:instruction CODE.MEMBER :close  0}{:instruction EXEC.STACKDEPTH :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction FLOAT.FLUSH :close  4}{:instruction BOOLEAN.SHOVE :close  0}{:instruction FLOAT.COS :close  4}{:instruction EXEC.DO*COUNT :close  0}{:instruction CODE.EXTRACT :close  0}{:instruction BOOLEAN.SWAP :close  0}{:instruction FLOAT.MAX :close  0}{:instruction CODE.CONTAINER :close  0}{:instruction FLOAT./ :close  0}{:instruction FLOAT.ROT :close  0}",
  "program": "(INTEGER.POP INTEGER.SWAP EXEC.S (INTEGER.SWAP CODE.LIST INTEGER.> CODE.STACKDEPTH )()()FLOAT.YANK FLOAT.= CODE.MEMBER EXEC.STACKDEPTH FLOAT.SHOVE INTEGER.FROMBOOLEAN FLOAT.FLUSH BOOLEAN.SHOVE FLOAT.COS EXEC.DO*COUNT (CODE.EXTRACT BOOLEAN.SWAP FLOAT.MAX CODE.CONTAINER FLOAT./ FLOAT.ROT ))",
  "result-set": { "integer-stack": {"size": 1 "data" : {1} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 222,
  "genome": "{:instruction CODE.POP :close  0}{:instruction 0.69195841338763908 :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction INTEGER.YANK :close  0}{:instruction FLOAT.% :close  0}{:instruction BOOLEAN.POP :close  0}{:instruction CODE.POSITION :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction INTEGER./ :close  0}{:instruction CODE.DO :close  0}{:instruction CODE.SHOVE :close  4}{:instruction INTEGER.SHOVE :close  0}{:instruction FALSE :close  4}{:instruction FLOAT.SWAP :close  0}{:instruction 0.97795775951304420 :close  0}{:instruction EXEC.WHILE :close  4}{:instruction CODE.NTH :close  4}{:instruction CODE.LENGTH :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction CODE.EXTRACT :close  0}{:instruction EXEC.S :close  4}{:instruction INTEGER.< :close  4}{:instruction INTEGER.STACKDEPTH :close  4}{:instruction CODE.FROMINTEGER :close  0}{:instruction FLOAT.SIN :close  4}{:instruction EXEC.YANKDUP :close  0}{:instruction FLOAT.+ :close  0}{:instruction CODE.ATOM :close  0}{:instruction EXEC.WHILE :close  4}{:instruction EXEC.= :close  0}{:instruction EXEC.S :close  0}{:instruction INTEGER.= :close  0}{:instruction CODE.NOOP :close  4}{:instruction FLOAT.= :close  4}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction FLOAT.+ :close  0}{:instruction FLOAT.% :close  0}{:instruction CODE.NULL :close  0}{:instruction CODE.SIZE :close  0}{:instruction CODE.CDR :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction EXEC.K :close  0}{:instruction CODE.DUP :close  4}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction FLOAT.* :close  0}{:instruction BOOLEAN.= :close  0}{:instruction CODE.ROT :close  0}{:instruction BOOLEAN.YANK :close  4}",
  "program": "(CODE.POP 0.69195841338763908 EXEC.DO*RANGE (INTEGER.YANK FLOAT.% BOOLEAN.POP CODE.POSITION EXEC.DO*TIMES (INTEGER./ CODE.DO CODE.SHOVE ))INTEGER.SHOVE FALSE FLOAT.SWAP 0.97795775951304420 EXEC.WHILE ()CODE.NTH CODE.LENGTH CODE.DO*COUNT CODE.EXTRACT EXEC.S ()()()INTEGER.< INTEGER.STACKDEPTH CODE.FROMINTEGER FLOAT.SIN EXEC.YANKDUP FLOAT.+ CODE.ATOM EXEC.WHILE ()EXEC.= EXEC.S (INTEGER.= CODE.NOOP )()()FLOAT.= INTEGER.STACKDEPTH FLOAT.+ FLOAT.% CODE.NULL CODE.SIZE CODE.CDR EXEC.DO*RANGE (EXEC.K (CODE.DUP )())CODE.FROMBOOLEAN FLOAT.* BOOLEAN.= CODE.ROT BOOLEAN.YANK )",
  "result-set": { "integer-stack": {"size": 1 "data" : {0} },
                  "float-stack": {"size": 1 "data" : {1.52132} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 223,
  "genome": "{:instruction FLOAT.< :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction EXEC.YANK :close  4}{:instruction EXEC.SWAP :close  0}{:instruction INTEGER.DUP :close  0}{:instruction FLOAT.= :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction INTEGER.FLUSH :close  0}{:instruction INTEGER.POP :close  0}{:instruction CODE.DUP :close  4}{:instruction FLOAT.> :close  0}{:instruction EXEC.DO*TIMES :close  0}",
  "program": "(FLOAT.< BOOLEAN.YANK EXEC.YANK EXEC.SWAP (INTEGER.DUP FLOAT.= BOOLEAN.YANK INTEGER.FLUSH INTEGER.POP CODE.DUP )()FLOAT.> EXEC.DO*TIMES ())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 224,
  "genome": "",
  "program": "()",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 225,
  "genome": "",
  "program": "()",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 227,
  "genome": "{:instruction CODE.CAR :close  0}",
  "program": "(CODE.CAR )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 228,
  "genome": "{:instruction FLOAT.FROMDATA :close  0}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction INTEGER.STACKDEPTH :close  4}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction FLOAT.COS :close  0}{:instruction BOOLEAN.NOT :close  4}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction INTEGER.* :close  0}{:instruction CODE.LIST :close  0}{:instruction INTEGER.FLUSH :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction FLOAT./ :close  4}{:instruction CODE.IF :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction FLOAT.SHOVE :close  4}{:instruction 0.29122174700983372 :close  0}{:instruction INTEGER.POP :close  0}{:instruction FLOAT.FROMDATA :close  4}{:instruction INTEGER.POP :close  4}{:instruction CODE.CAR :close  4}{:instruction FLOAT.< :close  0}{:instruction CODE.YANKDUP :close  0}{:instruction FLOAT.+ :close  4}{:instruction CODE.DO*RANGE :close  0}",
  "program": "(FLOAT.FROMDATA FLOAT.STACKDEPTH INTEGER.STACKDEPTH INTEGER.STACKDEPTH CODE.INSTRUCTIONS FLOAT.STACKDEPTH BOOLEAN.NOR FLOAT.COS BOOLEAN.NOT INTEGER.FROMFLOAT BOOLEAN.FROMFLOAT INTEGER.* CODE.LIST INTEGER.FLUSH INTEGER.STACKDEPTH FLOAT./ CODE.IF BOOLEAN.OR FLOAT.SHOVE 0.29122174700983372 INTEGER.POP FLOAT.FROMDATA INTEGER.POP CODE.CAR FLOAT.< CODE.YANKDUP FLOAT.+ CODE.DO*RANGE )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 1 "data" : {0.291222} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 229,
  "genome": "{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction CODE.INSERT :close  0}",
  "program": "(INTEGER.FROMBOOLEAN BOOLEAN.FROMINTEGER FLOAT.SWAP CODE.INSERT )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 231,
  "genome": "{:instruction INTEGER.= :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction EXEC.STACKDEPTH :close  0}{:instruction FLOAT.POP :close  4}{:instruction EXEC.POP :close  0}{:instruction CODE.DO*RANGE :close  0}{:instruction CODE.NTHCDR :close  4}{:instruction FLOAT.TAN :close  0}{:instruction INTEGER.STACKDEPTH :close  4}{:instruction FLOAT.= :close  4}{:instruction CODE.NTHCDR :close  4}{:instruction FLOAT.+ :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction CODE.POSITION :close  4}{:instruction CODE.DUP :close  0}{:instruction FLOAT.MIN :close  4}{:instruction FLOAT.FLUSH :close  0}{:instruction INTEGER.YANK :close  4}{:instruction INTEGER.YANKDUP :close  0}{:instruction FLOAT.MAX :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction CODE.SHOVE :close  0}{:instruction EXEC.STACKDEPTH :close  4}{:instruction EXEC.YANK :close  4}{:instruction EXEC.FLUSH :close  0}{:instruction CODE.CAR :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction CODE.LIST :close  0}{:instruction FLOAT.MIN :close  0}{:instruction CODE.DUP :close  0}{:instruction CODE.DO*TIMES :close  0}",
  "program": "(INTEGER.= BOOLEAN.STACKDEPTH EXEC.STACKDEPTH FLOAT.POP EXEC.POP (CODE.DO*RANGE CODE.NTHCDR )FLOAT.TAN INTEGER.STACKDEPTH FLOAT.= CODE.NTHCDR FLOAT.+ CODE.DO*TIMES CODE.POSITION CODE.DUP FLOAT.MIN FLOAT.FLUSH INTEGER.YANK INTEGER.YANKDUP FLOAT.MAX BOOLEAN.YANK CODE.SHOVE EXEC.STACKDEPTH EXEC.YANK EXEC.FLUSH CODE.CAR CODE.DO*TIMES CODE.LIST FLOAT.MIN CODE.DUP CODE.DO*TIMES )",
  "result-set": { "integer-stack": {"size": 3 "data" : {47 47 0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 232,
  "genome": "{:instruction BOOLEAN.= :close  0}{:instruction CODE.QUOTE :close  0}{:instruction FLOAT.COS :close  4}{:instruction INTEGER.% :close  0}{:instruction INTEGER.= :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction 527 :close  0}{:instruction BOOLEAN.NAND :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction CODE.DO*RANGE :close  4}{:instruction CODE.IF :close  0}{:instruction FLOAT./ :close  0}{:instruction INTEGER.SHOVE :close  4}",
  "program": "(BOOLEAN.= CODE.QUOTE (FLOAT.COS )INTEGER.% INTEGER.= BOOLEAN.FROMFLOAT 527 BOOLEAN.NAND BOOLEAN.ROT CODE.DO*RANGE CODE.IF FLOAT./ INTEGER.SHOVE )",
  "result-set": { "integer-stack": {"size": 1 "data" : {527} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 233,
  "genome": "{:instruction 3501 :close  4}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction CODE.FROMFLOAT :close  4}{:instruction TRUE :close  4}{:instruction CODE.= :close  0}{:instruction FLOAT.= :close  0}{:instruction INTEGER.STACKDEPTH :close  4}{:instruction INTEGER.SWAP :close  0}{:instruction FLOAT.FROMBOOLEAN :close  4}{:instruction FLOAT.DUP :close  0}{:instruction INTEGER./ :close  0}{:instruction 0.0076833993680038848 :close  0}{:instruction FLOAT.TAN :close  4}{:instruction CODE.INSTRUCTIONS :close  4}{:instruction INTEGER.FLUSH :close  0}{:instruction FLOAT.> :close  0}",
  "program": "(3501 FLOAT.STACKDEPTH BOOLEAN.FLUSH CODE.FROMFLOAT TRUE CODE.= FLOAT.= INTEGER.STACKDEPTH INTEGER.SWAP FLOAT.FROMBOOLEAN FLOAT.DUP INTEGER./ 0.0076833993680038848 FLOAT.TAN CODE.INSTRUCTIONS INTEGER.FLUSH FLOAT.> )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 1 "data" : {1} },
                  "bool-stack": {"size": 1 "data" : {1} } }
}
{ "id": 234,
  "genome": "{:instruction BOOLEAN.SWAP :close  0}{:instruction EXEC.DUP :close  0}{:instruction INTEGER.- :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction CODE.CONS :close  4}{:instruction BOOLEAN.= :close  0}{:instruction CODE.POP :close  0}{:instruction CODE.POP :close  0}{:instruction FLOAT.MIN :close  0}",
  "program": "(BOOLEAN.SWAP EXEC.DUP (INTEGER.- BOOLEAN.FROMFLOAT CODE.CONS )BOOLEAN.= CODE.POP CODE.POP FLOAT.MIN )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 235,
  "genome": "{:instruction EXEC.DUP :close  0}{:instruction CODE.FROMFLOAT :close  4}{:instruction CODE.LENGTH :close  0}{:instruction FLOAT.> :close  4}{:instruction BOOLEAN.SHOVE :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction CODE.IF :close  4}{:instruction CODE.YANK :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction CODE.DO :close  0}{:instruction CODE.CONTAINER :close  0}{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction CODE.QUOTE :close  0}{:instruction CODE.NOOP :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction CODE.DO :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction BOOLEAN.SHOVE :close  4}{:instruction EXEC.WHEN :close  0}{:instruction FLOAT./ :close  0}{:instruction INTEGER.* :close  0}{:instruction CODE.SIZE :close  0}{:instruction INTEGER.YANKDUP :close  4}{:instruction BOOLEAN.YANK :close  0}",
  "program": "(EXEC.DUP (CODE.FROMFLOAT )CODE.LENGTH FLOAT.> BOOLEAN.SHOVE CODE.FROMBOOLEAN CODE.NTHCDR CODE.IF CODE.YANK BOOLEAN.FLUSH CODE.DO CODE.CONTAINER INTEGER.FROMBOOLEAN CODE.QUOTE (CODE.NOOP BOOLEAN.FLUSH EXEC.SHOVE (CODE.DO BOOLEAN.OR BOOLEAN.SHOVE ))EXEC.WHEN (FLOAT./ INTEGER.* CODE.SIZE INTEGER.YANKDUP )BOOLEAN.YANK )",
  "result-set": { "integer-stack": {"size": 2 "data" : {18 18} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 236,
  "genome": "{:instruction CODE.FLUSH :close  0}{:instruction CODE.ROT :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction EXEC.SWAP :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction INTEGER.> :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction INTEGER.= :close  4}{:instruction CODE.QUOTE :close  4}{:instruction FLOAT.+ :close  0}{:instruction EXEC.ROT :close  0}{:instruction CODE.NOOP :close  4}{:instruction CODE.NTH :close  0}{:instruction CODE.SIZE :close  0}{:instruction FLOAT.DUP :close  0}{:instruction EXEC.WHEN :close  0}{:instruction CODE.POSITION :close  0}{:instruction CODE.LENGTH :close  0}{:instruction FLOAT.+ :close  4}{:instruction EXEC.STACKDEPTH :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction INTEGER.* :close  0}{:instruction FLOAT.FROMDATA :close  0}{:instruction INTEGER.MIN :close  0}{:instruction CODE.INSERT :close  4}{:instruction FLOAT.SIN :close  4}{:instruction CODE.FROMINTEGER :close  0}{:instruction INTEGER.FROMBOOLEAN :close  4}{:instruction EXEC.DO*COUNT :close  4}{:instruction FLOAT.ROT :close  0}{:instruction BOOLEAN.= :close  0}{:instruction CODE.POSITION :close  0}{:instruction FLOAT.FLUSH :close  0}{:instruction FLOAT.> :close  0}{:instruction CODE.POSITION :close  0}{:instruction CODE.YANK :close  0}{:instruction FLOAT.- :close  0}{:instruction EXEC.IF :close  0}{:instruction EXEC.STACKDEPTH :close  0}{:instruction CODE.DUP :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction EXEC.YANK :close  0}{:instruction FLOAT.SWAP :close  4}{:instruction INTEGER.< :close  0}",
  "program": "(CODE.FLUSH CODE.ROT BOOLEAN.FLUSH EXEC.SWAP (INTEGER.FROMFLOAT INTEGER.> CODE.FROMBOOLEAN INTEGER.= )()CODE.QUOTE ()FLOAT.+ EXEC.ROT (CODE.NOOP )()()CODE.NTH CODE.SIZE FLOAT.DUP EXEC.WHEN (CODE.POSITION CODE.LENGTH FLOAT.+ )EXEC.STACKDEPTH CODE.STACKDEPTH INTEGER.* FLOAT.FROMDATA INTEGER.MIN CODE.INSERT FLOAT.SIN CODE.FROMINTEGER INTEGER.FROMBOOLEAN EXEC.DO*COUNT ()FLOAT.ROT BOOLEAN.= CODE.POSITION FLOAT.FLUSH FLOAT.> CODE.POSITION CODE.YANK FLOAT.- EXEC.IF (EXEC.STACKDEPTH CODE.DUP BOOLEAN.YANK EXEC.YANK FLOAT.SWAP )()INTEGER.< )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 237,
  "genome": "{:instruction BOOLEAN.SHOVE :close  4}",
  "program": "(BOOLEAN.SHOVE )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 240,
  "genome": "{:instruction FLOAT.SWAP :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction CODE.IF :close  0}{:instruction CODE.MEMBER :close  0}{:instruction CODE.EXTRACT :close  0}{:instruction FLOAT.MIN :close  0}{:instruction CODE.APPEND :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction EXEC.= :close  0}{:instruction FLOAT.= :close  0}{:instruction BOOLEAN.SWAP :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction CODE.LIST :close  0}{:instruction CODE.ATOM :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction EXEC.= :close  0}{:instruction INTEGER.DUP :close  4}{:instruction CODE.CDR :close  0}{:instruction FLOAT.- :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction BOOLEAN.SWAP :close  0}{:instruction FLOAT.* :close  0}{:instruction BOOLEAN.SHOVE :close  0}{:instruction INTEGER.ROT :close  0}{:instruction INTEGER.FROMFLOAT :close  4}{:instruction CODE.LIST :close  0}{:instruction CODE.DO :close  0}{:instruction EXEC.K :close  0}{:instruction CODE.FROMFLOAT :close  0}{:instruction CODE.FLUSH :close  0}{:instruction INTEGER.DUP :close  0}{:instruction FLOAT.+ :close  0}{:instruction FLOAT.MAX :close  0}{:instruction INTEGER.MAX :close  0}{:instruction FLOAT.SIN :close  0}{:instruction INTEGER.FLUSH :close  0}{:instruction FLOAT.SIN :close  0}{:instruction INTEGER.FROMFLOAT :close  4}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction FLOAT.STACKDEPTH :close  4}{:instruction CODE.DO* :close  0}",
  "program": "(FLOAT.SWAP INTEGER.FROMFLOAT CODE.IF CODE.MEMBER CODE.EXTRACT FLOAT.MIN CODE.APPEND INTEGER.STACKDEPTH EXEC.= FLOAT.= BOOLEAN.SWAP BOOLEAN.ROT FLOAT.STACKDEPTH CODE.LIST CODE.ATOM FLOAT.SWAP BOOLEAN.NOR CODE.FROMBOOLEAN EXEC.= INTEGER.DUP CODE.CDR FLOAT.- BOOLEAN.FROMFLOAT BOOLEAN.SWAP FLOAT.* BOOLEAN.SHOVE INTEGER.ROT INTEGER.FROMFLOAT CODE.LIST CODE.DO EXEC.K (CODE.FROMFLOAT CODE.FLUSH INTEGER.DUP FLOAT.+ FLOAT.MAX INTEGER.MAX FLOAT.SIN INTEGER.FLUSH FLOAT.SIN INTEGER.FROMFLOAT )()BOOLEAN.FROMINTEGER INTEGER.SWAP FLOAT.STACKDEPTH CODE.DO* )",
  "result-set": { "integer-stack": {"size": 1 "data" : {0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 2 "data" : {1 0} } }
}
{ "id": 242,
  "genome": "{:instruction CODE.DUP :close  0}{:instruction FLOAT.FROMDATA :close  4}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction CODE.STACKDEPTH :close  4}{:instruction INTEGER.YANKDUP :close  0}{:instruction EXEC.IF :close  0}{:instruction CODE.SWAP :close  0}{:instruction BOOLEAN.NOT :close  0}{:instruction BOOLEAN.FROMINTEGER :close  4}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction BOOLEAN.NOT :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction BOOLEAN.POP :close  0}{:instruction INTEGER.FLUSH :close  0}{:instruction FLOAT.< :close  0}{:instruction FLOAT.- :close  0}{:instruction BOOLEAN.STACKDEPTH :close  4}{:instruction INTEGER.MAX :close  4}{:instruction FLOAT.FROMINTEGER :close  0}{:instruction FLOAT.% :close  0}{:instruction CODE.CAR :close  0}{:instruction 1028 :close  0}{:instruction INTEGER.ROT :close  0}{:instruction FLOAT.COS :close  0}{:instruction EXEC.SWAP :close  0}{:instruction EXEC.FLUSH :close  0}{:instruction CODE.APPEND :close  0}",
  "program": "(CODE.DUP FLOAT.FROMDATA INTEGER.FROMFLOAT BOOLEAN.YANK CODE.FROMBOOLEAN CODE.STACKDEPTH INTEGER.YANKDUP EXEC.IF (CODE.SWAP BOOLEAN.NOT BOOLEAN.FROMINTEGER )()BOOLEAN.FROMFLOAT BOOLEAN.NOR BOOLEAN.NOT BOOLEAN.FROMFLOAT BOOLEAN.POP INTEGER.FLUSH FLOAT.< FLOAT.- BOOLEAN.STACKDEPTH INTEGER.MAX FLOAT.FROMINTEGER FLOAT.% CODE.CAR 1028 INTEGER.ROT FLOAT.COS EXEC.SWAP (EXEC.FLUSH CODE.APPEND )())",
  "result-set": { "integer-stack": {"size": 1 "data" : {1028} },
                  "float-stack": {"size": 1 "data" : {1} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 243,
  "genome": "{:instruction CODE.LIST :close  4}{:instruction CODE.EXTRACT :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction FLOAT.TAN :close  0}{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction FLOAT.MIN :close  4}{:instruction EXEC.DO*TIMES :close  0}{:instruction BOOLEAN.= :close  0}{:instruction TRUE :close  0}{:instruction FLOAT.< :close  0}{:instruction INTEGER.SWAP :close  4}{:instruction FLOAT.TAN :close  0}{:instruction BOOLEAN.NAND :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction FLOAT.% :close  0}{:instruction BOOLEAN.= :close  0}{:instruction FLOAT.FROMDATA :close  0}{:instruction CODE.NTH :close  0}{:instruction CODE.DO* :close  0}{:instruction CODE.POSITION :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction INTEGER.* :close  4}{:instruction FLOAT.MIN :close  0}{:instruction FLOAT.- :close  0}{:instruction EXEC.ROT :close  0}{:instruction CODE.= :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction CODE.DO :close  0}{:instruction 0.67857154590975766 :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction BOOLEAN.SWAP :close  0}{:instruction FLOAT./ :close  0}{:instruction 2454 :close  0}{:instruction CODE.CDR :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction FLOAT.SIN :close  0}{:instruction 3430 :close  4}{:instruction EXEC.SWAP :close  0}{:instruction FLOAT.COS :close  4}{:instruction FLOAT.= :close  4}{:instruction INTEGER.* :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction BOOLEAN.SHOVE :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction BOOLEAN.SHOVE :close  0}{:instruction FLOAT.> :close  0}",
  "program": "(CODE.LIST CODE.EXTRACT CODE.FROMINTEGER FLOAT.TAN INTEGER.FROMBOOLEAN FLOAT.MIN EXEC.DO*TIMES (BOOLEAN.= TRUE FLOAT.< INTEGER.SWAP )FLOAT.TAN BOOLEAN.NAND EXEC.DO*WHILE (FLOAT.% BOOLEAN.= FLOAT.FROMDATA CODE.NTH CODE.DO* CODE.POSITION BOOLEAN.AND INTEGER.* )FLOAT.MIN FLOAT.- EXEC.ROT (CODE.= INTEGER.SWAP CODE.DO 0.67857154590975766 BOOLEAN.STACKDEPTH BOOLEAN.SWAP FLOAT./ 2454 CODE.CDR BOOLEAN.OR FLOAT.SIN 3430 )()()EXEC.SWAP (FLOAT.COS )()FLOAT.= INTEGER.* INTEGER.SHOVE BOOLEAN.SHOVE CODE.DO*TIMES BOOLEAN.SHOVE FLOAT.> )",
  "result-set": { "integer-stack": {"size": 2 "data" : {0 0} },
                  "float-stack": {"size": 1 "data" : {0.598314} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 244,
  "genome": "{:instruction INTEGER.POP :close  0}{:instruction BOOLEAN.YANKDUP :close  0}{:instruction EXEC.WHEN :close  0}{:instruction CODE.APPEND :close  0}{:instruction INTEGER.+ :close  0}{:instruction CODE.NULL :close  0}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction CODE.CDR :close  0}{:instruction -0.36756345568400883 :close  4}{:instruction FLOAT.* :close  4}{:instruction CODE.APPEND :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction FLOAT.COS :close  0}{:instruction CODE.LIST :close  4}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction 3032 :close  0}{:instruction CODE.IF :close  0}{:instruction FLOAT.= :close  0}",
  "program": "(INTEGER.POP BOOLEAN.YANKDUP EXEC.WHEN (CODE.APPEND INTEGER.+ CODE.NULL FLOAT.FROMBOOLEAN CODE.CDR -0.36756345568400883 )FLOAT.* CODE.APPEND INTEGER.FROMFLOAT FLOAT.COS CODE.LIST BOOLEAN.FROMFLOAT 3032 CODE.IF FLOAT.= )",
  "result-set": { "integer-stack": {"size": 2 "data" : {3032 0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 245,
  "genome": "{:instruction FALSE :close  0}{:instruction BOOLEAN.SWAP :close  0}{:instruction BOOLEAN.NAND :close  4}{:instruction BOOLEAN.FLUSH :close  0}{:instruction EXEC.DO*COUNT :close  4}{:instruction BOOLEAN.DUP :close  0}{:instruction FLOAT.+ :close  4}{:instruction FLOAT.COS :close  4}{:instruction INTEGER.= :close  0}{:instruction INTEGER.* :close  4}{:instruction EXEC.WHEN :close  0}{:instruction CODE.QUOTE :close  0}{:instruction CODE.CAR :close  4}{:instruction EXEC.POP :close  0}{:instruction BOOLEAN.= :close  4}{:instruction FLOAT./ :close  4}{:instruction BOOLEAN.SWAP :close  4}{:instruction EXEC.STACKDEPTH :close  0}{:instruction INTEGER.ROT :close  0}{:instruction FLOAT.% :close  4}{:instruction INTEGER.< :close  0}{:instruction EXEC.S :close  0}{:instruction FLOAT.ROT :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction FLOAT.SHOVE :close  4}{:instruction INTEGER.YANKDUP :close  4}{:instruction FLOAT.MAX :close  0}{:instruction CODE.DUP :close  0}{:instruction CODE.CAR :close  4}{:instruction FLOAT.* :close  0}{:instruction EXEC.DO*RANGE :close  4}{:instruction INTEGER.MAX :close  0}{:instruction CODE.NULL :close  0}{:instruction INTEGER.STACKDEPTH :close  0}",
  "program": "(FALSE BOOLEAN.SWAP BOOLEAN.NAND BOOLEAN.FLUSH EXEC.DO*COUNT ()BOOLEAN.DUP FLOAT.+ FLOAT.COS INTEGER.= INTEGER.* EXEC.WHEN (CODE.QUOTE (CODE.CAR ))EXEC.POP (BOOLEAN.= )FLOAT./ BOOLEAN.SWAP EXEC.STACKDEPTH INTEGER.ROT FLOAT.% INTEGER.< EXEC.S (FLOAT.ROT INTEGER.STACKDEPTH FLOAT.SHOVE )()()INTEGER.YANKDUP FLOAT.MAX CODE.DUP CODE.CAR FLOAT.* EXEC.DO*RANGE ()INTEGER.MAX CODE.NULL INTEGER.STACKDEPTH )",
  "result-set": { "integer-stack": {"size": 2 "data" : {1 17} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 246,
  "genome": "{:instruction CODE.SWAP :close  0}{:instruction EXEC.IF :close  4}{:instruction EXEC.SWAP :close  0}{:instruction CODE.CONTAINER :close  4}{:instruction FLOAT.FLUSH :close  0}{:instruction CODE.QUOTE :close  0}{:instruction FLOAT.+ :close  0}{:instruction FLOAT.MIN :close  4}{:instruction FLOAT.FLUSH :close  0}{:instruction FLOAT.+ :close  4}{:instruction FLOAT.STACKDEPTH :close  4}{:instruction FLOAT.= :close  0}{:instruction EXEC.K :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction FLOAT.ROT :close  0}{:instruction CODE.SIZE :close  0}{:instruction BOOLEAN.POP :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction BOOLEAN.NOT :close  4}",
  "program": "(CODE.SWAP EXEC.IF ()()EXEC.SWAP (CODE.CONTAINER )()FLOAT.FLUSH CODE.QUOTE (FLOAT.+ FLOAT.MIN )FLOAT.FLUSH FLOAT.+ FLOAT.STACKDEPTH FLOAT.= EXEC.K (INTEGER.STACKDEPTH FLOAT.ROT CODE.SIZE BOOLEAN.POP EXEC.DO*WHILE (BOOLEAN.NOT ))())",
  "result-set": { "integer-stack": {"size": 3 "data" : {3 1 0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 247,
  "genome": "{:instruction CODE.FROMBOOLEAN :close  0}",
  "program": "(CODE.FROMBOOLEAN )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 248,
  "genome": "{:instruction EXEC.POP :close  0}{:instruction INTEGER.< :close  0}{:instruction CODE.NOOP :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction CODE.FROMINTEGER :close  4}{:instruction CODE.CAR :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction INTEGER.% :close  0}{:instruction FLOAT.TAN :close  0}{:instruction EXEC.DO*COUNT :close  0}{:instruction FLOAT.FLUSH :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction EXEC.SWAP :close  4}{:instruction CODE.CONS :close  0}{:instruction EXEC.S :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction INTEGER.< :close  0}{:instruction FLOAT.YANKDUP :close  4}{:instruction FLOAT.SIN :close  0}{:instruction EXEC.POP :close  4}{:instruction CODE.DO* :close  4}{:instruction TRUE :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction INTEGER.MIN :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction CODE.YANK :close  4}{:instruction CODE.DO*RANGE :close  0}{:instruction INTEGER.- :close  0}{:instruction CODE.POSITION :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction CODE.STACKDEPTH :close  4}{:instruction INTEGER.< :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction BOOLEAN.DUP :close  4}{:instruction BOOLEAN.SWAP :close  0}{:instruction EXEC.SWAP :close  0}{:instruction INTEGER.> :close  4}",
  "program": "(EXEC.POP (INTEGER.< CODE.NOOP CODE.FROMINTEGER CODE.FROMINTEGER )CODE.CAR INTEGER.SHOVE CODE.DO*COUNT INTEGER.% FLOAT.TAN EXEC.DO*COUNT (FLOAT.FLUSH CODE.STACKDEPTH EXEC.DO*TIMES (EXEC.SWAP ()()))CODE.CONS EXEC.S (CODE.DO*COUNT INTEGER.< FLOAT.YANKDUP )()()FLOAT.SIN EXEC.POP ()CODE.DO* TRUE CODE.FROMINTEGER INTEGER.MIN BOOLEAN.FLUSH EXEC.YANKDUP CODE.YANK CODE.DO*RANGE INTEGER.- CODE.POSITION BOOLEAN.FROMINTEGER CODE.STACKDEPTH INTEGER.< BOOLEAN.FROMFLOAT BOOLEAN.DUP BOOLEAN.SWAP EXEC.SWAP (INTEGER.> )())",
  "result-set": { "integer-stack": {"size": 1 "data" : {0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 249,
  "genome": "{:instruction CODE.STACKDEPTH :close  0}",
  "program": "(CODE.STACKDEPTH )",
  "result-set": { "integer-stack": {"size": 1 "data" : {1} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 250,
  "genome": "{:instruction EXEC.DO*WHILE :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction CODE.APPEND :close  0}{:instruction CODE.SIZE :close  4}{:instruction FLOAT.YANKDUP :close  0}{:instruction CODE.NULL :close  4}{:instruction CODE.CDR :close  0}{:instruction CODE.= :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction BOOLEAN.FROMINTEGER :close  4}{:instruction INTEGER.FROMBOOLEAN :close  4}{:instruction CODE.NTHCDR :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction CODE.LIST :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction BOOLEAN.OR :close  0}",
  "program": "(EXEC.DO*WHILE (INTEGER.YANKDUP CODE.APPEND CODE.SIZE )FLOAT.YANKDUP CODE.NULL CODE.CDR CODE.= CODE.FROMBOOLEAN BOOLEAN.FROMINTEGER INTEGER.FROMBOOLEAN CODE.NTHCDR CODE.FROMBOOLEAN CODE.LIST EXEC.DO*WHILE (BOOLEAN.OR ))",
  "result-set": { "integer-stack": {"size": 1 "data" : {1} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 251,
  "genome": "{:instruction FLOAT.YANKDUP :close  4}{:instruction EXEC.DO*WHILE :close  0}{:instruction INTEGER.ROT :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction CODE.APPEND :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction BOOLEAN.POP :close  4}{:instruction BOOLEAN.OR :close  4}{:instruction CODE.DO*TIMES :close  0}{:instruction EXEC.= :close  4}{:instruction CODE.APPEND :close  0}{:instruction FLOAT.> :close  0}{:instruction INTEGER.FLUSH :close  4}{:instruction FLOAT.- :close  0}{:instruction CODE.INSERT :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction EXEC.WHEN :close  0}{:instruction CODE.YANKDUP :close  4}{:instruction FLOAT.COS :close  0}{:instruction BOOLEAN.= :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction FLOAT.FLUSH :close  0}{:instruction FLOAT.DUP :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction FLOAT.SIN :close  0}{:instruction BOOLEAN.DUP :close  0}{:instruction INTEGER.+ :close  0}{:instruction CODE.FROMFLOAT :close  4}{:instruction BOOLEAN.FLUSH :close  0}{:instruction CODE.EXTRACT :close  0}{:instruction FLOAT.ROT :close  0}{:instruction FLOAT.< :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction CODE.INSTRUCTIONS :close  4}{:instruction CODE.SHOVE :close  0}{:instruction CODE.IF :close  4}",
  "program": "(FLOAT.YANKDUP EXEC.DO*WHILE (INTEGER.ROT INTEGER.SHOVE CODE.APPEND EXEC.DO*WHILE (FLOAT.FROMBOOLEAN BOOLEAN.POP ))BOOLEAN.OR CODE.DO*TIMES EXEC.= CODE.APPEND FLOAT.> INTEGER.FLUSH FLOAT.- CODE.INSERT EXEC.DO*WHILE (EXEC.WHEN (CODE.YANKDUP ))FLOAT.COS BOOLEAN.= FLOAT.SHOVE FLOAT.FLUSH FLOAT.DUP BOOLEAN.ROT FLOAT.SIN BOOLEAN.DUP INTEGER.+ CODE.FROMFLOAT BOOLEAN.FLUSH CODE.EXTRACT FLOAT.ROT FLOAT.< INTEGER.YANKDUP CODE.INSTRUCTIONS CODE.SHOVE CODE.IF )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 252,
  "genome": "{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction CODE.EXTRACT :close  0}",
  "program": "(FLOAT.FROMBOOLEAN CODE.EXTRACT )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 253,
  "genome": "{:instruction BOOLEAN.FLUSH :close  0}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction INTEGER.+ :close  0}{:instruction CODE.MEMBER :close  0}{:instruction CODE.DUP :close  0}{:instruction CODE.CDR :close  0}{:instruction EXEC.ROT :close  4}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction CODE.QUOTE :close  4}{:instruction CODE.ATOM :close  0}{:instruction INTEGER.MIN :close  4}{:instruction EXEC.SHOVE :close  0}{:instruction INTEGER.FROMFLOAT :close  4}{:instruction INTEGER.+ :close  4}{:instruction FLOAT.+ :close  0}{:instruction CODE.SIZE :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction CODE.QUOTE :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction CODE.MEMBER :close  0}{:instruction CODE.DO*TIMES :close  4}{:instruction INTEGER.< :close  0}{:instruction CODE.NULL :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction EXEC.ROT :close  0}{:instruction FLOAT.COS :close  0}{:instruction BOOLEAN.NOT :close  0}{:instruction EXEC.SWAP :close  4}{:instruction BOOLEAN.SHOVE :close  0}{:instruction EXEC.YANK :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction BOOLEAN.FROMINTEGER :close  4}{:instruction BOOLEAN.YANK :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction INTEGER.= :close  0}{:instruction EXEC.= :close  0}{:instruction CODE.CDR :close  0}{:instruction CODE.POP :close  0}{:instruction CODE.NOOP :close  0}{:instruction FLOAT.MIN :close  4}",
  "program": "(BOOLEAN.FLUSH CODE.INSTRUCTIONS EXEC.YANKDUP INTEGER.+ CODE.MEMBER CODE.DUP CODE.CDR EXEC.ROT ()()()FLOAT.STACKDEPTH CODE.QUOTE ()CODE.ATOM INTEGER.MIN EXEC.SHOVE (INTEGER.FROMFLOAT )INTEGER.+ FLOAT.+ CODE.SIZE INTEGER.YANKDUP INTEGER.FROMFLOAT CODE.QUOTE (BOOLEAN.AND CODE.MEMBER CODE.DO*TIMES )INTEGER.< CODE.NULL CODE.FROMBOOLEAN EXEC.ROT (FLOAT.COS BOOLEAN.NOT EXEC.SWAP ()())()(BOOLEAN.SHOVE EXEC.YANK EXEC.DO*RANGE (BOOLEAN.FROMINTEGER ))BOOLEAN.YANK EXEC.DO*WHILE (CODE.NTHCDR INTEGER.FROMFLOAT INTEGER.= EXEC.= CODE.CDR CODE.POP CODE.NOOP FLOAT.MIN ))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 3 "data" : {0 0 0} } }
}
{ "id": 254,
  "genome": "{:instruction BOOLEAN.STACKDEPTH :close  0}",
  "program": "(BOOLEAN.STACKDEPTH )",
  "result-set": { "integer-stack": {"size": 1 "data" : {0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 255,
  "genome": "{:instruction INTEGER.+ :close  0}",
  "program": "(INTEGER.+ )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 256,
  "genome": "{:instruction BOOLEAN.NOT :close  4}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction BOOLEAN.POP :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction CODE.DO*COUNT :close  4}{:instruction FLOAT.FLUSH :close  0}{:instruction EXEC.= :close  0}{:instruction BOOLEAN.YANKDUP :close  0}{:instruction BOOLEAN.NAND :close  4}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction BOOLEAN.SWAP :close  0}{:instruction FALSE :close  0}{:instruction CODE.CAR :close  0}{:instruction CODE.DO :close  0}{:instruction CODE.CDR :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction CODE.ROT :close  4}{:instruction BOOLEAN.NOT :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction CODE.DO :close  4}{:instruction FLOAT.YANKDUP :close  0}{:instruction CODE.NOOP :close  0}{:instruction BOOLEAN.NOT :close  0}{:instruction BOOLEAN.FLUSH :close  0}",
  "program": "(BOOLEAN.NOT INTEGER.FROMFLOAT BOOLEAN.POP CODE.DO*TIMES CODE.DO*COUNT FLOAT.FLUSH EXEC.= BOOLEAN.YANKDUP BOOLEAN.NAND INTEGER.FROMFLOAT BOOLEAN.SWAP FALSE CODE.CAR CODE.DO CODE.CDR BOOLEAN.ROT EXEC.DO*WHILE (CODE.ROT )BOOLEAN.NOT BOOLEAN.AND CODE.DO FLOAT.YANKDUP CODE.NOOP BOOLEAN.NOT BOOLEAN.FLUSH )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 258,
  "genome": "",
  "program": "()",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 259,
  "genome": "{:instruction EXEC.POP :close  0}{:instruction BOOLEAN.NOT :close  0}{:instruction EXEC.DUP :close  4}{:instruction FLOAT.SHOVE :close  0}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction FLOAT.MAX :close  4}{:instruction BOOLEAN.NOT :close  0}{:instruction CODE.CONS :close  0}{:instruction CODE.LENGTH :close  0}{:instruction CODE.POP :close  0}{:instruction EXEC.FLUSH :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction CODE.IF :close  0}{:instruction CODE.= :close  4}{:instruction FLOAT./ :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction FLOAT.FLUSH :close  0}{:instruction CODE.YANK :close  0}{:instruction EXEC.DUP :close  0}{:instruction CODE.DO* :close  4}{:instruction BOOLEAN.FLUSH :close  0}{:instruction EXEC.IF :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction FLOAT.COS :close  0}{:instruction INTEGER./ :close  0}{:instruction CODE.CONS :close  0}{:instruction CODE.QUOTE :close  0}{:instruction INTEGER.ROT :close  0}{:instruction EXEC.IF :close  0}{:instruction CODE.CONTAINER :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction FLOAT.DUP :close  4}{:instruction CODE.APPEND :close  0}{:instruction CODE.POP :close  4}{:instruction CODE.FROMFLOAT :close  4}{:instruction EXEC.SWAP :close  0}{:instruction FLOAT.* :close  0}{:instruction CODE.NULL :close  0}{:instruction CODE.YANK :close  4}{:instruction FLOAT.= :close  4}{:instruction EXEC.YANKDUP :close  4}{:instruction FLOAT.- :close  0}{:instruction INTEGER.YANK :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction FLOAT./ :close  0}",
  "program": "(EXEC.POP (BOOLEAN.NOT EXEC.DUP ())FLOAT.SHOVE FLOAT.STACKDEPTH FLOAT.MAX BOOLEAN.NOT CODE.CONS CODE.LENGTH CODE.POP EXEC.FLUSH INTEGER.STACKDEPTH CODE.IF CODE.= FLOAT./ EXEC.DO*WHILE (FLOAT.FLUSH CODE.YANK EXEC.DUP (CODE.DO* ))BOOLEAN.FLUSH EXEC.IF (EXEC.SHOVE (FLOAT.COS INTEGER./ CODE.CONS CODE.QUOTE (INTEGER.ROT EXEC.IF (CODE.CONTAINER EXEC.DO*WHILE (FLOAT.DUP ))())CODE.APPEND CODE.POP ))()CODE.FROMFLOAT EXEC.SWAP (FLOAT.* CODE.NULL CODE.YANK )()FLOAT.= EXEC.YANKDUP FLOAT.- INTEGER.YANK INTEGER.YANKDUP FLOAT./ )",
  "result-set": { "integer-stack": {"size": 2 "data" : {30 0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 261,
  "genome": "{:instruction CODE.DO*RANGE :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction CODE.DO* :close  0}{:instruction CODE.FROMINTEGER :close  4}{:instruction INTEGER./ :close  0}{:instruction FLOAT.SIN :close  0}{:instruction CODE.YANK :close  0}{:instruction BOOLEAN.= :close  0}{:instruction CODE.POP :close  0}{:instruction CODE.NTHCDR :close  0}",
  "program": "(CODE.DO*RANGE BOOLEAN.YANK CODE.DO* CODE.FROMINTEGER INTEGER./ FLOAT.SIN CODE.YANK BOOLEAN.= CODE.POP CODE.NTHCDR )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 262,
  "genome": "{:instruction EXEC.FLUSH :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction BOOLEAN.NAND :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction CODE.NOOP :close  4}{:instruction EXEC.YANK :close  0}{:instruction CODE.MEMBER :close  0}{:instruction CODE.LIST :close  4}{:instruction BOOLEAN.OR :close  4}{:instruction INTEGER.ROT :close  0}{:instruction CODE.ATOM :close  0}{:instruction CODE.DO* :close  4}{:instruction CODE.FROMFLOAT :close  0}{:instruction BOOLEAN.POP :close  0}{:instruction BOOLEAN.POP :close  4}{:instruction EXEC.Y :close  0}{:instruction CODE.CONS :close  0}",
  "program": "(EXEC.FLUSH BOOLEAN.AND EXEC.DO*RANGE (EXEC.DO*WHILE (BOOLEAN.NAND CODE.STACKDEPTH CODE.NOOP ))EXEC.YANK CODE.MEMBER CODE.LIST BOOLEAN.OR INTEGER.ROT CODE.ATOM CODE.DO* CODE.FROMFLOAT BOOLEAN.POP BOOLEAN.POP EXEC.Y (CODE.CONS ))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 263,
  "genome": "{:instruction FLOAT.SHOVE :close  0}{:instruction BOOLEAN.NAND :close  0}{:instruction CODE.INSERT :close  0}{:instruction FLOAT.FROMINTEGER :close  0}{:instruction CODE.= :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction EXEC.WHILE :close  0}{:instruction CODE.POSITION :close  0}{:instruction CODE.DO*RANGE :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction FLOAT.ROT :close  0}{:instruction FLOAT.COS :close  4}{:instruction FLOAT.FROMDATA :close  0}{:instruction CODE.YANK :close  0}{:instruction EXEC.K :close  0}{:instruction FLOAT.- :close  0}{:instruction EXEC.IF :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction FLOAT.POP :close  0}{:instruction CODE.FLUSH :close  0}{:instruction EXEC.K :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction CODE.SIZE :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction INTEGER.MAX :close  0}{:instruction INTEGER.POP :close  0}",
  "program": "(FLOAT.SHOVE BOOLEAN.NAND CODE.INSERT FLOAT.FROMINTEGER CODE.= BOOLEAN.ROT EXEC.WHILE (CODE.POSITION CODE.DO*RANGE INTEGER.SWAP FLOAT.ROT FLOAT.COS )FLOAT.FROMDATA CODE.YANK EXEC.K (FLOAT.- EXEC.IF (EXEC.SHOVE (FLOAT.POP CODE.FLUSH EXEC.K (CODE.FROMBOOLEAN CODE.STACKDEPTH CODE.SIZE BOOLEAN.YANK INTEGER.MAX INTEGER.POP )()))())())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 264,
  "genome": "{:instruction CODE.ROT :close  4}{:instruction INTEGER.SHOVE :close  4}{:instruction EXEC.YANKDUP :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction EXEC.POP :close  0}{:instruction INTEGER.< :close  4}{:instruction FLOAT.+ :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction CODE.DO* :close  0}{:instruction EXEC.STACKDEPTH :close  0}{:instruction CODE.NOOP :close  0}{:instruction CODE.= :close  0}{:instruction FLOAT.< :close  0}{:instruction EXEC.DO*TIMES :close  0}",
  "program": "(CODE.ROT INTEGER.SHOVE EXEC.YANKDUP BOOLEAN.AND EXEC.POP (INTEGER.< )FLOAT.+ INTEGER.SWAP CODE.DO* EXEC.STACKDEPTH CODE.NOOP CODE.= FLOAT.< EXEC.DO*TIMES ())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 265,
  "genome": "{:instruction FLOAT.> :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction CODE.YANKDUP :close  4}{:instruction CODE.MEMBER :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction FLOAT./ :close  0}{:instruction INTEGER.> :close  4}{:instruction EXEC.WHEN :close  0}{:instruction CODE.YANK :close  0}{:instruction CODE.NTH :close  4}{:instruction EXEC.WHEN :close  4}{:instruction EXEC.= :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction EXEC.IF :close  4}{:instruction CODE.SHOVE :close  0}",
  "program": "(FLOAT.> FLOAT.SWAP CODE.YANKDUP CODE.MEMBER EXEC.DO*RANGE (FLOAT./ INTEGER.> )EXEC.WHEN (CODE.YANK CODE.NTH )EXEC.WHEN ()EXEC.= CODE.STACKDEPTH EXEC.IF ()()CODE.SHOVE )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 1 "data" : {0} } }
}
{ "id": 266,
  "genome": "{:instruction CODE.POSITION :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction FLOAT.DUP :close  0}{:instruction CODE.DO*TIMES :close  4}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction FLOAT.> :close  4}{:instruction FLOAT.MIN :close  0}{:instruction EXEC.S :close  0}{:instruction CODE.CAR :close  4}{:instruction FLOAT.DUP :close  0}{:instruction EXEC.YANK :close  0}{:instruction BOOLEAN.NOR :close  0}",
  "program": "(CODE.POSITION BOOLEAN.ROT FLOAT.DUP CODE.DO*TIMES BOOLEAN.FROMINTEGER FLOAT.> FLOAT.MIN EXEC.S (CODE.CAR )()()FLOAT.DUP EXEC.YANK BOOLEAN.NOR )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 267,
  "genome": "{:instruction CODE.POP :close  0}{:instruction CODE.DO :close  0}{:instruction FLOAT.MAX :close  0}{:instruction INTEGER.FLUSH :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction CODE.SWAP :close  0}{:instruction FLOAT.POP :close  0}{:instruction FLOAT.MIN :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction CODE.FROMFLOAT :close  0}{:instruction BOOLEAN.ROT :close  4}{:instruction FLOAT.FLUSH :close  4}{:instruction CODE.ATOM :close  0}{:instruction CODE.SWAP :close  4}{:instruction CODE.INSERT :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction FLOAT.MAX :close  0}{:instruction FLOAT.MIN :close  0}{:instruction INTEGER.MIN :close  4}{:instruction EXEC.YANKDUP :close  0}{:instruction BOOLEAN.FLUSH :close  4}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction BOOLEAN.NOT :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction FLOAT.= :close  0}{:instruction INTEGER.* :close  0}{:instruction CODE.SWAP :close  0}{:instruction -0.67151878347422900 :close  0}{:instruction BOOLEAN.SHOVE :close  4}{:instruction INTEGER.FLUSH :close  0}{:instruction FLOAT.* :close  0}{:instruction CODE.DO*COUNT :close  4}{:instruction CODE.CAR :close  4}{:instruction 2792 :close  0}{:instruction BOOLEAN.DUP :close  4}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction CODE.POP :close  4}{:instruction INTEGER.% :close  4}{:instruction FLOAT.ROT :close  0}",
  "program": "(CODE.POP CODE.DO FLOAT.MAX INTEGER.FLUSH EXEC.YANKDUP CODE.SWAP FLOAT.POP FLOAT.MIN CODE.NTHCDR CODE.FROMFLOAT BOOLEAN.ROT FLOAT.FLUSH CODE.ATOM CODE.SWAP CODE.INSERT CODE.STACKDEPTH CODE.FROMBOOLEAN FLOAT.MAX FLOAT.MIN INTEGER.MIN EXEC.YANKDUP BOOLEAN.FLUSH BOOLEAN.FROMFLOAT BOOLEAN.NOT BOOLEAN.STACKDEPTH FLOAT.= INTEGER.* CODE.SWAP -0.67151878347422900 BOOLEAN.SHOVE INTEGER.FLUSH FLOAT.* CODE.DO*COUNT CODE.CAR 2792 BOOLEAN.DUP CODE.INSTRUCTIONS CODE.POP INTEGER.% FLOAT.ROT )",
  "result-set": { "integer-stack": {"size": 1 "data" : {2792} },
                  "float-stack": {"size": 1 "data" : {-0.671519} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 268,
  "genome": "{:instruction CODE.CDR :close  0}{:instruction BOOLEAN.FROMFLOAT :close  4}{:instruction TRUE :close  4}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction CODE.DUP :close  0}{:instruction FLOAT.MIN :close  0}{:instruction FLOAT.> :close  0}{:instruction EXEC.YANKDUP :close  4}{:instruction CODE.DUP :close  4}{:instruction CODE.DO*TIMES :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction EXEC.SWAP :close  0}{:instruction FLOAT.+ :close  0}{:instruction INTEGER.ROT :close  0}{:instruction -0.14193958210338364 :close  0}{:instruction INTEGER.FROMFLOAT :close  0}{:instruction EXEC.SWAP :close  0}{:instruction CODE.SWAP :close  0}{:instruction CODE.NOOP :close  0}",
  "program": "(CODE.CDR BOOLEAN.FROMFLOAT TRUE CODE.FROMBOOLEAN CODE.INSTRUCTIONS CODE.DUP FLOAT.MIN FLOAT.> EXEC.YANKDUP CODE.DUP CODE.DO*TIMES CODE.DO*COUNT EXEC.SWAP (FLOAT.+ INTEGER.ROT -0.14193958210338364 INTEGER.FROMFLOAT EXEC.SWAP (CODE.SWAP CODE.NOOP )())())",
  "result-set": { "integer-stack": {"size": 1 "data" : {0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 269,
  "genome": "{:instruction FLOAT.POP :close  0}{:instruction BOOLEAN.= :close  0}{:instruction FLOAT.YANKDUP :close  0}{:instruction INTEGER.ROT :close  4}{:instruction CODE.ROT :close  0}{:instruction BOOLEAN.SWAP :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction FLOAT.FLUSH :close  0}{:instruction EXEC.DO*COUNT :close  4}{:instruction INTEGER.POP :close  0}{:instruction CODE.CDR :close  0}{:instruction EXEC.DO*RANGE :close  0}{:instruction CODE.ROT :close  4}{:instruction CODE.DO*COUNT :close  0}{:instruction FLOAT.COS :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction FLOAT.COS :close  0}{:instruction CODE.SHOVE :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction BOOLEAN.= :close  4}{:instruction FLOAT.MIN :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction CODE.DO* :close  4}{:instruction FLOAT.+ :close  0}{:instruction CODE.NTH :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction FLOAT.ROT :close  4}{:instruction EXEC.= :close  0}{:instruction FLOAT./ :close  0}{:instruction CODE.SHOVE :close  0}{:instruction INTEGER.ROT :close  0}{:instruction INTEGER.MIN :close  0}{:instruction CODE.CDR :close  0}{:instruction 534 :close  0}{:instruction CODE.INSTRUCTIONS :close  0}{:instruction INTEGER.ROT :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction FLOAT.FLUSH :close  0}{:instruction INTEGER.FROMFLOAT :close  4}{:instruction EXEC.DO*TIMES :close  4}{:instruction CODE.CAR :close  0}{:instruction CODE.STACKDEPTH :close  4}{:instruction EXEC.DO*WHILE :close  4}{:instruction INTEGER.* :close  0}{:instruction EXEC.WHEN :close  0}{:instruction EXEC.DO*TIMES :close  4}{:instruction BOOLEAN.STACKDEPTH :close  4}",
  "program": "(FLOAT.POP BOOLEAN.= FLOAT.YANKDUP INTEGER.ROT CODE.ROT BOOLEAN.SWAP BOOLEAN.FROMFLOAT FLOAT.FLUSH EXEC.DO*COUNT ()INTEGER.POP CODE.CDR EXEC.DO*RANGE (CODE.ROT )CODE.DO*COUNT FLOAT.COS CODE.FROMBOOLEAN FLOAT.COS CODE.SHOVE FLOAT.SHOVE BOOLEAN.= FLOAT.MIN BOOLEAN.ROT CODE.DO* FLOAT.+ CODE.NTH CODE.DO*COUNT FLOAT.ROT EXEC.= FLOAT./ CODE.SHOVE INTEGER.ROT INTEGER.MIN CODE.CDR 534 CODE.INSTRUCTIONS INTEGER.ROT INTEGER.SWAP BOOLEAN.YANK FLOAT.FLUSH INTEGER.FROMFLOAT EXEC.DO*TIMES ()CODE.CAR CODE.STACKDEPTH EXEC.DO*WHILE ()INTEGER.* EXEC.WHEN (EXEC.DO*TIMES ())BOOLEAN.STACKDEPTH )",
  "result-set": { "integer-stack": {"size": 1 "data" : {0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 270,
  "genome": "{:instruction FLOAT.+ :close  4}{:instruction EXEC.STACKDEPTH :close  0}{:instruction CODE.NULL :close  4}{:instruction CODE.STACKDEPTH :close  4}{:instruction INTEGER.= :close  0}{:instruction CODE.DO* :close  0}{:instruction EXEC.ROT :close  4}{:instruction INTEGER.FLUSH :close  0}{:instruction EXEC.DO*COUNT :close  4}{:instruction EXEC.DO*COUNT :close  0}{:instruction FLOAT.ROT :close  4}",
  "program": "(FLOAT.+ EXEC.STACKDEPTH CODE.NULL CODE.STACKDEPTH INTEGER.= CODE.DO* EXEC.ROT ()()()INTEGER.FLUSH EXEC.DO*COUNT ()EXEC.DO*COUNT (FLOAT.ROT ))",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 2 "data" : {0 0} } }
}
{ "id": 271,
  "genome": "{:instruction FLOAT.* :close  4}{:instruction INTEGER.* :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction INTEGER.POP :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction FLOAT.= :close  4}{:instruction CODE.CONTAINER :close  0}{:instruction CODE.INSERT :close  0}{:instruction CODE.EXTRACT :close  0}{:instruction INTEGER.MIN :close  4}{:instruction EXEC.ROT :close  0}{:instruction CODE.= :close  0}{:instruction EXEC.DO*WHILE :close  4}{:instruction BOOLEAN.NAND :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction CODE.SWAP :close  0}{:instruction FLOAT.YANK :close  0}{:instruction EXEC.DUP :close  4}{:instruction INTEGER.MIN :close  0}{:instruction CODE.EXTRACT :close  0}{:instruction CODE.DO*RANGE :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction FALSE :close  0}{:instruction FLOAT.MIN :close  4}{:instruction EXEC.IF :close  4}{:instruction CODE.DO* :close  4}{:instruction FLOAT.POP :close  0}{:instruction EXEC.STACKDEPTH :close  0}{:instruction FLOAT.POP :close  4}{:instruction FLOAT.MAX :close  4}{:instruction BOOLEAN.SWAP :close  0}{:instruction INTEGER.SWAP :close  4}{:instruction EXEC.DUP :close  0}{:instruction FLOAT.TAN :close  0}{:instruction CODE.FROMFLOAT :close  0}{:instruction BOOLEAN.FLUSH :close  0}{:instruction CODE.DO* :close  0}{:instruction -280 :close  4}{:instruction FLOAT.% :close  0}{:instruction BOOLEAN.YANK :close  0}{:instruction INTEGER.YANKDUP :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction CODE.LENGTH :close  0}{:instruction EXEC.STACKDEPTH :close  0}{:instruction INTEGER.SWAP :close  4}{:instruction CODE.MEMBER :close  0}",
  "program": "(FLOAT.* INTEGER.* EXEC.DO*TIMES (INTEGER.POP FLOAT.SWAP FLOAT.= )CODE.CONTAINER CODE.INSERT CODE.EXTRACT INTEGER.MIN EXEC.ROT (CODE.= EXEC.DO*WHILE ())()()BOOLEAN.NAND INTEGER.SHOVE CODE.SWAP FLOAT.YANK EXEC.DUP ()INTEGER.MIN CODE.EXTRACT CODE.DO*RANGE INTEGER.SHOVE FALSE FLOAT.MIN EXEC.IF ()()CODE.DO* FLOAT.POP EXEC.STACKDEPTH FLOAT.POP FLOAT.MAX BOOLEAN.SWAP INTEGER.SWAP EXEC.DUP (FLOAT.TAN CODE.FROMFLOAT BOOLEAN.FLUSH CODE.DO* -280 )FLOAT.% BOOLEAN.YANK INTEGER.YANKDUP BOOLEAN.FROMFLOAT CODE.STACKDEPTH BOOLEAN.AND CODE.LENGTH EXEC.STACKDEPTH INTEGER.SWAP CODE.MEMBER )",
  "result-set": { "integer-stack": {"size": 10 "data" : {0 2 -280 -280 0 16 20 -280 -280 34} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 272,
  "genome": "{:instruction INTEGER.FROMBOOLEAN :close  0}{:instruction CODE.YANKDUP :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction INTEGER.< :close  0}{:instruction INTEGER.YANKDUP :close  4}{:instruction CODE.DO*RANGE :close  0}{:instruction INTEGER.SWAP :close  4}{:instruction FLOAT.STACKDEPTH :close  4}{:instruction FLOAT.* :close  0}{:instruction INTEGER.STACKDEPTH :close  4}{:instruction INTEGER.- :close  0}{:instruction CODE.STACKDEPTH :close  0}{:instruction INTEGER.- :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction TRUE :close  0}{:instruction EXEC.FLUSH :close  0}{:instruction FLOAT./ :close  4}{:instruction FLOAT.COS :close  4}{:instruction EXEC.K :close  0}",
  "program": "(INTEGER.FROMBOOLEAN CODE.YANKDUP BOOLEAN.AND INTEGER.< INTEGER.YANKDUP CODE.DO*RANGE INTEGER.SWAP FLOAT.STACKDEPTH FLOAT.* INTEGER.STACKDEPTH INTEGER.- CODE.STACKDEPTH INTEGER.- EXEC.DO*TIMES (TRUE EXEC.FLUSH FLOAT./ )FLOAT.COS EXEC.K ()())",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 274,
  "genome": "{:instruction FLOAT.% :close  0}{:instruction FLOAT.= :close  0}",
  "program": "(FLOAT.% FLOAT.= )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 276,
  "genome": "{:instruction EXEC.WHEN :close  4}{:instruction EXEC.YANK :close  0}{:instruction INTEGER.FLUSH :close  4}{:instruction CODE.EXTRACT :close  0}{:instruction CODE.ROT :close  0}{:instruction CODE.SWAP :close  0}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction INTEGER.YANK :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction INTEGER.= :close  0}{:instruction FLOAT.STACKDEPTH :close  0}",
  "program": "(EXEC.WHEN ()EXEC.YANK INTEGER.FLUSH CODE.EXTRACT CODE.ROT CODE.SWAP BOOLEAN.FROMFLOAT INTEGER.YANK CODE.FROMINTEGER INTEGER.SHOVE INTEGER.= FLOAT.STACKDEPTH )",
  "result-set": { "integer-stack": {"size": 1 "data" : {0} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 277,
  "genome": "{:instruction FLOAT.- :close  0}{:instruction BOOLEAN.AND :close  4}{:instruction CODE.CONS :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction -2465 :close  0}{:instruction EXEC.ROT :close  0}{:instruction CODE.FROMFLOAT :close  0}{:instruction FLOAT.DUP :close  0}{:instruction CODE.FLUSH :close  0}{:instruction -293 :close  0}{:instruction EXEC.IF :close  0}{:instruction CODE.INSTRUCTIONS :close  4}{:instruction FLOAT.- :close  4}{:instruction EXEC.= :close  0}",
  "program": "(FLOAT.- BOOLEAN.AND CODE.CONS INTEGER.SWAP -2465 EXEC.ROT (CODE.FROMFLOAT FLOAT.DUP CODE.FLUSH -293 EXEC.IF (CODE.INSTRUCTIONS )())()(FLOAT.- )EXEC.= )",
  "result-set": { "integer-stack": {"size": 2 "data" : {-293 -2465} },
                  "float-stack": {"size": 0 "data" : {} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 278,
  "genome": "{:instruction BOOLEAN.OR :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction INTEGER.FLUSH :close  4}{:instruction INTEGER.= :close  0}{:instruction CODE.DUP :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction INTEGER.MIN :close  4}{:instruction EXEC.SHOVE :close  0}{:instruction FLOAT.YANK :close  4}{:instruction INTEGER.MAX :close  0}{:instruction CODE.YANKDUP :close  0}{:instruction -0.63625226859847372 :close  0}{:instruction CODE.DO*COUNT :close  4}",
  "program": "(BOOLEAN.OR EXEC.DO*TIMES (BOOLEAN.FROMINTEGER FLOAT.SHOVE INTEGER.FLUSH )INTEGER.= CODE.DUP CODE.DO*TIMES INTEGER.MIN EXEC.SHOVE (FLOAT.YANK )INTEGER.MAX CODE.YANKDUP -0.63625226859847372 CODE.DO*COUNT )",
  "result-set": { "integer-stack": {"size": 0 "data" : {} },
                  "float-stack": {"size": 1 "data" : {-0.636252} },
                  "bool-stack": {"size": 0 "data" : {} } }
}
{ "id": 279,
  "genome": "",
  "program": "()",
  "result-set": { "integer-stack": {"size": 0 "d