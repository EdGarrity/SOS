{:instruction EXEC.STACKDEPTH :close  4}{:instruction INTEGER.FLUSH :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction CODE.ROT :close  4}{:instruction FLOAT.FROMINTEGER :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction EXEC.POP :close  0}{:instruction INTEGER.FLUSH :close  4}{:instruction EXEC.WHEN :close  0}{:instruction FLOAT.* :close  4}{:instruction FLOAT./ :close  4}{:instruction CODE.QUOTE :close  0}{:instruction FLOAT.- :close  0}{:instruction BOOLEAN.SHOVE :close  4}{:instruction FLOAT.- :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction CODE.CONTAINER :close  4}{:instruction CODE.NULL :close  0}{:instruction EXEC.DUP :close  0}{:instruction CODE.LIST :close  0}{:instruction BOOLEAN.SWAP :close  4}{:instruction BOOLEAN.FROMFLOAT :close  0}{:instruction INTEGER.+ :close  4}{:instruction CODE.SWAP :close  0}{:instruction CODE.DO*COUNT :close  0}{:instruction EXEC.YANKDUP :close  0}{:instruction EXEC.YANK :close  0}{:instruction INTEGER.> :close  4}{:instruction EXEC.ROT :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction FLOAT.* :close  0}{:instruction CODE.NOOP :close  0}{:instruction FLOAT.ROT :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction 0 :close  0}{:instruction INTEGER.= :close  0}
(EXEC.STACKDEPTH INTEGER.FLUSH EXEC.YANKDUP CODE.ROT FLOAT.FROMINTEGER CODE.DO*COUNT BOOLEAN.ROT EXEC.POP (INTEGER.FLUSH )EXEC.WHEN (FLOAT.* )FLOAT./ CODE.QUOTE (FLOAT.- BOOLEAN.SHOVE )FLOAT.- BOOLEAN.NOR CODE.CONTAINER CODE.NULL EXEC.DUP (CODE.LIST BOOLEAN.SWAP )BOOLEAN.FROMFLOAT INTEGER.+ CODE.SWAP CODE.DO*COUNT EXEC.YANKDUP EXEC.YANK INTEGER.> EXEC.ROT (CODE.NTHCDR FLOAT.* CODE.NOOP FLOAT.ROT INTEGER.STACKDEPTH 0 INTEGER.= )()())
{:instruction FLOAT.FROMINTEGER :close  0}{:instruction FLOAT./ :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction CODE.= :close  0}{:instruction FLOAT.FROMDATA :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction CODE.DUP :close  4}{:instruction INTEGER./ :close  4}{:instruction TRUE :close  0}{:instruction EXEC.K :close  0}{:instruction CODE.CAR :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction CODE.ROT :close  4}{:instruction FLOAT.MAX :close  0}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction FLOAT.FROMBOOLEAN :close  0}{:instruction CODE.YANK :close  4}{:instruction CODE.QUOTE :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction CODE.NTH :close  0}{:instruction BOOLEAN.YANK :close  4}{:instruction EXEC.DO*COUNT :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction BOOLEAN.AND :close  0}{:instruction FLOAT.SIN :close  0}{:instruction CODE.= :close  4}{:instruction FLOAT.SHOVE :close  0}{:instruction CODE.SHOVE :close  0}{:instruction BOOLEAN.SWAP :close  0}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction CODE.= :close  4}{:instruction CODE.EXTRACT :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction FLOAT.* :close  0}{:instruction EXEC.= :close  0}{:instruction CODE.LENGTH :close  4}{:instruction BOOLEAN.OR :close  0}{:instruction BOOLEAN.YANK :close  4}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction CODE.FROMINTEGER :close  4}{:instruction CODE.ROT :close  0}{:instruction CODE.LIST :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction 0 :close  0}{:instruction INTEGER.= :close  0}
(FLOAT.FROMINTEGER FLOAT./ INTEGER.SHOVE CODE.= FLOAT.FROMDATA BOOLEAN.OR FLOAT.SHOVE CODE.DUP INTEGER./ TRUE EXEC.K (CODE.CAR EXEC.DO*WHILE (CODE.ROT ))()FLOAT.MAX FLOAT.FROMBOOLEAN FLOAT.FROMBOOLEAN CODE.YANK CODE.QUOTE (CODE.FROMINTEGER CODE.NTH BOOLEAN.YANK )EXEC.DO*COUNT (CODE.FROMBOOLEAN BOOLEAN.AND FLOAT.SIN CODE.= )FLOAT.SHOVE CODE.SHOVE BOOLEAN.SWAP FLOAT.STACKDEPTH CODE.= CODE.EXTRACT EXEC.DO*WHILE (FLOAT.* EXEC.= CODE.LENGTH )BOOLEAN.OR BOOLEAN.YANK INTEGER.STACKDEPTH CODE.FROMINTEGER CODE.ROT CODE.LIST INTEGER.STACKDEPTH 0 INTEGER.= )
{:instruction FLOAT./ :close  0}{:instruction CODE.NTH :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction 0 :close  0}{:instruction INTEGER.= :close  0}
(FLOAT./ CODE.NTH INTEGER.STACKDEPTH BOOLEAN.OR 0 INTEGER.= )
{:instruction EXEC.S :close  0}{:instruction FLOAT.= :close  4}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction 0 :close  0}{:instruction INTEGER.= :close  0}
(EXEC.S (FLOAT.= )()()INTEGER.STACKDEPTH 0 INTEGER.= )
{:instruction CODE.ROT :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction INTEGER.> :close  4}{:instruction CODE.QUOTE :close  0}{:instruction INTEGER.MIN :close  0}{:instruction CODE.CDR :close  0}{:instruction BOOLEAN.OR :close  0}{:instruction CODE.= :close  4}{:instruction EXEC.WHILE :close  0}{:instruction BOOLEAN.NOR :close  0}{:instruction CODE.DUP :close  4}{:instruction EXEC.ROT :close  4}{:instruction FLOAT.POP :close  0}{:instruction EXEC.SWAP :close  0}{:instruction EXEC.S :close  4}{:instruction EXEC.S :close  4}{:instruction EXEC.ROT :close  0}{:instruction EXEC.FLUSH :close  0}{:instruction CODE.DO*RANGE :close  0}{:instruction EXEC.= :close  0}{:instruction CODE.NTH :close  0}{:instruction CODE.FROMFLOAT :close  0}{:instruction CODE.IF :close  0}{:instruction CODE.QUOTE :close  0}{:instruction CODE.APPEND :close  0}{:instruction CODE.CONS :close  4}{:instruction CODE.NTHCDR :close  0}{:instruction BOOLEAN.NAND :close  0}{:instruction CODE.ATOM :close  0}{:instruction CODE.YANKDUP :close  0}{:instruction BOOLEAN.SWAP :close  0}{:instruction CODE.SIZE :close  0}{:instruction BOOLEAN.NAND :close  0}{:instruction INTEGER.DUP :close  0}{:instruction CODE.FROMINTEGER :close  0}{:instruction INTEGER.MAX :close  4}{:instruction EXEC.Y :close  0}{:instruction CODE.FROMBOOLEAN :close  0}{:instruction FLOAT.FROMDATA :close  0}{:instruction CODE.LIST :close  4}{:instruction EXEC.SWAP :close  4}{:instruction CODE.POSITION :close  0}{:instruction CODE.NTHCDR :close  0}{:instruction FLOAT.POP :close  4}{:instruction INTEGER.+ :close  4}{:instruction EXEC.SWAP :close  4}{:instruction CODE.FROMINTEGER :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction 0 :close  0}{:instruction INTEGER.= :close  0}
(CODE.ROT CODE.FROMINTEGER INTEGER.> CODE.QUOTE (INTEGER.MIN CODE.CDR BOOLEAN.OR CODE.= )EXEC.WHILE (BOOLEAN.NOR CODE.DUP )EXEC.ROT ()()()FLOAT.POP EXEC.SWAP (EXEC.S ()()())(EXEC.S ()()())EXEC.ROT (EXEC.FLUSH CODE.DO*RANGE EXEC.= CODE.NTH CODE.FROMFLOAT CODE.IF CODE.QUOTE (CODE.APPEND CODE.CONS ))()()CODE.NTHCDR BOOLEAN.NAND CODE.ATOM CODE.YANKDUP BOOLEAN.SWAP CODE.SIZE BOOLEAN.NAND INTEGER.DUP CODE.FROMINTEGER INTEGER.MAX EXEC.Y (CODE.FROMBOOLEAN FLOAT.FROMDATA CODE.LIST )EXEC.SWAP ()()CODE.POSITION CODE.NTHCDR FLOAT.POP INTEGER.+ EXEC.SWAP ()()CODE.FROMINTEGER INTEGER.STACKDEPTH 0 INTEGER.= )
{:instruction CODE.EXTRACT :close  0}{:instruction CODE.LENGTH :close  0}{:instruction EXEC.SWAP :close  4}{:instruction EXEC.K :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction CODE.EXTRACT :close  0}{:instruction INTEGER.MIN :close  4}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction EXEC.ROT :close  0}{:instruction CODE.YANKDUP :close  4}{:instruction CODE.DO*COUNT :close  0}{:instruction EXEC.DO*TIMES :close  0}{:instruction CODE.DO* :close  4}{:instruction EXEC.YANKDUP :close  0}{:instruction INTEGER.- :close  4}{:instruction EXEC.DO*WHILE :close  0}{:instruction BOOLEAN.POP :close  0}{:instruction FLOAT.COS :close  0}{:instruction CODE.EXTRACT :close  4}{:instruction FLOAT.* :close  4}{:instruction INTEGER.> :close  0}{:instruction CODE.= :close  0}{:instruction FLOAT.= :close  0}{:instruction CODE.SIZE :close  0}{:instruction BOOLEAN.ROT :close  0}{:instruction CODE.DO :close  0}{:instruction CODE.SIZE :close  0}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction EXEC.SHOVE :close  4}{:instruction CODE.SHOVE :close  0}{:instruction INTEGER.+ :close  4}{:instruction INTEGER.STACKDEPTH :close  4}{:instruction EXEC.SWAP :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction 0 :close  0}{:instruction INTEGER.= :close  0}
(CODE.EXTRACT CODE.LENGTH EXEC.SWAP ()()EXEC.K (EXEC.SHOVE (CODE.EXTRACT INTEGER.MIN ))()INTEGER.STACKDEPTH EXEC.ROT (CODE.YANKDUP )()()CODE.DO*COUNT EXEC.DO*TIMES (CODE.DO* )EXEC.YANKDUP INTEGER.- EXEC.DO*WHILE (BOOLEAN.POP FLOAT.COS CODE.EXTRACT )FLOAT.* INTEGER.> CODE.= FLOAT.= CODE.SIZE BOOLEAN.ROT CODE.DO CODE.SIZE BOOLEAN.STACKDEPTH EXEC.SHOVE ()CODE.SHOVE INTEGER.+ INTEGER.STACKDEPTH EXEC.SWAP (EXEC.DO*WHILE (0 INTEGER.= ))())
{:instruction FLOAT.MIN :close  4}{:instruction FLOAT.SIN :close  0}{:instruction CODE.SHOVE :close  0}{:instruction CODE.DO*TIMES :close  0}{:instruction INTEGER./ :close  0}{:instruction INTEGER.SWAP :close  0}{:instruction CODE.NOOP :close  0}{:instruction BOOLEAN.NOR :close  4}{:instruction CODE.APPEND :close  0}{:instruction EXEC.DUP :close  0}{:instruction FLOAT.SWAP :close  0}{:instruction CODE.NULL :close  4}{:instruction BOOLEAN.SWAP :close  0}{:instruction CODE.CDR :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction 0 :close  0}{:instruction INTEGER.= :close  0}
(FLOAT.MIN FLOAT.SIN CODE.SHOVE CODE.DO*TIMES INTEGER./ INTEGER.SWAP CODE.NOOP BOOLEAN.NOR CODE.APPEND EXEC.DUP (FLOAT.SWAP CODE.NULL )BOOLEAN.SWAP CODE.CDR INTEGER.STACKDEPTH 0 INTEGER.= )
{:instruction BOOLEAN.SWAP :close  0}{:instruction CODE.FLUSH :close  0}{:instruction CODE.SWAP :close  0}{:instruction CODE.LENGTH :close  0}{:instruction BOOLEAN.NOT :close  0}{:instruction FLOAT.FROMINTEGER :close  4}{:instruction FLOAT.SHOVE :close  0}{:instruction CODE.NOOP :close  0}{:instruction EXEC.DO*WHILE :close  0}{:instruction EXEC.STACKDEPTH :close  0}{:instruction 0.68939660901422539 :close  0}{:instruction FLOAT.< :close  0}{:instruction EXEC.FLUSH :close  4}{:instruction BOOLEAN.STACKDEPTH :close  0}{:instruction CODE.EXTRACT :close  0}{:instruction BOOLEAN.NAND :close  0}{:instruction EXEC.SHOVE :close  0}{:instruction FLOAT.SHOVE :close  0}{:instruction FLOAT.MAX :close  0}{:instruction BOOLEAN.FROMINTEGER :close  0}{:instruction FALSE :close  0}{:instruction CODE.YANK :close  0}{:instruction EXEC.ROT :close  0}{:instruction INTEGER./ :close  0}{:instruction INTEGER.SHOVE :close  0}{:instruction FLOAT.> :close  0}{:instruction FLOAT.STACKDEPTH :close  0}{:instruction 9 :close  0}{:instruction INTEGER.= :close  0}
(BOOLEAN.SWAP CODE.FLUSH CODE.SWAP CODE.LENGTH BOOLEAN.NOT FLOAT.FROMINTEGER FLOAT.SHOVE CODE.NOOP EXEC.DO*WHILE (EXEC.STACKDEPTH 0.68939660901422539 FLOAT.< EXEC.FLUSH )BOOLEAN.STACKDEPTH CODE.EXTRACT BOOLEAN.NAND EXEC.SHOVE (FLOAT.SHOVE FLOAT.MAX BOOLEAN.FROMINTEGER FALSE CODE.YANK EXEC.ROT (INTEGER./ INTEGER.SHOVE FLOAT.> FLOAT.STACKDEPTH 9 INTEGER.= )()()))
{:instruction CODE.INSTRUCTIONS :close  4}{:instruction EXEC.K :close  0}{:instruction CODE.EXTRACT :close  4}{:instruction FLOAT.FROMINTEGER :close  4}{:instruction BOOLEAN.AND :close  4}{:instruction FLOAT.TAN :close  0}{:instruction CODE.POP :close  0}{:instruction CODE.APPEND :close  0}{:instruction INTEGER.STACKDEPTH :close  0}{:instruction 0 :close  0}{:instruction INTEGER.= :close  0}
(CODE.INSTRUCTIONS EXEC.K (CODE.EXTRACT )()FLOAT.FROMINTEGER BOOLEAN.AND FLOAT.TAN CODE.POP CODE.APPEND INTEGER.STACKDEPTH 0 INTEGER.= )
